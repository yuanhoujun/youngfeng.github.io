{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/dkWRJTPu3y.txt","path":"dkWRJTPu3y.txt","modified":0,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/10fenjl.jpg","path":"images/10fenjl.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qrcode.jpg","path":"uploads/wechat-qrcode.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f596105aa927adc6d8c85b6eef21e4118cf3295f","modified":1517988949023},{"_id":"source/.DS_Store","hash":"3925d0e9551fc6ca348224ac64f4392373d4d326","modified":1556454452837},{"_id":"source/dkWRJTPu3y.txt","hash":"40fb5ed4d6314a266cf4186d841d7bd2da0a83c9","modified":1548412623083},{"_id":"themes/ocean/README.md","hash":"0a5f44c3b9f6757ffdb3576f57afa53f203ea985","modified":1556428758030},{"_id":"themes/ocean/_config.yml","hash":"df79e01a3a160b89a201d6994a6ba0ff293701ad","modified":1556442730945},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1556428758040},{"_id":"source/_data/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517992121934},{"_id":"source/_data/next.yml","hash":"f8619028781af5a3041a82cb776a69c6122e508a","modified":1518244552085},{"_id":"source/_posts/.DS_Store","hash":"4b61df48d56c0f1e5b0aac035e4138b38e523e69","modified":1556432481961},{"_id":"source/_posts/写在十分简历发布前夕.md","hash":"a6aadbbf50e43eb5e3016c07ef9f7c5f533a8747","modified":1556432597636},{"_id":"source/about/index.md","hash":"179d18f5afafdbf9f9d0c9f318322996010733f5","modified":1518086937465},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1518087353747},{"_id":"source/images/.DS_Store","hash":"8c172bcdb0379c958dd45a2ed376b13a5564760b","modified":1547296982877},{"_id":"source/images/avatar.jpeg","hash":"3530af8f5dc6b24312ec4f1fbaffa5243f866e35","modified":1518062951308},{"_id":"source/categories/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1518070920457},{"_id":"source/images/10fenjl.jpg","hash":"474fa9c55926606307b34a38bf9dc3c3275e1b47","modified":1547288083355},{"_id":"source/categories/index.md","hash":"366293550d33979caed854a4db4091731f254c87","modified":1518070877503},{"_id":"source/categories/other.md","hash":"e2a9d5881d754b67a3a312e55241c72c38bc27b9","modified":1518071062480},{"_id":"source/tags/index.md","hash":"14d2c091911ae1f0baaf2ec091aeaf9c3ee9d86b","modified":1518072607368},{"_id":"themes/ocean/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1556428758021},{"_id":"source/uploads/.DS_Store","hash":"1519dca8066e4113ec4e71a6ab4a9eebff3507cb","modified":1518001730425},{"_id":"source/uploads/wechat-qrcode.jpg","hash":"4941dd1c650bbd12ca690041359863bedd62d0f2","modified":1518001616484},{"_id":"themes/ocean/.git/config","hash":"686588db57bb2d68a492446ce94aa90be25c28fa","modified":1556428758025},{"_id":"themes/ocean/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1556428655567},{"_id":"themes/ocean/.git/index","hash":"8817b4230c5d1c6a33cf4b00e24e57b4c1ce80bc","modified":1556439387933},{"_id":"themes/ocean/.git/packed-refs","hash":"148f37f0b36cafeb6bdeaac4d15343e3a0a3b491","modified":1556428758018},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1556428758039},{"_id":"themes/ocean/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1556428758039},{"_id":"themes/ocean/layout/index.ejs","hash":"dead30ea8014348cef977dcb44eea0ae0f0601c5","modified":1556428758039},{"_id":"themes/ocean/layout/layout.ejs","hash":"9ce598d82d973518e255fe64019b8523a2d65796","modified":1556428758039},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1556428758040},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1556428758040},{"_id":"themes/ocean/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1556428758040},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1556428758031},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1556428758031},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1556428758031},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1556428758032},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1556428758032},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1556428758032},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1556428758032},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1556428758032},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1556428758032},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1556428758032},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"ce97f118ca4940964d121904bb435fadda7349fd","modified":1556443653864},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1556428758033},{"_id":"themes/ocean/source/.DS_Store","hash":"96ee03532d34f4c2a1bc943acd96131d47f8ae8d","modified":1556435625515},{"_id":"themes/ocean/source/404.html","hash":"fe1497ac9b2d47f4e3e880946e22fbfe3db7496e","modified":1556428758044},{"_id":"themes/ocean/source/favicon.ico","hash":"d0bd565d0f410f56b3e64313c22f320e9787aac4","modified":1556439366620},{"_id":"source/_posts/about ouyangfeng/2017年终总结.md","hash":"1c655c0ad34f382f5b10328fce7c07ff216192a4","modified":1518251467814},{"_id":"source/_posts/about ouyangfeng/欧阳锋档案馆.md","hash":"c915e017558a81599fc566b564eff73c85bf2504","modified":1519978922068},{"_id":"source/_posts/bug fix/记一次印象深刻的Bug追踪过程.md","hash":"1aa10f01ae82327727d55aed769c7fdcc8320e8b","modified":1518247864315},{"_id":"source/_posts/comprehensive article/是你自己选择了安逸，别怪路途太遥远.md","hash":"d63224e74e49f47e78dcb4601b8e79dc3bf56056","modified":1520258106500},{"_id":"source/_posts/comprehensive article/技术相对论之软件架构.md","hash":"fa0b3d3f5144a2b0c767f25c000a7a96edd852e7","modified":1521469011307},{"_id":"source/_posts/design pattern/10分钟看懂动态代理设计模式.md","hash":"5cadc119a7409f09356d76a71ef682a54bb99636","modified":1519978497670},{"_id":"source/_posts/develop tools/关于Git，你真的学会了吗？.md","hash":"0553aa15c28c78420e42136ff6990299f326d1dd","modified":1519978616445},{"_id":"source/_posts/it tips/最完整的Markdown基础教程.md","hash":"53e48c952215305959254f1082b8ca93b3282c95","modified":1524032765568},{"_id":"source/_posts/kotlin/2018最新Kotlin基础视频教程上线了.md","hash":"b95f94ed30ba46314dbc3b368be30c031084acc5","modified":1531120380452},{"_id":"source/_posts/kotlin/Kotlin语言中的泛型设计哲学.md","hash":"9fd73b421981160fb70b6a29cbca350f58c15b15","modified":1523978400109},{"_id":"source/_posts/kotlin/Kotlin难点解析：extension和this指针.md","hash":"8490fe27226704628bc130618791f5537711e1b7","modified":1523636371833},{"_id":"source/_posts/kotlin/你是否也被Kotlin语言的object绕晕了呢.md","hash":"316d1db66b1e14d76d7b3b0047f95ed9bd137ec6","modified":1523679519654},{"_id":"source/_posts/kotlin/delegation.md","hash":"1985a257b8c4ac99c7169d1a68df0b8486d53806","modified":1518071877141},{"_id":"source/_posts/kotlin/关于Kotlin抛弃可检测的异常处理，你怎么看？.md","hash":"1b10dff05007874f437a9b9932498feee04d11d0","modified":1524812646474},{"_id":"source/_posts/kotlin/操作符重载及中缀调用.md","hash":"55b73b56faa447b4f473d40d380b4c0a90b7dd22","modified":1518087401477},{"_id":"source/_posts/kotlin/测测你的Kotlin基础.md","hash":"df32f6a445268c95308bf1e1d0ec68d142de1b30","modified":1524814386784},{"_id":"source/_posts/kotlin/用Kotlin写Android-Gradle脚本.md","hash":"de9b3c8a13f87bccf39cd97facedd2ab250588e5","modified":1518186555993},{"_id":"source/_posts/写在十分简历发布前夕/10fenjl.jpg","hash":"474fa9c55926606307b34a38bf9dc3c3275e1b47","modified":1547296574156},{"_id":"source/_posts/kotlin/那些年，我们看不懂的那些Kotlin标准函数.md","hash":"d8e2340c5819a4c088374d47d8971c4280bb0bbb","modified":1524813712253},{"_id":"source/_posts/open source/Android两行代码实现仿微信滑动返回效果.md","hash":"1830c9eff88d220787b854db15dbe6209a21a5c8","modified":1520301509257},{"_id":"themes/ocean/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1556428655568},{"_id":"themes/ocean/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1556428655576},{"_id":"themes/ocean/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1556428655572},{"_id":"themes/ocean/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1556428655571},{"_id":"themes/ocean/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1556428655577},{"_id":"themes/ocean/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1556428655569},{"_id":"themes/ocean/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1556428655570},{"_id":"themes/ocean/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1556428655578},{"_id":"themes/ocean/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1556428655567},{"_id":"themes/ocean/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1556428655572},{"_id":"themes/ocean/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1556428655573},{"_id":"themes/ocean/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1556428655580},{"_id":"themes/ocean/.git/logs/HEAD","hash":"3c7b4e9586056ce21dc5091956e71fc0eec0e3d4","modified":1556428758022},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"8f46a5a73c95827d812ca3e90ebb0ad8f16fb7b2","modified":1556428758033},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"d6af18fa8908e89b64a5b00172aaff8ddcef75fc","modified":1556428758033},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"6c6cf7d1acb6548396183ce4836f1f9a3a1a4d10","modified":1556428758034},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"0836e20d6f6785a7c1e1e559de194df8dd395b4c","modified":1556428758034},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"83079a3ba5408bbf4c10b4bf1b557b6ef63f29fb","modified":1556428758034},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"b8174a6094f859ce82e8af2f1b30e1ce03fd0eb2","modified":1556428758034},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"be76e0cbc4ecd9171972fabed6830cb592b5b343","modified":1556428758034},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"6e5fadba43415d4605593674591cce822b6fb8bf","modified":1556428758038},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"70176e319a1558c8b61abecfedbbc08b258e7beb","modified":1556428758038},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1556428758042},{"_id":"themes/ocean/source/css/404.styl","hash":"251f26627c29f97e580a36dac7ae9d99475e95b7","modified":1556428758044},{"_id":"themes/ocean/source/css/_extend.styl","hash":"deb6aca91c40516f5d638008a72f9def42e5d081","modified":1556428758044},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"8494f0e869411781264868f08eda62fd838e0cee","modified":1556428758045},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"fbe77673e6f8c714a90daabba6c94cf491650887","modified":1556428758045},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1556428758045},{"_id":"themes/ocean/source/css/_variables.styl","hash":"bd526854cd5389d3ed0f36f8cb9394fc08528ae4","modified":1556428758053},{"_id":"themes/ocean/source/css/style.styl","hash":"e01e1b4e5350c162f3bec32dc5befbad7b7914ec","modified":1556428758058},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1556428758059},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"2b65004893e3f06a9c7cee2fbfe2e74ab8388041","modified":1556435492176},{"_id":"themes/ocean/source/images/hexo.svg","hash":"0bc93dee6f380a5cf412b70a04b80fd480ca52a7","modified":1556435768479},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1556428758135},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1556428758137},{"_id":"themes/ocean/source/js/ocean.js","hash":"3457be62843930ad58997cd6fd387783285242c7","modified":1556428758137},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1556428758137},{"_id":"themes/ocean/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1556428758138},{"_id":"themes/ocean/source/css/_partial/comment.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556428758046},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1556428758060},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1556428758136},{"_id":"themes/ocean/.git/objects/pack/pack-f0a4e6a191d28f3dfa43589cee3bdc45fb85ac64.idx","hash":"ba4552451c754ab2b4c7cc7f14aad7499f1dd781","modified":1556428758009},{"_id":"themes/ocean/.git/refs/heads/master","hash":"43d197c52b68acd902282777840dcb7123690121","modified":1556428758022},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"dcfea9a328f5e1d90758ac71d7d7555b31b93bcb","modified":1556428758035},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"88462d160479cc3f0cc58efcd888fbaf22b0d4d8","modified":1556428758036},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1556428758036},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1556428758036},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1556428758036},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"e36d149ad83c3a52562dbef61a0083957eb24578","modified":1556428758037},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1556428758037},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1556428758037},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1556428758038},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"f8c9cb35d8d1975aa3b457d9a92f38c462e97732","modified":1556428758038},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1556428758046},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"8aefdcf2d542ad839018c2c58511e3318a38490d","modified":1556428758046},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"93905de0339f3e831a383739bdc477c29c1914c4","modified":1556428758046},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"7bf289013d304505984b251be725b49165a694fd","modified":1556428758046},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1556428758048},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1556428758049},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1556428758049},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1556428758049},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1556428758050},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"47a8a98aaaf7db4d2d89b8c41b43394d1cc92849","modified":1556428758050},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"087f08e0ce9aca48e096dabca6eed2368b5bcd6b","modified":1556428758050},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1556428758050},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"8caacf53dbd0360d6fe1bb5594ddc6abb37f90ee","modified":1556442267477},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"6c68a00bcd69853711db48f5fdd02544d8a6152e","modified":1556428758051},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1556428758051},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"011aaf21942dfff514ed4e98ce20142efbdd1b71","modified":1556428758052},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1556428758052},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"69fcb0c9adb45f592838c3babc58d3490f413db2","modified":1556428758052},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1556428758054},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1556428758055},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1556428758056},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1556428758058},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1556428758132},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1556428758055},{"_id":"themes/ocean/.git/logs/refs/heads/master","hash":"3c7b4e9586056ce21dc5091956e71fc0eec0e3d4","modified":1556428758023},{"_id":"themes/ocean/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1556428758021},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1556428758061},{"_id":"themes/ocean/.git/logs/refs/remotes/origin/HEAD","hash":"3c7b4e9586056ce21dc5091956e71fc0eec0e3d4","modified":1556428758021},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1556428758095},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1556428758103},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1556428758113},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1556428758080},{"_id":"themes/ocean/.git/objects/pack/pack-f0a4e6a191d28f3dfa43589cee3bdc45fb85ac64.pack","hash":"3e785303604196e9341dc835737a80ff48953add","modified":1556428758008},{"_id":"public/baidusitemap.xml","hash":"d1c0ec78b7463f760ef764df2420b772ca5d9ff8","modified":1556455868519},{"_id":"public/baidu_urls.txt","hash":"4dbd88cb22faab4ffcef2686251893119dfa319a","modified":1556455868519},{"_id":"public/search.xml","hash":"5fd964f7d551f9a4c045216155542fab690c3acc","modified":1556455868520},{"_id":"public/sitemap.xml","hash":"ccbd319763a2c39e257a7dcdd747bbf4f8b37a4a","modified":1556455868520},{"_id":"public/categories/index.html","hash":"4092a8ff469a484fe9d12f1681b480990ee2447b","modified":1556456452928},{"_id":"public/categories/other.html","hash":"7c5bf744ee28ffc6fc715140c3ce49d2ab4c618b","modified":1556456452928},{"_id":"public/about/index.html","hash":"c90504c7c4dea0ada84d98b31c58ba21cd802315","modified":1556456452928},{"_id":"public/tags/index.html","hash":"a9d4d4e8d24a4a25026874d1dc40f45321e425a9","modified":1556456452929},{"_id":"public/2018/04/27/kotlin/关于Kotlin抛弃可检测的异常处理，你怎么看？/index.html","hash":"e5cf37af93eaa8a70d2b1ee09ee6a625a5045e1f","modified":1556456452929},{"_id":"public/2018/07/09/kotlin/2018最新Kotlin基础视频教程上线了/index.html","hash":"ad6e08e9ae3c796b152846788510d697db595f96","modified":1556456452929},{"_id":"public/2018/04/14/kotlin/你是否也被Kotlin语言的object绕晕了呢/index.html","hash":"dcf1b37a987296b9ac303492c8267ae0f59ecb67","modified":1556456452929},{"_id":"public/2019/01/12/写在十分简历发布前夕/index.html","hash":"d238f04f86384f7763bac42b2a74a8c712d5a310","modified":1556456452929},{"_id":"public/2018/04/27/kotlin/那些年，我们看不懂的那些Kotlin标准函数/index.html","hash":"67e538c78db72e092564e7008d77702ff81dcf78","modified":1556456452929},{"_id":"public/2018/04/27/kotlin/测测你的Kotlin基础/index.html","hash":"d1005acb1dfab390a6faffa8d9d518505c3ad9e6","modified":1556456452929},{"_id":"public/2018/04/18/it tips/最完整的Markdown基础教程/index.html","hash":"df946c0fe8d406402d08d1a0fe09ab94b0f87fca","modified":1556456452929},{"_id":"public/2018/04/17/kotlin/Kotlin语言中的泛型设计哲学/index.html","hash":"64416ef571aa472d0b2ea7473fe6cefd5d266504","modified":1556456452929},{"_id":"public/2018/04/14/kotlin/Kotlin难点解析：extension和this指针/index.html","hash":"514b1a9acb12b74004841d561605d958348dc217","modified":1556456452929},{"_id":"public/2018/03/06/open source/Android两行代码实现仿微信滑动返回效果/index.html","hash":"11e5769b220bc60f499b9482da5a49f44c82971b","modified":1556456452929},{"_id":"public/2018/03/05/comprehensive article/是你自己选择了安逸，别怪路途太遥远/index.html","hash":"b26ba1e7dc50ed0d2a3a4d1c324f8cc46ca187b1","modified":1556456452934},{"_id":"public/2018/02/28/about ouyangfeng/欧阳锋档案馆/index.html","hash":"3fb43c0c508f8289f2182bb178169126cda27b0f","modified":1556456452934},{"_id":"public/2018/02/15/about ouyangfeng/2017年终总结/index.html","hash":"bd8112b2e3c06f60e77bc001ada5691cdfeff17c","modified":1556456452934},{"_id":"public/archives/index.html","hash":"6aacd41835561b73a0159d8e561fa43cc7105090","modified":1556456452935},{"_id":"public/archives/page/2/index.html","hash":"fae0c7ef65773c8280eeb878ce929af8bf647c85","modified":1556456452935},{"_id":"public/archives/2018/index.html","hash":"f2e14bd01e8d37a03252a0803b3d95741a564382","modified":1556456452935},{"_id":"public/archives/2016/08/index.html","hash":"c5a32b6c8d371d93cf47c0eb3a7da6894480dfdd","modified":1556456452935},{"_id":"public/archives/2018/page/2/index.html","hash":"35205aacbd35422ccb5e317ff65ba8e51753a1cd","modified":1556456452935},{"_id":"public/archives/2018/01/index.html","hash":"4775f1a89832ed9841629b9aa10f5de16092d0fc","modified":1556456452935},{"_id":"public/archives/2018/02/index.html","hash":"727fc46ff68912e87e8bf29ccbb2172baf2a65b5","modified":1556456452936},{"_id":"public/archives/2018/03/index.html","hash":"3102fb8b5b04d0caa997ec5351dfaca3ba0f5a3f","modified":1556456452936},{"_id":"public/archives/2018/04/index.html","hash":"c5bda5a9becf2587b49e4e718e5e9ae41991ac1f","modified":1556456452936},{"_id":"public/archives/2018/07/index.html","hash":"419c3abb9acd369ef855881f86e667c3a7cdd272","modified":1556456452936},{"_id":"public/categories/创业札记/index.html","hash":"b59f73bb54d1f6679f0bc5ac0f4fe6ae2d95f992","modified":1556456452937},{"_id":"public/categories/关于欧阳锋/index.html","hash":"8ee678a725095656544af6e0cb72412911b52bcc","modified":1556456452937},{"_id":"public/archives/2019/index.html","hash":"ea621e64187a5085651b3f834bef25220ec38e1b","modified":1556456452936},{"_id":"public/archives/2019/01/index.html","hash":"1b0156d3fac3a8693d1d22939155fa8365f7d2be","modified":1556456452936},{"_id":"public/archives/2016/index.html","hash":"e31a0c743f6f6d4747c7e7314946a8c4e306d88a","modified":1556456452935},{"_id":"public/categories/IT小知识/index.html","hash":"d8c13ceb9176b51beaf24c654a7f3e9f0cc4e4a7","modified":1556456452937},{"_id":"public/categories/Kotlin/index.html","hash":"59987cbb69894470d39e2c0339995364b758f85e","modified":1556456452937},{"_id":"public/categories/开源/index.html","hash":"03c82baf6a5a806f16fa78fae8b60fb4e2b79fe1","modified":1556456452937},{"_id":"public/categories/随文杂记/index.html","hash":"4d9ebc7aef0e3b71b49398199f69d9fea8f2eeac","modified":1556456452937},{"_id":"public/categories/Kotlin/杂谈/index.html","hash":"c38a51d84d49732830fe4698c423de3ecadc72a4","modified":1556456452938},{"_id":"public/categories/Kotlin/基础知识/index.html","hash":"6bd5aee20e183c6108c002a9a6188872b2e1c16f","modified":1556456452938},{"_id":"public/categories/Bug-Fix/index.html","hash":"b9ad1a3c76d9afb19ae63b67e8b66480872c54fe","modified":1556456452938},{"_id":"public/categories/开发工具/Git/index.html","hash":"743efecb2bd6df0d6391818976ce2922d5ccd3d6","modified":1556456452939},{"_id":"public/categories/设计模式/index.html","hash":"0417bb9ed3229a72a98bc4b8cd5131ae923bc7fc","modified":1556456452938},{"_id":"public/tags/创业/index.html","hash":"2865cc3a7ae9ac587c6a7c3920ed16c7084c57d0","modified":1556456452939},{"_id":"public/tags/十分简历/index.html","hash":"d8b292461e6e959c326db55c8a8ea8641cc3c03f","modified":1556456452939},{"_id":"public/tags/深圳一行代码科技有限公司/index.html","hash":"47fbe9582eb4ed080a27f7de6ae503dd999684f3","modified":1556456452939},{"_id":"public/tags/2017/index.html","hash":"a502bd5aed3382b9931c2c176c7490185e4f2683","modified":1556456452939},{"_id":"public/categories/开发工具/index.html","hash":"7497b2ff9737caa548e77f3b3639c3e0fa48f324","modified":1556456452938},{"_id":"public/tags/总结/index.html","hash":"ef42d06ce3838171cbb49f02a3b23bae85c094e8","modified":1556456452939},{"_id":"public/tags/Markdown/index.html","hash":"e504500cadfa537491fd30d3bbb64e5f9601e029","modified":1556456452940},{"_id":"public/tags/Android/index.html","hash":"14d59ec9004e57446d32f0d234bfb1ff54a41d8c","modified":1556456452940},{"_id":"public/tags/关注/index.html","hash":"0758d7e9509498f9d49988ebb8e524d31f6fdae0","modified":1556456452940},{"_id":"public/tags/Kotlin基础/index.html","hash":"0d3e71e48954cfebd0bab3b1dd59d8953c9458fd","modified":1556456452940},{"_id":"public/tags/欧阳锋/index.html","hash":"754d277e0d40d9f70c92142cd142520bb740ad5a","modified":1556456452939},{"_id":"public/tags/工作室/index.html","hash":"69ab851926445c651e8984babce95691f3152a48","modified":1556456452940},{"_id":"public/tags/Kotlin/index.html","hash":"812601637cd43374d3784490d4866223898ed00b","modified":1556456452940},{"_id":"public/tags/视频教程/index.html","hash":"ad419e5cabeff3400017a213babb55b1063a51e1","modified":1556456452940},{"_id":"public/tags/扩展/index.html","hash":"4430cf73b763f5791daec55bb98e6905d675c16f","modified":1556456452940},{"_id":"public/tags/object/index.html","hash":"84a2d6232e08ac5fcb64821a6e288e709c81a339","modified":1556456452941},{"_id":"public/tags/编程语言/index.html","hash":"81e874b36b388677dbf7f7cb4eeb3670c03166ba","modified":1556456452941},{"_id":"public/tags/this/index.html","hash":"719f5eff808951a480a0d3919e8fa3c94b5db3e4","modified":1556456452941},{"_id":"public/tags/开源/index.html","hash":"2e9281a566982e247438d41681a1726f03243dce","modified":1556456452941},{"_id":"public/tags/代理模式/index.html","hash":"82b537abf6d66106c0a2a4fd1b780292d26a1183","modified":1556456452942},{"_id":"public/tags/滑动返回/index.html","hash":"39a277a810a35866d99b3f55108871c0968fefad","modified":1556456452941},{"_id":"public/tags/泛型/index.html","hash":"788e3de69de48c448ce783908636555caf5e2458","modified":1556456452941},{"_id":"public/tags/Groovy/index.html","hash":"f849662798f6d12d832f9957310ea44d6144688d","modified":1556456452942},{"_id":"public/tags/Gradle/index.html","hash":"6ab71c1a3e4f50b4b4df5efc012cd3d9d6f0e8bb","modified":1556456452942},{"_id":"public/tags/代理属性/index.html","hash":"2187b4a2cbb62762778a8bafe614edf194e53d4d","modified":1556456452942},{"_id":"public/tags/Bug/index.html","hash":"834773db399e74419022df66ad6dafc452078d3c","modified":1556456452942},{"_id":"public/tags/操作符/index.html","hash":"c746b358cbf7e54bcecc6d7d749238c8ffcc598a","modified":1556456452942},{"_id":"public/tags/前端/index.html","hash":"05956d4ccd74edf5b4ac8ef4b847dcd5703e60b7","modified":1556456452942},{"_id":"public/tags/重载/index.html","hash":"9bb843deff7fe2b05638e5e4a9df0d4e325e94b7","modified":1556456452942},{"_id":"public/tags/脚本/index.html","hash":"c8bb25f64d3d634b981f0a1cade227212944a1bd","modified":1556456452942},{"_id":"public/tags/infix/index.html","hash":"8dcec189954774f4db2b09c9606349200bbafa99","modified":1556456452943},{"_id":"public/tags/延迟加载/index.html","hash":"ce1db7d02f92b84112372f14427a9aeb4b8b787c","modified":1556456452942},{"_id":"public/tags/Java/index.html","hash":"b022009da7b4f2e8928e57fe13021e2e74a69295","modified":1556456452943},{"_id":"public/tags/设计模式/index.html","hash":"698e07e6b3b0dd277f23a7cd57c1658a73ff527e","modified":1556456452943},{"_id":"public/tags/动态代理/index.html","hash":"6cf1bcbef224ced760d2ef72cad2ea657f5a1914","modified":1556456452943},{"_id":"public/tags/Git/index.html","hash":"556fe6ebb7b143ad65d00f97ea0d7365738b9e8e","modified":1556456452943},{"_id":"public/tags/开发工具/index.html","hash":"0ab712987ed6a83aa380a879af03d9988aa817e8","modified":1556456452943},{"_id":"public/tags/相对论/index.html","hash":"a237195bd6f0e9e27b2f5b04de86bfcf6ddfb75c","modified":1556456452943},{"_id":"public/tags/版本控制工具/index.html","hash":"b64365814ac036d0b08a320592f40ed555657020","modified":1556456452943},{"_id":"public/tags/编程/index.html","hash":"5ed3b8934b584efdf6bb33ae9baa129f53a4a58d","modified":1556456452944},{"_id":"public/tags/命令行/index.html","hash":"24f6bb82bc4579dc342c6ab393767e831f97e286","modified":1556456452943},{"_id":"public/2018/03/19/comprehensive article/技术相对论之软件架构/index.html","hash":"cc08abeb87bdd5d0a192ca2d43ac2e7686c95dba","modified":1556456452929},{"_id":"public/2018/03/02/design pattern/10分钟看懂动态代理设计模式/index.html","hash":"9208ccd122ac0d7c3538b971160046b7f75a2e7d","modified":1556456452934},{"_id":"public/2018/02/01/develop tools/关于Git，你真的学会了吗？/index.html","hash":"9252b38630559f67689c28a1845cee8788282d0d","modified":1556456452935},{"_id":"public/2018/02/06/kotlin/操作符重载及中缀调用/index.html","hash":"2dd820b3fe7b4b4504e3ea25c3d615172e1884b6","modified":1556456452935},{"_id":"public/2016/08/22/kotlin/delegation/index.html","hash":"55ae0f187cf932b8329082206e4ffa1b724d9018","modified":1556456452935},{"_id":"public/2018/01/02/bug fix/记一次印象深刻的Bug追踪过程/index.html","hash":"2612c1966e360be9725e6f51b101ecfaa8800630","modified":1556456452935},{"_id":"public/2018/01/26/kotlin/用Kotlin写Android-Gradle脚本/index.html","hash":"5a1bd0d726d385754780d4a17257fa204437914c","modified":1556456452935},{"_id":"public/index.html","hash":"5baaa8ea6af2e77f3952e5bb90f9cccfb65879d6","modified":1556456452936},{"_id":"public/page/2/index.html","hash":"4e90a35449f8737041bb1f4644881f01e9381ade","modified":1556456452936},{"_id":"public/CNAME","hash":"f596105aa927adc6d8c85b6eef21e4118cf3295f","modified":1556455868546},{"_id":"public/images/avatar.jpeg","hash":"3530af8f5dc6b24312ec4f1fbaffa5243f866e35","modified":1556455868547},{"_id":"public/uploads/wechat-qrcode.jpg","hash":"4941dd1c650bbd12ca690041359863bedd62d0f2","modified":1556455868547},{"_id":"public/dkWRJTPu3y.txt","hash":"40fb5ed4d6314a266cf4186d841d7bd2da0a83c9","modified":1556455868546},{"_id":"public/images/10fenjl.jpg","hash":"474fa9c55926606307b34a38bf9dc3c3275e1b47","modified":1556455868547},{"_id":"public/2019/01/12/写在十分简历发布前夕/10fenjl.jpg","hash":"474fa9c55926606307b34a38bf9dc3c3275e1b47","modified":1556455868547},{"_id":"public/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1556430432885},{"_id":"public/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1556430432885},{"_id":"public/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1556430432885},{"_id":"public/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1556430432885},{"_id":"public/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1556430432885},{"_id":"public/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1556430432885},{"_id":"public/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1556430432885},{"_id":"public/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1556430432885},{"_id":"public/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1556430433162},{"_id":"public/404.html","hash":"fe1497ac9b2d47f4e3e880946e22fbfe3db7496e","modified":1556430433168},{"_id":"public/css/404.css","hash":"e6c2652f6b52719924537491b5d8b8b6413b64c7","modified":1556430433168},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1556430433168},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1556430433169},{"_id":"public/js/ocean.js","hash":"3457be62843930ad58997cd6fd387783285242c7","modified":1556430433169},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1556430433169},{"_id":"public/css/style.css","hash":"6fd3065ac6a615be7809704b145bad6106847ff5","modified":1556456453185},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1556430433182},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1556430433182},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1556430433185},{"_id":"public/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1556430433188},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1556430433191},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1556430433192},{"_id":"public/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1556430433195},{"_id":"public/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1556430433212},{"_id":"public/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1556430433218},{"_id":"themes/ocean/.DS_Store","hash":"5fd73b7e37988b210b3dfd165c8a0820ed3b5623","modified":1556443303181},{"_id":"themes/ocean/source/images/.DS_Store","hash":"5b1c33f71d2c44cff5304f3889d96b653a91caa9","modified":1556432810592},{"_id":"themes/ocean/source/images/hexo.svg.bak","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1556428758063},{"_id":"themes/ocean/source/css/.DS_Store","hash":"04374072d7a567eede4c899f545e3cf4373257ca","modified":1556440083799},{"_id":"source/gallery/index.md","hash":"939214a1af1c7cfa1c5fe16415bc658802c0aef5","modified":1556443715547},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1556445855416},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1556445855416},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1556445855416},{"_id":"themes/icarus/_config.yml","hash":"bdb18021a936f0d278a54b9763bceca9c8cba444","modified":1556453691102},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1556445855436},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1556445855409},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1556445846791},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1556445855411},{"_id":"themes/icarus/.git/index","hash":"0d4f33d79124a0336c6adf1d13bf44916f81dbfb","modified":1556456365144},{"_id":"themes/icarus/.git/packed-refs","hash":"c4c51a674bb5bb3cea9abff2706b1c263581c521","modified":1556445855407},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1556445855415},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1556445855424},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1556445855424},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1556445855424},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1556445855424},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1556445855424},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1556445855425},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1556445855425},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1556445855425},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1556445855425},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1556445855425},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1556445855425},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1556445855426},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1556445855426},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1556445855426},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1556445855430},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1556445855430},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1556445855430},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1556445855432},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1556445855434},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1556445855434},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1556445855436},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1556445855424},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1556445846792},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1556445846791},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1556445846792},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1556445846793},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1556445846794},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1556445846792},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1556445846794},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1556445846791},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1556445846793},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1556445846793},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1556445846794},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1556445846790},{"_id":"themes/icarus/.git/logs/HEAD","hash":"1f675fbdc7b05934b826047fdf1b63a8e7da1a8d","modified":1556456364937},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1556445855416},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1556445855417},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1556445855417},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1556445855417},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1556445855417},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1556445855417},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1556445855418},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1556445855418},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1556445855418},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1556445855418},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1556445855418},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1556445855419},{"_id":"themes/icarus/includes/helpers/page.js","hash":"50dab1e4ecef55cd090625f91c5456b801e307f2","modified":1556445855419},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1556445855419},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1556445855420},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"4b84b08214cc21feaa4322357f0bec800bfca826","modified":1556445855420},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1556445855420},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1556445855420},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1556445855421},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1556445855421},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1556445855421},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1556445855421},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1556445855422},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1556445855422},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1556445855422},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1556445855422},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1556445855423},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1556445855423},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1556445855423},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1556445855423},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1556445855423},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1556445855426},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1556445855427},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1556445855427},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1556445855427},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1556445855427},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1556445855427},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1556445855427},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1556445855428},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1556445855428},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"dc91946bfe2c25507927cffc7f97fb445e839462","modified":1556445855428},{"_id":"themes/icarus/layout/common/head.ejs","hash":"12506ec5e7970eafdfde92c8d2ea44a40f1ba141","modified":1556445855428},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1556445855428},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1556445855429},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1556445855429},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1556445855429},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1556445855429},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1556445855429},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1556445855429},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1556445855430},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1556445855430},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1556445855431},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1556445855431},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1556445855431},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1556445855431},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1556445855431},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1556445855432},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1556445855432},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1556445855432},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1556445855432},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1556445855432},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1556445855433},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1556445855433},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1556445855433},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1556445855433},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1556445855433},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1556445855434},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1556445855434},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1556445855434},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1556445855434},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1556445855435},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1556445855435},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"af05fb29b2b4e221bc50f61c1a85bb1f8c6cab89","modified":1556445855435},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1556445855435},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1556445855435},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1556445855435},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1556445855435},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1556445855436},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1556445855436},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1556445855436},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1556445855437},{"_id":"themes/icarus/source/css/style.styl","hash":"8df581f6d748c7268b93c9f35549e757cd999bbd","modified":1556445855437},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1556445855437},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1556456364965},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1556456364966},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1556445855440},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1556445855438},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1556445855440},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1556445855440},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1556445855440},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1556445855440},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1556445855441},{"_id":"themes/icarus/source/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1556445855441},{"_id":"themes/icarus/.git/refs/heads/master","hash":"641c7bf5c5c0e5795ce34c7b45c439abc74e24d9","modified":1556445855409},{"_id":"themes/icarus/.git/objects/pack/pack-85c428d5d8a9f2a2713e74571fd6771d7a6a3577.idx","hash":"c29737e1cd2d7c6d133f37497c78a46ab398b8b1","modified":1556445855389},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"1f675fbdc7b05934b826047fdf1b63a8e7da1a8d","modified":1556456364938},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1556445855408},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"1f675fbdc7b05934b826047fdf1b63a8e7da1a8d","modified":1556456364936},{"_id":"themes/icarus/.git/objects/pack/pack-85c428d5d8a9f2a2713e74571fd6771d7a6a3577.pack","hash":"164bca978cf70ba258f7ea907cbd2bf4cba236a5","modified":1556445855387},{"_id":"themes/icarus/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1556446981781},{"_id":"public/content.json","hash":"15871ae8abf943db5c9b58db4aafd3383fdff073","modified":1556456452928},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1556456452953},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1556456452953},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1556456452953},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1556456452953},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1556456452955},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1556456452955},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1556456452955},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1556456452955},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1556456452955},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1556456452955},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1556456452955},{"_id":"public/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1556456452955},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1556456452955},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1556456453185},{"_id":"themes/icarus/.DS_Store","hash":"9a2471929892bf8cf1cd40de9bdbfba54330bb2d","modified":1556455864392},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1556456452953}],"Category":[{"name":"创业札记","_id":"cjv0ihr8p0005leb49i9bd3z0"},{"name":"关于欧阳锋","_id":"cjv0ihr99000fleb4le5airdh"},{"name":"随文杂记","_id":"cjv0ihr9j000oleb4w8btpvvs"},{"name":"IT小知识","_id":"cjv0ihr9m000wleb4txiov3kn"},{"name":"Kotlin","_id":"cjv0ihr9o0010leb45fhbscta"},{"name":"开源","_id":"cjv0ihr9s001hleb4w35y921q"},{"name":"基础知识","parent":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0ihr9s001jleb4e54wau6b"},{"name":"杂谈","parent":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0ihram002zleb4arviigsd"},{"name":"Bug Fix","_id":"cjv0ihraz003sleb4tnugjr7m"},{"name":"设计模式","_id":"cjv0ihrb8004bleb4svcvh37v"},{"name":"开发工具","_id":"cjv0ihrb9004dleb4vwppliim"},{"name":"Git","parent":"cjv0ihrb9004dleb4vwppliim","_id":"cjv0ihrb9004hleb4eurykdz2"}],"Data":[{"_id":"next","data":{"override":false,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"欧阳锋工作室, Android, Kotlin, iOS, Java, Linux","rss":false,"footer":{"since":2018,"icon":"user","copyright":"欧阳锋工作室 版权所有","powered":false,"theme":{"enable":false,"version":false},"custom_text":"Hosted by <a target=\"_blank\" href=\"https://pages.coding.me\">Coding Pages</a>"},"canonical":true,"seo":true,"index_with_subtitle":true,"menu":{"home":"/ || home","categories":"/categories/ || th","tags":"/tags/ || tags","archives":"/archives/ || archive","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Gemini","social":{"微博":"https://weibo.com/u/6140262139 || weibo","微信":"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg || wechat","GitHub":"https://github.com/yuanhoujun || github","邮箱":"mailto:ouyangfeng2016@gmail.com || envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":true},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpeg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":true,"scrollpercent":true,"onmobile":false},"scroll_to_more":true,"save_scroll":true,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechat_subscriber":{"enabled":true,"qcode":"/uploads/wechat-qrcode.jpg","description":"扫描二维码，关注欧阳锋工作室"},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":null},"highlight_theme":"night","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":"ouyangfeng","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"app_id":"AbkJGSF9And2uUvLixX27nTR-gzGzoHsz","app_key":"7KCYMEQsOEWCPNNqS923QDkM","notify":true,"verify":false,"placeholder":"有什么想告诉我的吗？","avatar":"mm","guest_info":"nick","pageSize":10},"livere_uid":"MTAyMC8zNDA1MS8xMDU4OQ==","gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":"yuanhoujun","github_repo":"for-blog-comments-only","client_id":"58a13e7625e419973224","client_secret":"97388e086792a2a7c55623e45ceaef4c7928ce42","proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":true,"postbottom":{"enable":true,"options":{"iconStyle":"default","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":false,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"AbkJGSF9And2uUvLixX27nTR-gzGzoHsz","app_key":"7KCYMEQsOEWCPNNqS923QDkM"},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1},"exturl":"fasle","note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":false,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}],"Page":[{"title":"关于欧阳锋工作室","author":"欧阳锋","date":"2018-02-07T09:37:31.000Z","type":"about","comments":0,"_content":"\n14年6月份，我只身一人来到深圳，只觉一瞬，时间已过去将近4年。\n\n4年的时间里，我见证了深圳速度。在一线城市里生活，你只有两个选择：要么奋斗，要么死亡！或许正是深圳的高压姿态锻造了我，4年的时间里，我始终保持高强度的学习状态。终于在自己的领域小有成就，我深知获取这些知识来之不易。也希望将自己的知识分享给大家。因此，在16年的时候我决定成立[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)。\n\n遗憾的是，因为工作的关系，工作室一直处于闲置状态。从今天起，我希望[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)可以伴随你度过生活中的每一天。\n\n未来，[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)将主要专注以下几个方面：\n\n* 高质量技术博客分享\n* 开源项目\n* 在线教育\n* 软件开发\n\n我相信，只要坚持做一件事情，就一定可以成功。我也相信，机会总是留给有准备的人。我还相信，只有苦过、折腾过、哭过的人生才算完美。\n\n奋斗的路上难免会形单影只，别怕孤单！我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。关注欧阳锋工作室，让[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)陪伴你一起成长！\n\n## 关注渠道\n* 微信公众号：[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)\n* 简书：[欧阳锋](https://www.jianshu.com/u/db019edd34b4)\n* 新浪微博：[欧阳锋工作室](https://weibo.com/6140262139/profile?topnav=1&wvr=6)\n* Github: [欧阳锋工作室](https://github.com/yuanhoujun)\n\n>我是欧阳锋，未来，我希望与你一起成长！","source":"about/index.md","raw":"---\ntitle: 关于欧阳锋工作室\nauthor: 欧阳锋\ndate: 2018-02-07 17:37:31\ntype: \"about\"\ncomments: false\n---\n\n14年6月份，我只身一人来到深圳，只觉一瞬，时间已过去将近4年。\n\n4年的时间里，我见证了深圳速度。在一线城市里生活，你只有两个选择：要么奋斗，要么死亡！或许正是深圳的高压姿态锻造了我，4年的时间里，我始终保持高强度的学习状态。终于在自己的领域小有成就，我深知获取这些知识来之不易。也希望将自己的知识分享给大家。因此，在16年的时候我决定成立[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)。\n\n遗憾的是，因为工作的关系，工作室一直处于闲置状态。从今天起，我希望[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)可以伴随你度过生活中的每一天。\n\n未来，[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)将主要专注以下几个方面：\n\n* 高质量技术博客分享\n* 开源项目\n* 在线教育\n* 软件开发\n\n我相信，只要坚持做一件事情，就一定可以成功。我也相信，机会总是留给有准备的人。我还相信，只有苦过、折腾过、哭过的人生才算完美。\n\n奋斗的路上难免会形单影只，别怕孤单！我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。关注欧阳锋工作室，让[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)陪伴你一起成长！\n\n## 关注渠道\n* 微信公众号：[欧阳锋工作室](https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg)\n* 简书：[欧阳锋](https://www.jianshu.com/u/db019edd34b4)\n* 新浪微博：[欧阳锋工作室](https://weibo.com/6140262139/profile?topnav=1&wvr=6)\n* Github: [欧阳锋工作室](https://github.com/yuanhoujun)\n\n>我是欧阳锋，未来，我希望与你一起成长！","updated":"2019-04-28T12:39:23.528Z","path":"about/index.html","layout":"page","_id":"cjv0x7ugx0036bkb4rid1k29c","content":"<p>14年6月份，我只身一人来到深圳，只觉一瞬，时间已过去将近4年。</p>\n<p>4年的时间里，我见证了深圳速度。在一线城市里生活，你只有两个选择：要么奋斗，要么死亡！或许正是深圳的高压姿态锻造了我，4年的时间里，我始终保持高强度的学习状态。终于在自己的领域小有成就，我深知获取这些知识来之不易。也希望将自己的知识分享给大家。因此，在16年的时候我决定成立<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>。</p>\n<p>遗憾的是，因为工作的关系，工作室一直处于闲置状态。从今天起，我希望<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>可以伴随你度过生活中的每一天。</p>\n<p>未来，<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>将主要专注以下几个方面：</p>\n<ul>\n<li>高质量技术博客分享</li>\n<li>开源项目</li>\n<li>在线教育</li>\n<li>软件开发</li>\n</ul>\n<p>我相信，只要坚持做一件事情，就一定可以成功。我也相信，机会总是留给有准备的人。我还相信，只有苦过、折腾过、哭过的人生才算完美。</p>\n<p>奋斗的路上难免会形单影只，别怕孤单！我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。关注欧阳锋工作室，让<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>陪伴你一起成长！</p>\n<h2 id=\"关注渠道\"><a href=\"#关注渠道\" class=\"headerlink\" title=\"关注渠道\"></a>关注渠道</h2><ul>\n<li>微信公众号：<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n<li>简书：<a href=\"https://www.jianshu.com/u/db019edd34b4\" target=\"_blank\" rel=\"noopener\">欧阳锋</a></li>\n<li>新浪微博：<a href=\"https://weibo.com/6140262139/profile?topnav=1&amp;wvr=6\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n<li>Github: <a href=\"https://github.com/yuanhoujun\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n</ul>\n<blockquote>\n<p>我是欧阳锋，未来，我希望与你一起成长！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>14年6月份，我只身一人来到深圳，只觉一瞬，时间已过去将近4年。</p>\n<p>4年的时间里，我见证了深圳速度。在一线城市里生活，你只有两个选择：要么奋斗，要么死亡！或许正是深圳的高压姿态锻造了我，4年的时间里，我始终保持高强度的学习状态。终于在自己的领域小有成就，我深知获取这些知识来之不易。也希望将自己的知识分享给大家。因此，在16年的时候我决定成立<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>。</p>\n<p>遗憾的是，因为工作的关系，工作室一直处于闲置状态。从今天起，我希望<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>可以伴随你度过生活中的每一天。</p>\n<p>未来，<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>将主要专注以下几个方面：</p>\n<ul>\n<li>高质量技术博客分享</li>\n<li>开源项目</li>\n<li>在线教育</li>\n<li>软件开发</li>\n</ul>\n<p>我相信，只要坚持做一件事情，就一定可以成功。我也相信，机会总是留给有准备的人。我还相信，只有苦过、折腾过、哭过的人生才算完美。</p>\n<p>奋斗的路上难免会形单影只，别怕孤单！我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。关注欧阳锋工作室，让<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a>陪伴你一起成长！</p>\n<h2 id=\"关注渠道\"><a href=\"#关注渠道\" class=\"headerlink\" title=\"关注渠道\"></a>关注渠道</h2><ul>\n<li>微信公众号：<a href=\"https://upload-images.jianshu.io/upload_images/703764-d8085a19fb8f5408.jpg\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n<li>简书：<a href=\"https://www.jianshu.com/u/db019edd34b4\" target=\"_blank\" rel=\"noopener\">欧阳锋</a></li>\n<li>新浪微博：<a href=\"https://weibo.com/6140262139/profile?topnav=1&amp;wvr=6\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n<li>Github: <a href=\"https://github.com/yuanhoujun\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></li>\n</ul>\n<blockquote>\n<p>我是欧阳锋，未来，我希望与你一起成长！</p>\n</blockquote>\n"},{"title":"所有分类","date":"2018-02-07T09:33:35.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: 所有分类\ndate: 2018-02-07 17:33:35\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2019-04-28T12:39:23.529Z","path":"categories/index.html","layout":"page","_id":"cjv0x7uh00037bkb49zztfq5s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有分类2","date":"2018-02-07T09:33:35.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/other.md","raw":"---\ntitle: 所有分类2\ndate: 2018-02-07 17:33:35\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2019-04-28T12:39:23.529Z","path":"categories/other.html","layout":"page","_id":"cjv0x7uh00038bkb453ldg8yy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有标签","date":"2018-02-07T09:32:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ndate: 2018-02-07 17:32:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-28T12:39:23.531Z","path":"tags/index.html","_id":"cjv0x7uhf003ebkb4badjcr04","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"写在十分简历发布前夕","date":"2019-01-12T10:52:00.000Z","comments":1,"_content":"\n### 关于十分简历\n十分简历是我们的第一个作品，这是一个微信小程序，用于生成漂亮的简历模板。\n\n同时，考虑到用户的隐私问题，增加了私密简历功能。\n\n那么，到底什么是私密简历呢？\n<!-- more -->\n在传统的简历投递中，通常HR会将我们的简历打印下来，面试完成后，会留下面试者的简历。这在一定程度上可能造成用户的私密信息泄露。私密简历希望可以解决这个问题！\n\n相对传统的纸质简历，私密简历会生成一个专属于你的个人简历链接。通过这个私密简历链接，HR可以实时查看你的简历。你可以在小程序中设置一个简历过期时间，到达过期时间后简历会自动回收。为了进一步防止其他人查看你的简历，你还可以设置专属于当前私密简历的阅读密码。\n\n与此同时，你还可以通过小程序随时开启或关闭当前私密简历。关闭后，将不再允许任何人查看当前私密简历，直到再次打开。\n\n事实上，我最感兴趣的部分，恰好就是私密简历的开发。因为，确实存在一些公司的面试官会将用户的纸质简历随地丢弃，这就造成大概率简历内容泄密问题。\n\n不过，肯定有人会说，现在的HR通常都会要求打印纸质简历，又有什么办法呢？所有的进步当然不是一时间可以改进的，也许未来这样的情况会随着这类产品的普及开始变得不一样。我坚信，传统的纸质简历终究被遗弃。\n\n十分简历的点子来自于之前团队的一个小伙伴，当时，公司刚刚成立，我希望用一个小而精的产品宣告公司的诞生，同时展示团队强大的开发实力。\n\n因此，公司成立后的第一件事情，就是号召大家天马行空，思考第一个连接公司与世界的产品。最后发现，这个简历产品的思路有点意思，而且也不至于太过于复杂。于是，这个产品就成为了我们连接世界的第一个作品。\n\n确立了产品原型之后，真正的挑战开始了！\n\n### 挑战一：后端开发\n后端开发是我们面临的第一个挑战。事实上，我的第一份工作就是后端开发，并且进行了将近一年的时间，确实有一定的积累，但这并不能给我带来很大的帮助。因为，时间已经过去了差不多5年。此后的4年时间里，我一直从事移动平台软件开发。关于后端的知识点，大抵忘记了，现在捡起来，难度不少！\n\n而且，时间过去了这么久，之前的技术也慢慢地被淘汰了。为此，我决定重新开始！\n\n**第一步：确定技术选型**\n\n这一步我选择了相对麻烦、但已经实践成熟的解决方案：\n\n* Web框架：Spring Boot + Apache Shiro \n* 数据库框架：MyBatis\n* 服务注册与发现：Eureka Server\n* 路由网关：Zuul1\n* 编程语言：Kotlin\n\n**第二步：解决路由网关难题**\n\n在路由网关的技术选型上，最终确立了使用Zuul1作为路由网关框架。实际上，还有一个更好的选择是Spring Cloud Gateway。但使用Spring网关需要结合更多的新知识去做，而且还需要自己去处理数据库的事务问题，的确会带来不少的麻烦。加上在当时考察的文章中，发现Spring的网关性能并不能带来本质上的提升。因此，最终确立了以Zuul作为后端的路由网关框架。\n\n在确定了技术框架之后，第一个需要的解决的问题就是，如何通过一个字段标识路由到不同的服务层逻辑。例如：通过版本号路由到不同的逻辑服务层，避免版本之间相互干扰等等。遗憾的是，Zuul的路由处理是静态配置的，这就需要对Zuul进行扩展，建立一个可以进行动态路由配置的网关框架。\n\n在这一部分问题的处理上，从最开始的设计到最终整个后端框架定型，差不多花掉了半个月左右的时间。一方面要考虑动态配置，另一方面需要考虑到网关的性能问题。通过不断地尝试，查资料，总算解决了这个问题。这个问题的难度，在这次整个产品开发过程中排名第一。\n\n**第三步：整合安全框架**\n\n这里的安全架构不仅仅指的是数据加密。当然，因为未来会涉及到付费交易，毫无疑问，我们的数据是进行过加密处理的。但这里，我要说的是，Java安全框架的接入问题。\n\n考虑到未来开发的便利性，我希望用一个安全框架帮助接管用户权限控制、分配等问题。为此，首选的当然是Spring Security。但实际试用下来，发现Spring Security设计的过于复杂，可用性不高。并且，灵活性也受到了限制，不得不另辟蹊径。最终确定了使用Apache Shiro作为平台的安全框架。\n\nApache Shiro从一定程度上规避了Spring Security的不少问题，从一开始阅读文档就能感受到其简洁的设计。Apache Shiro的接入相对Spring Security就简单了许多，而且可定制性也提升了不少。最终，安全框架接入顺利完成。\n\n**第四步：搞定逻辑层编码**\n\n实际上，我在早年从事Java后端开发的时候，我们还使用的是SSH（Spring, Struts2, Hibernate）的组合。而现在Struts已经慢慢地被淘汰了，取而代之的是Spring MVC + MyBatis + Spring。同时，为了进一步降低Java Web开发的难度，Spring官方推出了Spring Boot。相对传统的Java Web开发，Spring Boot几乎可以脱离配置文件，使用注解完成所有配置，亲和力提升不少。 因此，我最终选择了使用Spring Boot来构建我们的Web应用。但所有的这些对于我而言都是全新的知识点，不得不从重新学习，好在之前的基础还算比较扎实，上手很快。\n\n### 挑战二：小程序开发\n搞定了后端开发的难题，第二个挑战接踵而至：小程序开发。\n\n团队成员中几乎都没有小程序开发的工作经验。实际上，团队成员中有一位同学有一定的小程序开发经验。但事实证明，这位同学的开发经验依然非常浅，并不足以支撑整个小程序的开发。为此，我决定亲自学习小程序，帮助大家完成小程序端的架构。制定小程序开发规范。\n\n小程序的开发难度相对较低，但也踩了不少坑，关于这一部分的经历，我会用另外一篇文章记录下来。\n\n小程序开发过程中，最大的问题来自团队成员，其中一个小伙伴是兼职参与开发。由于学习知识较慢， 同时对自己自信心不够。加上生活的一些琐事，即使分配了足够简单的任务也未能顺利完成，这就导致了整个研发过程被拉长。\n\n最后，在Release的版本库中，我惊奇地发现，我最终参与了70%以上的小程序代码开发。看到这种场景，心中五味杂陈，这显然不是一个良性循环。\n\n这也让下定决心，从明年开始，租写字楼，正式招人办公。兼职员工将由全职员工带队进行工作安排，处理。并适当给予兼职员工一定的资金鼓励。\n\n### 挑战三：Web前端开发\nWeb前端开发在这次开发的难度排行榜中可以排名第二。团队成员中，几乎没有一个人拥有前端开发工作经验。其中一个同学做过极少一段时间的前端开发，因此，我让他牵头开发了第一个模板。\n\n但在第一个模板的开发过程中，也是不断地磕磕绊绊，走了不少弯路。那一段时间，是整个开发阶段最艰苦的时段，我跟这位同学每天从早上忙到晚上12点。持续了连续10天左右，没有周末，没有午休。好在终于顺利完成了第一个模板的开发。\n\n模板开发完成后，整个产品的基础形态第一次呈现在了大家的面前。前期由于时间过于紧张，在我们的产品原型中，并没有一个充分的流程可以展示完整。以至于兼职参与开发的同学们在理解产品的设计上出现了不少问题。这种理解上的问题后来也让我头疼不已，这也是这次开发过程中获得的宝贵教训之一。\n\n关于Web前端的技术选型，也走了一些弯路。最开始，我考虑使用Vue + TS的组合作为前端开发。最终架构完成后却发现，这个组合对于前端开发的难度提升了不少。这在很大程度上会拖延项目的开发进度。因此，马上放弃了这个组合。转而使用大家比较容易掌握的jQuery。事实上，模板页作为我们的单页应用，使用jQuery已经完全足够了。\n\n确定了技术选型之后，依然出现了一些问题。由于第一位同学开发的比较匆忙，没有形成一定的规范。导致第二位同学接力的时候出现了一头雾水的情况。因此，第二位同学不得不重新去学习Webpack，重新去设计自己的代码架构，这在一定程度上也拖慢了整个开发进度。\n\n事实上，在整个开发进程中，Web前端的开发比重确实占据了不少。这个挑战的难度在本次开发过程中应该可以排名第二。\n\n### 第一阶段总结\n在整个十分简历的开发过程，就像在做一次冒险，所有的知识对于我们来说，都是陌生的。我们需要从0开始学习，恰好是这种从0开始学习的勇气让我更加自信我可以搞定任何事情，不会再惧怕第一次。同时，我也坚信，这一次难忘的开发经历，会让团队中坚持到最后的同学都有了一往无前、无所畏惧的勇气。\n\n这是一次十分难忘的开发经历，也是我们第一次勇敢地探索未知的世界，最终克服了重重困难，将十分简历带到了大家的面前。\n\n这不是结束，这恰好是我们故事的开头！\n\n最后，感谢所有参与十分简历开发的同学们，为自己鼓个掌吧！你们所经历的，不仅仅是开发了一个产品，而是克服了内心对于未知事物的恐惧，敢于踏出第一步。这种收获，必将让你们终身受益！\n\n# 后记\n### 送给中途离开十分简历开发的同学们\n在十分简历的开发过程中，有两位同学中途离开了开发团队。第一位同学是因为同时在开发另外一个产品，时间有限，不能同时兼顾两个产品开发，最终选择了另外一个产品的开发。这是完全可以理解的，这是个人选择问题，也是眼界问题。这样的同学，在后续团队扩展中，将不会再次接收。因为，有了第一次这样的选择，就会有下一次。这样的同学不能稳定产出，稳定投入，会因为种种问题摇摆不定。\n\n另外一位同学，因为受不了我的严厉性格，在中途选择了离开。这当然更加容易理解，这样的的离开于我而言，几乎是完全无感的。相反，如果一位同学在开发中投入了很多，对团队的奉献很大。突然选择了离开，对我的打击反而会比较大。而类似这位同学这样的一个原因，选择离开。对于我，反而会感觉到欣慰，因为即使这样的同学留下来，也并不能跟我走到最后。他的抗压能力，以及他的意志力决定他不能走的很远。创业的路就像攀登珠峰一样，随时都有掉下去摔死的风险。你也许感觉不到你要摔死，我不得不用最严厉的语气骂醒你，你在“爬山”，你不应该睡觉！但类似这样的同学，在后续开发中，作为员工可以再次接收，因为他至少符合稳定产出的条件，只是意志力会薄弱一些，这个可以慢慢改善。\n\n\n所有两位同学的离开，都是非常恰当的时机，在团队初期选择离开也是对于团队小伙伴最大的尊重。请离开的同学放心，我对大家不会有任何的责备，我非常开心大家可以在初期就选择离开了团队，这很重要。就像进行一场计划好的旅行，在旅行前10天就有人中途离场，这其实很好。我们还可以重新组织同学加入到这场旅行中来，这是一件好事，我要感谢大家。同时，大家的离开也有利于筛选更优秀的员工。当然，也希望离开的两位同学工作顺利，一切顺风顺水。\n\n### 微信扫描下方二维码体验小程序\n![十分简历](10fenjl.jpg)\n\n-----\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/写在十分简历发布前夕.md","raw":"title: 写在十分简历发布前夕\ndate: 2019/01/12 18:52\ncomments: true\ntags:\n- 创业\n- 深圳一行代码科技有限公司\n- 十分简历\ncategories:\n- 创业札记\n---\n\n### 关于十分简历\n十分简历是我们的第一个作品，这是一个微信小程序，用于生成漂亮的简历模板。\n\n同时，考虑到用户的隐私问题，增加了私密简历功能。\n\n那么，到底什么是私密简历呢？\n<!-- more -->\n在传统的简历投递中，通常HR会将我们的简历打印下来，面试完成后，会留下面试者的简历。这在一定程度上可能造成用户的私密信息泄露。私密简历希望可以解决这个问题！\n\n相对传统的纸质简历，私密简历会生成一个专属于你的个人简历链接。通过这个私密简历链接，HR可以实时查看你的简历。你可以在小程序中设置一个简历过期时间，到达过期时间后简历会自动回收。为了进一步防止其他人查看你的简历，你还可以设置专属于当前私密简历的阅读密码。\n\n与此同时，你还可以通过小程序随时开启或关闭当前私密简历。关闭后，将不再允许任何人查看当前私密简历，直到再次打开。\n\n事实上，我最感兴趣的部分，恰好就是私密简历的开发。因为，确实存在一些公司的面试官会将用户的纸质简历随地丢弃，这就造成大概率简历内容泄密问题。\n\n不过，肯定有人会说，现在的HR通常都会要求打印纸质简历，又有什么办法呢？所有的进步当然不是一时间可以改进的，也许未来这样的情况会随着这类产品的普及开始变得不一样。我坚信，传统的纸质简历终究被遗弃。\n\n十分简历的点子来自于之前团队的一个小伙伴，当时，公司刚刚成立，我希望用一个小而精的产品宣告公司的诞生，同时展示团队强大的开发实力。\n\n因此，公司成立后的第一件事情，就是号召大家天马行空，思考第一个连接公司与世界的产品。最后发现，这个简历产品的思路有点意思，而且也不至于太过于复杂。于是，这个产品就成为了我们连接世界的第一个作品。\n\n确立了产品原型之后，真正的挑战开始了！\n\n### 挑战一：后端开发\n后端开发是我们面临的第一个挑战。事实上，我的第一份工作就是后端开发，并且进行了将近一年的时间，确实有一定的积累，但这并不能给我带来很大的帮助。因为，时间已经过去了差不多5年。此后的4年时间里，我一直从事移动平台软件开发。关于后端的知识点，大抵忘记了，现在捡起来，难度不少！\n\n而且，时间过去了这么久，之前的技术也慢慢地被淘汰了。为此，我决定重新开始！\n\n**第一步：确定技术选型**\n\n这一步我选择了相对麻烦、但已经实践成熟的解决方案：\n\n* Web框架：Spring Boot + Apache Shiro \n* 数据库框架：MyBatis\n* 服务注册与发现：Eureka Server\n* 路由网关：Zuul1\n* 编程语言：Kotlin\n\n**第二步：解决路由网关难题**\n\n在路由网关的技术选型上，最终确立了使用Zuul1作为路由网关框架。实际上，还有一个更好的选择是Spring Cloud Gateway。但使用Spring网关需要结合更多的新知识去做，而且还需要自己去处理数据库的事务问题，的确会带来不少的麻烦。加上在当时考察的文章中，发现Spring的网关性能并不能带来本质上的提升。因此，最终确立了以Zuul作为后端的路由网关框架。\n\n在确定了技术框架之后，第一个需要的解决的问题就是，如何通过一个字段标识路由到不同的服务层逻辑。例如：通过版本号路由到不同的逻辑服务层，避免版本之间相互干扰等等。遗憾的是，Zuul的路由处理是静态配置的，这就需要对Zuul进行扩展，建立一个可以进行动态路由配置的网关框架。\n\n在这一部分问题的处理上，从最开始的设计到最终整个后端框架定型，差不多花掉了半个月左右的时间。一方面要考虑动态配置，另一方面需要考虑到网关的性能问题。通过不断地尝试，查资料，总算解决了这个问题。这个问题的难度，在这次整个产品开发过程中排名第一。\n\n**第三步：整合安全框架**\n\n这里的安全架构不仅仅指的是数据加密。当然，因为未来会涉及到付费交易，毫无疑问，我们的数据是进行过加密处理的。但这里，我要说的是，Java安全框架的接入问题。\n\n考虑到未来开发的便利性，我希望用一个安全框架帮助接管用户权限控制、分配等问题。为此，首选的当然是Spring Security。但实际试用下来，发现Spring Security设计的过于复杂，可用性不高。并且，灵活性也受到了限制，不得不另辟蹊径。最终确定了使用Apache Shiro作为平台的安全框架。\n\nApache Shiro从一定程度上规避了Spring Security的不少问题，从一开始阅读文档就能感受到其简洁的设计。Apache Shiro的接入相对Spring Security就简单了许多，而且可定制性也提升了不少。最终，安全框架接入顺利完成。\n\n**第四步：搞定逻辑层编码**\n\n实际上，我在早年从事Java后端开发的时候，我们还使用的是SSH（Spring, Struts2, Hibernate）的组合。而现在Struts已经慢慢地被淘汰了，取而代之的是Spring MVC + MyBatis + Spring。同时，为了进一步降低Java Web开发的难度，Spring官方推出了Spring Boot。相对传统的Java Web开发，Spring Boot几乎可以脱离配置文件，使用注解完成所有配置，亲和力提升不少。 因此，我最终选择了使用Spring Boot来构建我们的Web应用。但所有的这些对于我而言都是全新的知识点，不得不从重新学习，好在之前的基础还算比较扎实，上手很快。\n\n### 挑战二：小程序开发\n搞定了后端开发的难题，第二个挑战接踵而至：小程序开发。\n\n团队成员中几乎都没有小程序开发的工作经验。实际上，团队成员中有一位同学有一定的小程序开发经验。但事实证明，这位同学的开发经验依然非常浅，并不足以支撑整个小程序的开发。为此，我决定亲自学习小程序，帮助大家完成小程序端的架构。制定小程序开发规范。\n\n小程序的开发难度相对较低，但也踩了不少坑，关于这一部分的经历，我会用另外一篇文章记录下来。\n\n小程序开发过程中，最大的问题来自团队成员，其中一个小伙伴是兼职参与开发。由于学习知识较慢， 同时对自己自信心不够。加上生活的一些琐事，即使分配了足够简单的任务也未能顺利完成，这就导致了整个研发过程被拉长。\n\n最后，在Release的版本库中，我惊奇地发现，我最终参与了70%以上的小程序代码开发。看到这种场景，心中五味杂陈，这显然不是一个良性循环。\n\n这也让下定决心，从明年开始，租写字楼，正式招人办公。兼职员工将由全职员工带队进行工作安排，处理。并适当给予兼职员工一定的资金鼓励。\n\n### 挑战三：Web前端开发\nWeb前端开发在这次开发的难度排行榜中可以排名第二。团队成员中，几乎没有一个人拥有前端开发工作经验。其中一个同学做过极少一段时间的前端开发，因此，我让他牵头开发了第一个模板。\n\n但在第一个模板的开发过程中，也是不断地磕磕绊绊，走了不少弯路。那一段时间，是整个开发阶段最艰苦的时段，我跟这位同学每天从早上忙到晚上12点。持续了连续10天左右，没有周末，没有午休。好在终于顺利完成了第一个模板的开发。\n\n模板开发完成后，整个产品的基础形态第一次呈现在了大家的面前。前期由于时间过于紧张，在我们的产品原型中，并没有一个充分的流程可以展示完整。以至于兼职参与开发的同学们在理解产品的设计上出现了不少问题。这种理解上的问题后来也让我头疼不已，这也是这次开发过程中获得的宝贵教训之一。\n\n关于Web前端的技术选型，也走了一些弯路。最开始，我考虑使用Vue + TS的组合作为前端开发。最终架构完成后却发现，这个组合对于前端开发的难度提升了不少。这在很大程度上会拖延项目的开发进度。因此，马上放弃了这个组合。转而使用大家比较容易掌握的jQuery。事实上，模板页作为我们的单页应用，使用jQuery已经完全足够了。\n\n确定了技术选型之后，依然出现了一些问题。由于第一位同学开发的比较匆忙，没有形成一定的规范。导致第二位同学接力的时候出现了一头雾水的情况。因此，第二位同学不得不重新去学习Webpack，重新去设计自己的代码架构，这在一定程度上也拖慢了整个开发进度。\n\n事实上，在整个开发进程中，Web前端的开发比重确实占据了不少。这个挑战的难度在本次开发过程中应该可以排名第二。\n\n### 第一阶段总结\n在整个十分简历的开发过程，就像在做一次冒险，所有的知识对于我们来说，都是陌生的。我们需要从0开始学习，恰好是这种从0开始学习的勇气让我更加自信我可以搞定任何事情，不会再惧怕第一次。同时，我也坚信，这一次难忘的开发经历，会让团队中坚持到最后的同学都有了一往无前、无所畏惧的勇气。\n\n这是一次十分难忘的开发经历，也是我们第一次勇敢地探索未知的世界，最终克服了重重困难，将十分简历带到了大家的面前。\n\n这不是结束，这恰好是我们故事的开头！\n\n最后，感谢所有参与十分简历开发的同学们，为自己鼓个掌吧！你们所经历的，不仅仅是开发了一个产品，而是克服了内心对于未知事物的恐惧，敢于踏出第一步。这种收获，必将让你们终身受益！\n\n# 后记\n### 送给中途离开十分简历开发的同学们\n在十分简历的开发过程中，有两位同学中途离开了开发团队。第一位同学是因为同时在开发另外一个产品，时间有限，不能同时兼顾两个产品开发，最终选择了另外一个产品的开发。这是完全可以理解的，这是个人选择问题，也是眼界问题。这样的同学，在后续团队扩展中，将不会再次接收。因为，有了第一次这样的选择，就会有下一次。这样的同学不能稳定产出，稳定投入，会因为种种问题摇摆不定。\n\n另外一位同学，因为受不了我的严厉性格，在中途选择了离开。这当然更加容易理解，这样的的离开于我而言，几乎是完全无感的。相反，如果一位同学在开发中投入了很多，对团队的奉献很大。突然选择了离开，对我的打击反而会比较大。而类似这位同学这样的一个原因，选择离开。对于我，反而会感觉到欣慰，因为即使这样的同学留下来，也并不能跟我走到最后。他的抗压能力，以及他的意志力决定他不能走的很远。创业的路就像攀登珠峰一样，随时都有掉下去摔死的风险。你也许感觉不到你要摔死，我不得不用最严厉的语气骂醒你，你在“爬山”，你不应该睡觉！但类似这样的同学，在后续开发中，作为员工可以再次接收，因为他至少符合稳定产出的条件，只是意志力会薄弱一些，这个可以慢慢改善。\n\n\n所有两位同学的离开，都是非常恰当的时机，在团队初期选择离开也是对于团队小伙伴最大的尊重。请离开的同学放心，我对大家不会有任何的责备，我非常开心大家可以在初期就选择离开了团队，这很重要。就像进行一场计划好的旅行，在旅行前10天就有人中途离场，这其实很好。我们还可以重新组织同学加入到这场旅行中来，这是一件好事，我要感谢大家。同时，大家的离开也有利于筛选更优秀的员工。当然，也希望离开的两位同学工作顺利，一切顺风顺水。\n\n### 微信扫描下方二维码体验小程序\n![十分简历](10fenjl.jpg)\n\n-----\n\n\n\n\n\n\n\n\n\n\n","slug":"写在十分简历发布前夕","published":1,"updated":"2019-04-28T12:39:23.528Z","layout":"post","photos":[],"link":"","_id":"cjv0x7uh30039bkb4dwzmqzgo","content":"<h3 id=\"关于十分简历\"><a href=\"#关于十分简历\" class=\"headerlink\" title=\"关于十分简历\"></a>关于十分简历</h3><p>十分简历是我们的第一个作品，这是一个微信小程序，用于生成漂亮的简历模板。</p>\n<p>同时，考虑到用户的隐私问题，增加了私密简历功能。</p>\n<p>那么，到底什么是私密简历呢？<br><a id=\"more\"></a><br>在传统的简历投递中，通常HR会将我们的简历打印下来，面试完成后，会留下面试者的简历。这在一定程度上可能造成用户的私密信息泄露。私密简历希望可以解决这个问题！</p>\n<p>相对传统的纸质简历，私密简历会生成一个专属于你的个人简历链接。通过这个私密简历链接，HR可以实时查看你的简历。你可以在小程序中设置一个简历过期时间，到达过期时间后简历会自动回收。为了进一步防止其他人查看你的简历，你还可以设置专属于当前私密简历的阅读密码。</p>\n<p>与此同时，你还可以通过小程序随时开启或关闭当前私密简历。关闭后，将不再允许任何人查看当前私密简历，直到再次打开。</p>\n<p>事实上，我最感兴趣的部分，恰好就是私密简历的开发。因为，确实存在一些公司的面试官会将用户的纸质简历随地丢弃，这就造成大概率简历内容泄密问题。</p>\n<p>不过，肯定有人会说，现在的HR通常都会要求打印纸质简历，又有什么办法呢？所有的进步当然不是一时间可以改进的，也许未来这样的情况会随着这类产品的普及开始变得不一样。我坚信，传统的纸质简历终究被遗弃。</p>\n<p>十分简历的点子来自于之前团队的一个小伙伴，当时，公司刚刚成立，我希望用一个小而精的产品宣告公司的诞生，同时展示团队强大的开发实力。</p>\n<p>因此，公司成立后的第一件事情，就是号召大家天马行空，思考第一个连接公司与世界的产品。最后发现，这个简历产品的思路有点意思，而且也不至于太过于复杂。于是，这个产品就成为了我们连接世界的第一个作品。</p>\n<p>确立了产品原型之后，真正的挑战开始了！</p>\n<h3 id=\"挑战一：后端开发\"><a href=\"#挑战一：后端开发\" class=\"headerlink\" title=\"挑战一：后端开发\"></a>挑战一：后端开发</h3><p>后端开发是我们面临的第一个挑战。事实上，我的第一份工作就是后端开发，并且进行了将近一年的时间，确实有一定的积累，但这并不能给我带来很大的帮助。因为，时间已经过去了差不多5年。此后的4年时间里，我一直从事移动平台软件开发。关于后端的知识点，大抵忘记了，现在捡起来，难度不少！</p>\n<p>而且，时间过去了这么久，之前的技术也慢慢地被淘汰了。为此，我决定重新开始！</p>\n<p><strong>第一步：确定技术选型</strong></p>\n<p>这一步我选择了相对麻烦、但已经实践成熟的解决方案：</p>\n<ul>\n<li>Web框架：Spring Boot + Apache Shiro </li>\n<li>数据库框架：MyBatis</li>\n<li>服务注册与发现：Eureka Server</li>\n<li>路由网关：Zuul1</li>\n<li>编程语言：Kotlin</li>\n</ul>\n<p><strong>第二步：解决路由网关难题</strong></p>\n<p>在路由网关的技术选型上，最终确立了使用Zuul1作为路由网关框架。实际上，还有一个更好的选择是Spring Cloud Gateway。但使用Spring网关需要结合更多的新知识去做，而且还需要自己去处理数据库的事务问题，的确会带来不少的麻烦。加上在当时考察的文章中，发现Spring的网关性能并不能带来本质上的提升。因此，最终确立了以Zuul作为后端的路由网关框架。</p>\n<p>在确定了技术框架之后，第一个需要的解决的问题就是，如何通过一个字段标识路由到不同的服务层逻辑。例如：通过版本号路由到不同的逻辑服务层，避免版本之间相互干扰等等。遗憾的是，Zuul的路由处理是静态配置的，这就需要对Zuul进行扩展，建立一个可以进行动态路由配置的网关框架。</p>\n<p>在这一部分问题的处理上，从最开始的设计到最终整个后端框架定型，差不多花掉了半个月左右的时间。一方面要考虑动态配置，另一方面需要考虑到网关的性能问题。通过不断地尝试，查资料，总算解决了这个问题。这个问题的难度，在这次整个产品开发过程中排名第一。</p>\n<p><strong>第三步：整合安全框架</strong></p>\n<p>这里的安全架构不仅仅指的是数据加密。当然，因为未来会涉及到付费交易，毫无疑问，我们的数据是进行过加密处理的。但这里，我要说的是，Java安全框架的接入问题。</p>\n<p>考虑到未来开发的便利性，我希望用一个安全框架帮助接管用户权限控制、分配等问题。为此，首选的当然是Spring Security。但实际试用下来，发现Spring Security设计的过于复杂，可用性不高。并且，灵活性也受到了限制，不得不另辟蹊径。最终确定了使用Apache Shiro作为平台的安全框架。</p>\n<p>Apache Shiro从一定程度上规避了Spring Security的不少问题，从一开始阅读文档就能感受到其简洁的设计。Apache Shiro的接入相对Spring Security就简单了许多，而且可定制性也提升了不少。最终，安全框架接入顺利完成。</p>\n<p><strong>第四步：搞定逻辑层编码</strong></p>\n<p>实际上，我在早年从事Java后端开发的时候，我们还使用的是SSH（Spring, Struts2, Hibernate）的组合。而现在Struts已经慢慢地被淘汰了，取而代之的是Spring MVC + MyBatis + Spring。同时，为了进一步降低Java Web开发的难度，Spring官方推出了Spring Boot。相对传统的Java Web开发，Spring Boot几乎可以脱离配置文件，使用注解完成所有配置，亲和力提升不少。 因此，我最终选择了使用Spring Boot来构建我们的Web应用。但所有的这些对于我而言都是全新的知识点，不得不从重新学习，好在之前的基础还算比较扎实，上手很快。</p>\n<h3 id=\"挑战二：小程序开发\"><a href=\"#挑战二：小程序开发\" class=\"headerlink\" title=\"挑战二：小程序开发\"></a>挑战二：小程序开发</h3><p>搞定了后端开发的难题，第二个挑战接踵而至：小程序开发。</p>\n<p>团队成员中几乎都没有小程序开发的工作经验。实际上，团队成员中有一位同学有一定的小程序开发经验。但事实证明，这位同学的开发经验依然非常浅，并不足以支撑整个小程序的开发。为此，我决定亲自学习小程序，帮助大家完成小程序端的架构。制定小程序开发规范。</p>\n<p>小程序的开发难度相对较低，但也踩了不少坑，关于这一部分的经历，我会用另外一篇文章记录下来。</p>\n<p>小程序开发过程中，最大的问题来自团队成员，其中一个小伙伴是兼职参与开发。由于学习知识较慢， 同时对自己自信心不够。加上生活的一些琐事，即使分配了足够简单的任务也未能顺利完成，这就导致了整个研发过程被拉长。</p>\n<p>最后，在Release的版本库中，我惊奇地发现，我最终参与了70%以上的小程序代码开发。看到这种场景，心中五味杂陈，这显然不是一个良性循环。</p>\n<p>这也让下定决心，从明年开始，租写字楼，正式招人办公。兼职员工将由全职员工带队进行工作安排，处理。并适当给予兼职员工一定的资金鼓励。</p>\n<h3 id=\"挑战三：Web前端开发\"><a href=\"#挑战三：Web前端开发\" class=\"headerlink\" title=\"挑战三：Web前端开发\"></a>挑战三：Web前端开发</h3><p>Web前端开发在这次开发的难度排行榜中可以排名第二。团队成员中，几乎没有一个人拥有前端开发工作经验。其中一个同学做过极少一段时间的前端开发，因此，我让他牵头开发了第一个模板。</p>\n<p>但在第一个模板的开发过程中，也是不断地磕磕绊绊，走了不少弯路。那一段时间，是整个开发阶段最艰苦的时段，我跟这位同学每天从早上忙到晚上12点。持续了连续10天左右，没有周末，没有午休。好在终于顺利完成了第一个模板的开发。</p>\n<p>模板开发完成后，整个产品的基础形态第一次呈现在了大家的面前。前期由于时间过于紧张，在我们的产品原型中，并没有一个充分的流程可以展示完整。以至于兼职参与开发的同学们在理解产品的设计上出现了不少问题。这种理解上的问题后来也让我头疼不已，这也是这次开发过程中获得的宝贵教训之一。</p>\n<p>关于Web前端的技术选型，也走了一些弯路。最开始，我考虑使用Vue + TS的组合作为前端开发。最终架构完成后却发现，这个组合对于前端开发的难度提升了不少。这在很大程度上会拖延项目的开发进度。因此，马上放弃了这个组合。转而使用大家比较容易掌握的jQuery。事实上，模板页作为我们的单页应用，使用jQuery已经完全足够了。</p>\n<p>确定了技术选型之后，依然出现了一些问题。由于第一位同学开发的比较匆忙，没有形成一定的规范。导致第二位同学接力的时候出现了一头雾水的情况。因此，第二位同学不得不重新去学习Webpack，重新去设计自己的代码架构，这在一定程度上也拖慢了整个开发进度。</p>\n<p>事实上，在整个开发进程中，Web前端的开发比重确实占据了不少。这个挑战的难度在本次开发过程中应该可以排名第二。</p>\n<h3 id=\"第一阶段总结\"><a href=\"#第一阶段总结\" class=\"headerlink\" title=\"第一阶段总结\"></a>第一阶段总结</h3><p>在整个十分简历的开发过程，就像在做一次冒险，所有的知识对于我们来说，都是陌生的。我们需要从0开始学习，恰好是这种从0开始学习的勇气让我更加自信我可以搞定任何事情，不会再惧怕第一次。同时，我也坚信，这一次难忘的开发经历，会让团队中坚持到最后的同学都有了一往无前、无所畏惧的勇气。</p>\n<p>这是一次十分难忘的开发经历，也是我们第一次勇敢地探索未知的世界，最终克服了重重困难，将十分简历带到了大家的面前。</p>\n<p>这不是结束，这恰好是我们故事的开头！</p>\n<p>最后，感谢所有参与十分简历开发的同学们，为自己鼓个掌吧！你们所经历的，不仅仅是开发了一个产品，而是克服了内心对于未知事物的恐惧，敢于踏出第一步。这种收获，必将让你们终身受益！</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><h3 id=\"送给中途离开十分简历开发的同学们\"><a href=\"#送给中途离开十分简历开发的同学们\" class=\"headerlink\" title=\"送给中途离开十分简历开发的同学们\"></a>送给中途离开十分简历开发的同学们</h3><p>在十分简历的开发过程中，有两位同学中途离开了开发团队。第一位同学是因为同时在开发另外一个产品，时间有限，不能同时兼顾两个产品开发，最终选择了另外一个产品的开发。这是完全可以理解的，这是个人选择问题，也是眼界问题。这样的同学，在后续团队扩展中，将不会再次接收。因为，有了第一次这样的选择，就会有下一次。这样的同学不能稳定产出，稳定投入，会因为种种问题摇摆不定。</p>\n<p>另外一位同学，因为受不了我的严厉性格，在中途选择了离开。这当然更加容易理解，这样的的离开于我而言，几乎是完全无感的。相反，如果一位同学在开发中投入了很多，对团队的奉献很大。突然选择了离开，对我的打击反而会比较大。而类似这位同学这样的一个原因，选择离开。对于我，反而会感觉到欣慰，因为即使这样的同学留下来，也并不能跟我走到最后。他的抗压能力，以及他的意志力决定他不能走的很远。创业的路就像攀登珠峰一样，随时都有掉下去摔死的风险。你也许感觉不到你要摔死，我不得不用最严厉的语气骂醒你，你在“爬山”，你不应该睡觉！但类似这样的同学，在后续开发中，作为员工可以再次接收，因为他至少符合稳定产出的条件，只是意志力会薄弱一些，这个可以慢慢改善。</p>\n<p>所有两位同学的离开，都是非常恰当的时机，在团队初期选择离开也是对于团队小伙伴最大的尊重。请离开的同学放心，我对大家不会有任何的责备，我非常开心大家可以在初期就选择离开了团队，这很重要。就像进行一场计划好的旅行，在旅行前10天就有人中途离场，这其实很好。我们还可以重新组织同学加入到这场旅行中来，这是一件好事，我要感谢大家。同时，大家的离开也有利于筛选更优秀的员工。当然，也希望离开的两位同学工作顺利，一切顺风顺水。</p>\n<h3 id=\"微信扫描下方二维码体验小程序\"><a href=\"#微信扫描下方二维码体验小程序\" class=\"headerlink\" title=\"微信扫描下方二维码体验小程序\"></a>微信扫描下方二维码体验小程序</h3><p><img src=\"/2019/01/12/写在十分简历发布前夕/10fenjl.jpg\" alt=\"十分简历\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于十分简历\"><a href=\"#关于十分简历\" class=\"headerlink\" title=\"关于十分简历\"></a>关于十分简历</h3><p>十分简历是我们的第一个作品，这是一个微信小程序，用于生成漂亮的简历模板。</p>\n<p>同时，考虑到用户的隐私问题，增加了私密简历功能。</p>\n<p>那么，到底什么是私密简历呢？<br></p>","more":"<br>在传统的简历投递中，通常HR会将我们的简历打印下来，面试完成后，会留下面试者的简历。这在一定程度上可能造成用户的私密信息泄露。私密简历希望可以解决这个问题！<p></p>\n<p>相对传统的纸质简历，私密简历会生成一个专属于你的个人简历链接。通过这个私密简历链接，HR可以实时查看你的简历。你可以在小程序中设置一个简历过期时间，到达过期时间后简历会自动回收。为了进一步防止其他人查看你的简历，你还可以设置专属于当前私密简历的阅读密码。</p>\n<p>与此同时，你还可以通过小程序随时开启或关闭当前私密简历。关闭后，将不再允许任何人查看当前私密简历，直到再次打开。</p>\n<p>事实上，我最感兴趣的部分，恰好就是私密简历的开发。因为，确实存在一些公司的面试官会将用户的纸质简历随地丢弃，这就造成大概率简历内容泄密问题。</p>\n<p>不过，肯定有人会说，现在的HR通常都会要求打印纸质简历，又有什么办法呢？所有的进步当然不是一时间可以改进的，也许未来这样的情况会随着这类产品的普及开始变得不一样。我坚信，传统的纸质简历终究被遗弃。</p>\n<p>十分简历的点子来自于之前团队的一个小伙伴，当时，公司刚刚成立，我希望用一个小而精的产品宣告公司的诞生，同时展示团队强大的开发实力。</p>\n<p>因此，公司成立后的第一件事情，就是号召大家天马行空，思考第一个连接公司与世界的产品。最后发现，这个简历产品的思路有点意思，而且也不至于太过于复杂。于是，这个产品就成为了我们连接世界的第一个作品。</p>\n<p>确立了产品原型之后，真正的挑战开始了！</p>\n<h3 id=\"挑战一：后端开发\"><a href=\"#挑战一：后端开发\" class=\"headerlink\" title=\"挑战一：后端开发\"></a>挑战一：后端开发</h3><p>后端开发是我们面临的第一个挑战。事实上，我的第一份工作就是后端开发，并且进行了将近一年的时间，确实有一定的积累，但这并不能给我带来很大的帮助。因为，时间已经过去了差不多5年。此后的4年时间里，我一直从事移动平台软件开发。关于后端的知识点，大抵忘记了，现在捡起来，难度不少！</p>\n<p>而且，时间过去了这么久，之前的技术也慢慢地被淘汰了。为此，我决定重新开始！</p>\n<p><strong>第一步：确定技术选型</strong></p>\n<p>这一步我选择了相对麻烦、但已经实践成熟的解决方案：</p>\n<ul>\n<li>Web框架：Spring Boot + Apache Shiro </li>\n<li>数据库框架：MyBatis</li>\n<li>服务注册与发现：Eureka Server</li>\n<li>路由网关：Zuul1</li>\n<li>编程语言：Kotlin</li>\n</ul>\n<p><strong>第二步：解决路由网关难题</strong></p>\n<p>在路由网关的技术选型上，最终确立了使用Zuul1作为路由网关框架。实际上，还有一个更好的选择是Spring Cloud Gateway。但使用Spring网关需要结合更多的新知识去做，而且还需要自己去处理数据库的事务问题，的确会带来不少的麻烦。加上在当时考察的文章中，发现Spring的网关性能并不能带来本质上的提升。因此，最终确立了以Zuul作为后端的路由网关框架。</p>\n<p>在确定了技术框架之后，第一个需要的解决的问题就是，如何通过一个字段标识路由到不同的服务层逻辑。例如：通过版本号路由到不同的逻辑服务层，避免版本之间相互干扰等等。遗憾的是，Zuul的路由处理是静态配置的，这就需要对Zuul进行扩展，建立一个可以进行动态路由配置的网关框架。</p>\n<p>在这一部分问题的处理上，从最开始的设计到最终整个后端框架定型，差不多花掉了半个月左右的时间。一方面要考虑动态配置，另一方面需要考虑到网关的性能问题。通过不断地尝试，查资料，总算解决了这个问题。这个问题的难度，在这次整个产品开发过程中排名第一。</p>\n<p><strong>第三步：整合安全框架</strong></p>\n<p>这里的安全架构不仅仅指的是数据加密。当然，因为未来会涉及到付费交易，毫无疑问，我们的数据是进行过加密处理的。但这里，我要说的是，Java安全框架的接入问题。</p>\n<p>考虑到未来开发的便利性，我希望用一个安全框架帮助接管用户权限控制、分配等问题。为此，首选的当然是Spring Security。但实际试用下来，发现Spring Security设计的过于复杂，可用性不高。并且，灵活性也受到了限制，不得不另辟蹊径。最终确定了使用Apache Shiro作为平台的安全框架。</p>\n<p>Apache Shiro从一定程度上规避了Spring Security的不少问题，从一开始阅读文档就能感受到其简洁的设计。Apache Shiro的接入相对Spring Security就简单了许多，而且可定制性也提升了不少。最终，安全框架接入顺利完成。</p>\n<p><strong>第四步：搞定逻辑层编码</strong></p>\n<p>实际上，我在早年从事Java后端开发的时候，我们还使用的是SSH（Spring, Struts2, Hibernate）的组合。而现在Struts已经慢慢地被淘汰了，取而代之的是Spring MVC + MyBatis + Spring。同时，为了进一步降低Java Web开发的难度，Spring官方推出了Spring Boot。相对传统的Java Web开发，Spring Boot几乎可以脱离配置文件，使用注解完成所有配置，亲和力提升不少。 因此，我最终选择了使用Spring Boot来构建我们的Web应用。但所有的这些对于我而言都是全新的知识点，不得不从重新学习，好在之前的基础还算比较扎实，上手很快。</p>\n<h3 id=\"挑战二：小程序开发\"><a href=\"#挑战二：小程序开发\" class=\"headerlink\" title=\"挑战二：小程序开发\"></a>挑战二：小程序开发</h3><p>搞定了后端开发的难题，第二个挑战接踵而至：小程序开发。</p>\n<p>团队成员中几乎都没有小程序开发的工作经验。实际上，团队成员中有一位同学有一定的小程序开发经验。但事实证明，这位同学的开发经验依然非常浅，并不足以支撑整个小程序的开发。为此，我决定亲自学习小程序，帮助大家完成小程序端的架构。制定小程序开发规范。</p>\n<p>小程序的开发难度相对较低，但也踩了不少坑，关于这一部分的经历，我会用另外一篇文章记录下来。</p>\n<p>小程序开发过程中，最大的问题来自团队成员，其中一个小伙伴是兼职参与开发。由于学习知识较慢， 同时对自己自信心不够。加上生活的一些琐事，即使分配了足够简单的任务也未能顺利完成，这就导致了整个研发过程被拉长。</p>\n<p>最后，在Release的版本库中，我惊奇地发现，我最终参与了70%以上的小程序代码开发。看到这种场景，心中五味杂陈，这显然不是一个良性循环。</p>\n<p>这也让下定决心，从明年开始，租写字楼，正式招人办公。兼职员工将由全职员工带队进行工作安排，处理。并适当给予兼职员工一定的资金鼓励。</p>\n<h3 id=\"挑战三：Web前端开发\"><a href=\"#挑战三：Web前端开发\" class=\"headerlink\" title=\"挑战三：Web前端开发\"></a>挑战三：Web前端开发</h3><p>Web前端开发在这次开发的难度排行榜中可以排名第二。团队成员中，几乎没有一个人拥有前端开发工作经验。其中一个同学做过极少一段时间的前端开发，因此，我让他牵头开发了第一个模板。</p>\n<p>但在第一个模板的开发过程中，也是不断地磕磕绊绊，走了不少弯路。那一段时间，是整个开发阶段最艰苦的时段，我跟这位同学每天从早上忙到晚上12点。持续了连续10天左右，没有周末，没有午休。好在终于顺利完成了第一个模板的开发。</p>\n<p>模板开发完成后，整个产品的基础形态第一次呈现在了大家的面前。前期由于时间过于紧张，在我们的产品原型中，并没有一个充分的流程可以展示完整。以至于兼职参与开发的同学们在理解产品的设计上出现了不少问题。这种理解上的问题后来也让我头疼不已，这也是这次开发过程中获得的宝贵教训之一。</p>\n<p>关于Web前端的技术选型，也走了一些弯路。最开始，我考虑使用Vue + TS的组合作为前端开发。最终架构完成后却发现，这个组合对于前端开发的难度提升了不少。这在很大程度上会拖延项目的开发进度。因此，马上放弃了这个组合。转而使用大家比较容易掌握的jQuery。事实上，模板页作为我们的单页应用，使用jQuery已经完全足够了。</p>\n<p>确定了技术选型之后，依然出现了一些问题。由于第一位同学开发的比较匆忙，没有形成一定的规范。导致第二位同学接力的时候出现了一头雾水的情况。因此，第二位同学不得不重新去学习Webpack，重新去设计自己的代码架构，这在一定程度上也拖慢了整个开发进度。</p>\n<p>事实上，在整个开发进程中，Web前端的开发比重确实占据了不少。这个挑战的难度在本次开发过程中应该可以排名第二。</p>\n<h3 id=\"第一阶段总结\"><a href=\"#第一阶段总结\" class=\"headerlink\" title=\"第一阶段总结\"></a>第一阶段总结</h3><p>在整个十分简历的开发过程，就像在做一次冒险，所有的知识对于我们来说，都是陌生的。我们需要从0开始学习，恰好是这种从0开始学习的勇气让我更加自信我可以搞定任何事情，不会再惧怕第一次。同时，我也坚信，这一次难忘的开发经历，会让团队中坚持到最后的同学都有了一往无前、无所畏惧的勇气。</p>\n<p>这是一次十分难忘的开发经历，也是我们第一次勇敢地探索未知的世界，最终克服了重重困难，将十分简历带到了大家的面前。</p>\n<p>这不是结束，这恰好是我们故事的开头！</p>\n<p>最后，感谢所有参与十分简历开发的同学们，为自己鼓个掌吧！你们所经历的，不仅仅是开发了一个产品，而是克服了内心对于未知事物的恐惧，敢于踏出第一步。这种收获，必将让你们终身受益！</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><h3 id=\"送给中途离开十分简历开发的同学们\"><a href=\"#送给中途离开十分简历开发的同学们\" class=\"headerlink\" title=\"送给中途离开十分简历开发的同学们\"></a>送给中途离开十分简历开发的同学们</h3><p>在十分简历的开发过程中，有两位同学中途离开了开发团队。第一位同学是因为同时在开发另外一个产品，时间有限，不能同时兼顾两个产品开发，最终选择了另外一个产品的开发。这是完全可以理解的，这是个人选择问题，也是眼界问题。这样的同学，在后续团队扩展中，将不会再次接收。因为，有了第一次这样的选择，就会有下一次。这样的同学不能稳定产出，稳定投入，会因为种种问题摇摆不定。</p>\n<p>另外一位同学，因为受不了我的严厉性格，在中途选择了离开。这当然更加容易理解，这样的的离开于我而言，几乎是完全无感的。相反，如果一位同学在开发中投入了很多，对团队的奉献很大。突然选择了离开，对我的打击反而会比较大。而类似这位同学这样的一个原因，选择离开。对于我，反而会感觉到欣慰，因为即使这样的同学留下来，也并不能跟我走到最后。他的抗压能力，以及他的意志力决定他不能走的很远。创业的路就像攀登珠峰一样，随时都有掉下去摔死的风险。你也许感觉不到你要摔死，我不得不用最严厉的语气骂醒你，你在“爬山”，你不应该睡觉！但类似这样的同学，在后续开发中，作为员工可以再次接收，因为他至少符合稳定产出的条件，只是意志力会薄弱一些，这个可以慢慢改善。</p>\n<p>所有两位同学的离开，都是非常恰当的时机，在团队初期选择离开也是对于团队小伙伴最大的尊重。请离开的同学放心，我对大家不会有任何的责备，我非常开心大家可以在初期就选择离开了团队，这很重要。就像进行一场计划好的旅行，在旅行前10天就有人中途离场，这其实很好。我们还可以重新组织同学加入到这场旅行中来，这是一件好事，我要感谢大家。同时，大家的离开也有利于筛选更优秀的员工。当然，也希望离开的两位同学工作顺利，一切顺风顺水。</p>\n<h3 id=\"微信扫描下方二维码体验小程序\"><a href=\"#微信扫描下方二维码体验小程序\" class=\"headerlink\" title=\"微信扫描下方二维码体验小程序\"></a>微信扫描下方二维码体验小程序</h3><p><img src=\"/2019/01/12/写在十分简历发布前夕/10fenjl.jpg\" alt=\"十分简历\"></p>\n<hr>"},{"title":"2017年终总结","date":"2018-02-15T15:59:00.000Z","comments":1,"_content":"\n![Yes, I'm ready](http://upload-images.jianshu.io/upload_images/703764-4df72af2723c2087.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>2017年对于我来说，是收获的一年。这一年，我放弃了一份稳定的工作，去尝试了一份生死未卜的事业。我以为我会后悔，相反，我很庆幸这个决定。虽然，失去了稳定，却在跌宕起伏中收获了不一样的精彩...\n\n这一年，我在公司主要负责移动部门技术管理工作。移动部门技术同学水平参差不齐、管理涣散是前期遇到的最大的一个问题。为此，我制定了一个简单的计划：\n* 定期工作汇报\n* 技术培训\n* 代码Review\n* 定期会议\n\n## 定期工作汇报\n定期工作汇报的效果是显著的，在汇报工作的过程中，通过互相对比，彼此会看到自己的不足，加以改进。在工作汇报的设计上，我没有采用日报的形式，我认为日报有点太过机械化了，甚至有可能导致一定的负面情绪。因此，我把工作汇报集中在周二和周四，仅仅两天的时间既不会太紧凑，也不会太松散。虽然工作汇报在团队中形成了一个良好的氛围，但因为技术实力薄弱带来的问题依然暴露了很多。以至于在团队中出现了一些负面情绪，前端同学在抱怨后端开发，后端开发也在推责前端，气氛一度紧张。在这样一种情形下，我认为技术培训工作已经迫在眉睫了。\n\n## 技术培训\n技术培训工作是这一年最用心的工作之一，培训的核心主要集中在Kotlin语言。团队中几乎所有的同学对Kotlin语言都是陌生的，仅仅停留在最基础的用法上面，这显然不行！针对这个问题，我将培训内容集中在Kotlin重难点攻克上面。\n\n回顾过去一年，我大约进行了十多次技术培训，内容包括：\n* Kotlin基础知识\n* Kotlin难点攻克\n* Git基础用法（针对公司全员）\n* Android常见问题解决方案\n* 从Swift看Kotlin\n* 基础网络知识\n* 基础调试技巧培训（adb，gradle，Linux)\n\n其中一部分内容是作为技术分享课程进行的，准备这些课程其实并不容易。但依然有极少数同学对于培训课程不屑一顾，即使在课堂上再三强调过的问题，在实际开发中依然屡屡再犯。为此，在技术层面上，我想我还需要做更多的工作。\n\n## Code Review\n与往常不一样，这一次我决定使用Pull Request的方式合并代码。这样，我可以对每一次提交进行Code Review。每一次的Pull Request我都会逐行检查，并且会对每一次的打回整理一个完整的文档描述问题出在哪里。\n\n不得不说，Code Review的效果是显著的，团队中一些代码风格很差的同学。经过几次代码被打回的洗礼之后，代码风格有了很大的改善。然而，遗憾的是，后期由于工作过于繁忙，这个部分的工作也慢慢取消了。\n\n整体而言，Code Review的确带动了团队整体编码水平的提升。编码能力提高之后，问题减少了许多。不过，由于前期遗留的一些老问题，导致部分低级错误依然在犯，真是让人心力交瘁。与此同时，团队中另外一个问题也慢慢暴露了出来。你可以很明显地感觉到，团队整体的凝聚力、核心价值观是缺失的，以至于针对同一个问题每个人的聚焦点完全不一样。部分同学采取“当一天和尚撞一天钟”的做法。因此，我认为核心价值观的建设必须尽快搞起来。\n\n## 定期会议\n为了建立团队核心价值观，我决定定期开展一些会议。然而，由于时间的关系，仅组织了几场会议。但在每次例会结束的时候，我都会做一些核心价值观引导。我一直认为，一个没有核心价值观的公司是一个不完整的公司。这有点类似于“精神出轨”和“肉体出轨”，两者都非常可怕，在IT公司，“精神出轨”的最终症状往往就是“肉体出轨”。但核心价值观的建设是一个漫长的过程，每次会议开完，总感觉收效甚微。内心就像嚼一块过期的臭豆腐，五味杂陈。为此，我改变了策略，决定先带动部分同学，再通过部分同学带动其他同学。有点像旧社会的“让一部分人先富起来”的感觉。这一部分的工作真是举步维艰，不过，好在最后的结果还不错。最终，大部分同学都形成了统一的价值观。\n\n以上，是过去一年我在工作上所做的一些尝试，其实都是一些老生常谈的套路，但实践下来的效果其实还不错。\n\n回首2017年，的确是完全献给工作的一年。这一年，我常常奋战到深夜，即使在周末，也是如此。这一年，我几乎没有出去旅游，甚至于几公里外的徒步都没有。相对往年，时间显得更加稀缺，但与此同时带来的回报也是双倍的。在团队管理上，我有了新的见解；在技术上，我也有了新的突破；在人际关系处理上，我也有了新的进步。\n\n伴随收获随之而来的就是遗憾，这一年主要有两个遗憾。第一个遗憾，对于团队，始终感觉有些亏欠。这一年，我给团队的关键词是“技术”。因此，在团队感情集结、团队建设方面做的工作太少。以至于直到年尾，大家对彼此依然有些陌生，这不得不说是一个很大的遗憾。第二个遗憾，是对自己，17年我给自己定的关键词是“运动”。然而，由于工作的繁忙，锻炼并没有按计划进行，以至于体质一再下降，这不得不说又是一个遗憾，这一部分希望2018年能够及时弥补上来。\n\n明天就是农历2018年了，突然意识到，我已经三十岁了，虽然我很不愿意承认。三十而立，我希望自己可以有一些新的突破。因此，我给自己的2018预设了几个目标，希望在2019年之前可以顺利完成。\n\n最后，感谢所有陪伴我度过2017年的小伙伴们，2018年我会更加努力，让你看到一个更优秀的欧阳锋。这一年我给自己定的年度关键字是“稳”，无论是在事业上，还是在身体上，亦或者是其它方面，都希望可以稳扎稳打、稳步向前。\n\n我是欧阳锋，即使而立之年，我依然相信，只要坚持做一件事情，就一定会成功。我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。我始终怀揣着梦想，2018年我会从“新”出发。2018，祝福正在看文章的你，也能高挂云帆，傲视沧海。\n\n遇见欧阳锋，希望你没有后悔，2018年再见。\n\n","source":"_posts/about ouyangfeng/2017年终总结.md","raw":"title: 2017年终总结\ndate: 2018/2/15 23:59\ncomments: true\ntags:\n- 2017\n- 总结\ncategories:\n- 关于欧阳锋\n---\n\n![Yes, I'm ready](http://upload-images.jianshu.io/upload_images/703764-4df72af2723c2087.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>2017年对于我来说，是收获的一年。这一年，我放弃了一份稳定的工作，去尝试了一份生死未卜的事业。我以为我会后悔，相反，我很庆幸这个决定。虽然，失去了稳定，却在跌宕起伏中收获了不一样的精彩...\n\n这一年，我在公司主要负责移动部门技术管理工作。移动部门技术同学水平参差不齐、管理涣散是前期遇到的最大的一个问题。为此，我制定了一个简单的计划：\n* 定期工作汇报\n* 技术培训\n* 代码Review\n* 定期会议\n\n## 定期工作汇报\n定期工作汇报的效果是显著的，在汇报工作的过程中，通过互相对比，彼此会看到自己的不足，加以改进。在工作汇报的设计上，我没有采用日报的形式，我认为日报有点太过机械化了，甚至有可能导致一定的负面情绪。因此，我把工作汇报集中在周二和周四，仅仅两天的时间既不会太紧凑，也不会太松散。虽然工作汇报在团队中形成了一个良好的氛围，但因为技术实力薄弱带来的问题依然暴露了很多。以至于在团队中出现了一些负面情绪，前端同学在抱怨后端开发，后端开发也在推责前端，气氛一度紧张。在这样一种情形下，我认为技术培训工作已经迫在眉睫了。\n\n## 技术培训\n技术培训工作是这一年最用心的工作之一，培训的核心主要集中在Kotlin语言。团队中几乎所有的同学对Kotlin语言都是陌生的，仅仅停留在最基础的用法上面，这显然不行！针对这个问题，我将培训内容集中在Kotlin重难点攻克上面。\n\n回顾过去一年，我大约进行了十多次技术培训，内容包括：\n* Kotlin基础知识\n* Kotlin难点攻克\n* Git基础用法（针对公司全员）\n* Android常见问题解决方案\n* 从Swift看Kotlin\n* 基础网络知识\n* 基础调试技巧培训（adb，gradle，Linux)\n\n其中一部分内容是作为技术分享课程进行的，准备这些课程其实并不容易。但依然有极少数同学对于培训课程不屑一顾，即使在课堂上再三强调过的问题，在实际开发中依然屡屡再犯。为此，在技术层面上，我想我还需要做更多的工作。\n\n## Code Review\n与往常不一样，这一次我决定使用Pull Request的方式合并代码。这样，我可以对每一次提交进行Code Review。每一次的Pull Request我都会逐行检查，并且会对每一次的打回整理一个完整的文档描述问题出在哪里。\n\n不得不说，Code Review的效果是显著的，团队中一些代码风格很差的同学。经过几次代码被打回的洗礼之后，代码风格有了很大的改善。然而，遗憾的是，后期由于工作过于繁忙，这个部分的工作也慢慢取消了。\n\n整体而言，Code Review的确带动了团队整体编码水平的提升。编码能力提高之后，问题减少了许多。不过，由于前期遗留的一些老问题，导致部分低级错误依然在犯，真是让人心力交瘁。与此同时，团队中另外一个问题也慢慢暴露了出来。你可以很明显地感觉到，团队整体的凝聚力、核心价值观是缺失的，以至于针对同一个问题每个人的聚焦点完全不一样。部分同学采取“当一天和尚撞一天钟”的做法。因此，我认为核心价值观的建设必须尽快搞起来。\n\n## 定期会议\n为了建立团队核心价值观，我决定定期开展一些会议。然而，由于时间的关系，仅组织了几场会议。但在每次例会结束的时候，我都会做一些核心价值观引导。我一直认为，一个没有核心价值观的公司是一个不完整的公司。这有点类似于“精神出轨”和“肉体出轨”，两者都非常可怕，在IT公司，“精神出轨”的最终症状往往就是“肉体出轨”。但核心价值观的建设是一个漫长的过程，每次会议开完，总感觉收效甚微。内心就像嚼一块过期的臭豆腐，五味杂陈。为此，我改变了策略，决定先带动部分同学，再通过部分同学带动其他同学。有点像旧社会的“让一部分人先富起来”的感觉。这一部分的工作真是举步维艰，不过，好在最后的结果还不错。最终，大部分同学都形成了统一的价值观。\n\n以上，是过去一年我在工作上所做的一些尝试，其实都是一些老生常谈的套路，但实践下来的效果其实还不错。\n\n回首2017年，的确是完全献给工作的一年。这一年，我常常奋战到深夜，即使在周末，也是如此。这一年，我几乎没有出去旅游，甚至于几公里外的徒步都没有。相对往年，时间显得更加稀缺，但与此同时带来的回报也是双倍的。在团队管理上，我有了新的见解；在技术上，我也有了新的突破；在人际关系处理上，我也有了新的进步。\n\n伴随收获随之而来的就是遗憾，这一年主要有两个遗憾。第一个遗憾，对于团队，始终感觉有些亏欠。这一年，我给团队的关键词是“技术”。因此，在团队感情集结、团队建设方面做的工作太少。以至于直到年尾，大家对彼此依然有些陌生，这不得不说是一个很大的遗憾。第二个遗憾，是对自己，17年我给自己定的关键词是“运动”。然而，由于工作的繁忙，锻炼并没有按计划进行，以至于体质一再下降，这不得不说又是一个遗憾，这一部分希望2018年能够及时弥补上来。\n\n明天就是农历2018年了，突然意识到，我已经三十岁了，虽然我很不愿意承认。三十而立，我希望自己可以有一些新的突破。因此，我给自己的2018预设了几个目标，希望在2019年之前可以顺利完成。\n\n最后，感谢所有陪伴我度过2017年的小伙伴们，2018年我会更加努力，让你看到一个更优秀的欧阳锋。这一年我给自己定的年度关键字是“稳”，无论是在事业上，还是在身体上，亦或者是其它方面，都希望可以稳扎稳打、稳步向前。\n\n我是欧阳锋，即使而立之年，我依然相信，只要坚持做一件事情，就一定会成功。我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。我始终怀揣着梦想，2018年我会从“新”出发。2018，祝福正在看文章的你，也能高挂云帆，傲视沧海。\n\n遇见欧阳锋，希望你没有后悔，2018年再见。\n\n","slug":"about ouyangfeng/2017年终总结","published":1,"updated":"2019-04-28T12:39:23.519Z","_id":"cjv0x7uho003fbkb4lara5c34","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4df72af2723c2087.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Yes, I&#39;m ready\"></p>\n<blockquote>\n<p>2017年对于我来说，是收获的一年。这一年，我放弃了一份稳定的工作，去尝试了一份生死未卜的事业。我以为我会后悔，相反，我很庆幸这个决定。虽然，失去了稳定，却在跌宕起伏中收获了不一样的精彩…</p>\n</blockquote>\n<p>这一年，我在公司主要负责移动部门技术管理工作。移动部门技术同学水平参差不齐、管理涣散是前期遇到的最大的一个问题。为此，我制定了一个简单的计划：</p>\n<ul>\n<li>定期工作汇报</li>\n<li>技术培训</li>\n<li>代码Review</li>\n<li>定期会议</li>\n</ul>\n<h2 id=\"定期工作汇报\"><a href=\"#定期工作汇报\" class=\"headerlink\" title=\"定期工作汇报\"></a>定期工作汇报</h2><p>定期工作汇报的效果是显著的，在汇报工作的过程中，通过互相对比，彼此会看到自己的不足，加以改进。在工作汇报的设计上，我没有采用日报的形式，我认为日报有点太过机械化了，甚至有可能导致一定的负面情绪。因此，我把工作汇报集中在周二和周四，仅仅两天的时间既不会太紧凑，也不会太松散。虽然工作汇报在团队中形成了一个良好的氛围，但因为技术实力薄弱带来的问题依然暴露了很多。以至于在团队中出现了一些负面情绪，前端同学在抱怨后端开发，后端开发也在推责前端，气氛一度紧张。在这样一种情形下，我认为技术培训工作已经迫在眉睫了。</p>\n<h2 id=\"技术培训\"><a href=\"#技术培训\" class=\"headerlink\" title=\"技术培训\"></a>技术培训</h2><p>技术培训工作是这一年最用心的工作之一，培训的核心主要集中在Kotlin语言。团队中几乎所有的同学对Kotlin语言都是陌生的，仅仅停留在最基础的用法上面，这显然不行！针对这个问题，我将培训内容集中在Kotlin重难点攻克上面。</p>\n<p>回顾过去一年，我大约进行了十多次技术培训，内容包括：</p>\n<ul>\n<li>Kotlin基础知识</li>\n<li>Kotlin难点攻克</li>\n<li>Git基础用法（针对公司全员）</li>\n<li>Android常见问题解决方案</li>\n<li>从Swift看Kotlin</li>\n<li>基础网络知识</li>\n<li>基础调试技巧培训（adb，gradle，Linux)</li>\n</ul>\n<p>其中一部分内容是作为技术分享课程进行的，准备这些课程其实并不容易。但依然有极少数同学对于培训课程不屑一顾，即使在课堂上再三强调过的问题，在实际开发中依然屡屡再犯。为此，在技术层面上，我想我还需要做更多的工作。</p>\n<h2 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h2><p>与往常不一样，这一次我决定使用Pull Request的方式合并代码。这样，我可以对每一次提交进行Code Review。每一次的Pull Request我都会逐行检查，并且会对每一次的打回整理一个完整的文档描述问题出在哪里。</p>\n<p>不得不说，Code Review的效果是显著的，团队中一些代码风格很差的同学。经过几次代码被打回的洗礼之后，代码风格有了很大的改善。然而，遗憾的是，后期由于工作过于繁忙，这个部分的工作也慢慢取消了。</p>\n<p>整体而言，Code Review的确带动了团队整体编码水平的提升。编码能力提高之后，问题减少了许多。不过，由于前期遗留的一些老问题，导致部分低级错误依然在犯，真是让人心力交瘁。与此同时，团队中另外一个问题也慢慢暴露了出来。你可以很明显地感觉到，团队整体的凝聚力、核心价值观是缺失的，以至于针对同一个问题每个人的聚焦点完全不一样。部分同学采取“当一天和尚撞一天钟”的做法。因此，我认为核心价值观的建设必须尽快搞起来。</p>\n<h2 id=\"定期会议\"><a href=\"#定期会议\" class=\"headerlink\" title=\"定期会议\"></a>定期会议</h2><p>为了建立团队核心价值观，我决定定期开展一些会议。然而，由于时间的关系，仅组织了几场会议。但在每次例会结束的时候，我都会做一些核心价值观引导。我一直认为，一个没有核心价值观的公司是一个不完整的公司。这有点类似于“精神出轨”和“肉体出轨”，两者都非常可怕，在IT公司，“精神出轨”的最终症状往往就是“肉体出轨”。但核心价值观的建设是一个漫长的过程，每次会议开完，总感觉收效甚微。内心就像嚼一块过期的臭豆腐，五味杂陈。为此，我改变了策略，决定先带动部分同学，再通过部分同学带动其他同学。有点像旧社会的“让一部分人先富起来”的感觉。这一部分的工作真是举步维艰，不过，好在最后的结果还不错。最终，大部分同学都形成了统一的价值观。</p>\n<p>以上，是过去一年我在工作上所做的一些尝试，其实都是一些老生常谈的套路，但实践下来的效果其实还不错。</p>\n<p>回首2017年，的确是完全献给工作的一年。这一年，我常常奋战到深夜，即使在周末，也是如此。这一年，我几乎没有出去旅游，甚至于几公里外的徒步都没有。相对往年，时间显得更加稀缺，但与此同时带来的回报也是双倍的。在团队管理上，我有了新的见解；在技术上，我也有了新的突破；在人际关系处理上，我也有了新的进步。</p>\n<p>伴随收获随之而来的就是遗憾，这一年主要有两个遗憾。第一个遗憾，对于团队，始终感觉有些亏欠。这一年，我给团队的关键词是“技术”。因此，在团队感情集结、团队建设方面做的工作太少。以至于直到年尾，大家对彼此依然有些陌生，这不得不说是一个很大的遗憾。第二个遗憾，是对自己，17年我给自己定的关键词是“运动”。然而，由于工作的繁忙，锻炼并没有按计划进行，以至于体质一再下降，这不得不说又是一个遗憾，这一部分希望2018年能够及时弥补上来。</p>\n<p>明天就是农历2018年了，突然意识到，我已经三十岁了，虽然我很不愿意承认。三十而立，我希望自己可以有一些新的突破。因此，我给自己的2018预设了几个目标，希望在2019年之前可以顺利完成。</p>\n<p>最后，感谢所有陪伴我度过2017年的小伙伴们，2018年我会更加努力，让你看到一个更优秀的欧阳锋。这一年我给自己定的年度关键字是“稳”，无论是在事业上，还是在身体上，亦或者是其它方面，都希望可以稳扎稳打、稳步向前。</p>\n<p>我是欧阳锋，即使而立之年，我依然相信，只要坚持做一件事情，就一定会成功。我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。我始终怀揣着梦想，2018年我会从“新”出发。2018，祝福正在看文章的你，也能高挂云帆，傲视沧海。</p>\n<p>遇见欧阳锋，希望你没有后悔，2018年再见。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4df72af2723c2087.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Yes, I&#39;m ready\"></p>\n<blockquote>\n<p>2017年对于我来说，是收获的一年。这一年，我放弃了一份稳定的工作，去尝试了一份生死未卜的事业。我以为我会后悔，相反，我很庆幸这个决定。虽然，失去了稳定，却在跌宕起伏中收获了不一样的精彩…</p>\n</blockquote>\n<p>这一年，我在公司主要负责移动部门技术管理工作。移动部门技术同学水平参差不齐、管理涣散是前期遇到的最大的一个问题。为此，我制定了一个简单的计划：</p>\n<ul>\n<li>定期工作汇报</li>\n<li>技术培训</li>\n<li>代码Review</li>\n<li>定期会议</li>\n</ul>\n<h2 id=\"定期工作汇报\"><a href=\"#定期工作汇报\" class=\"headerlink\" title=\"定期工作汇报\"></a>定期工作汇报</h2><p>定期工作汇报的效果是显著的，在汇报工作的过程中，通过互相对比，彼此会看到自己的不足，加以改进。在工作汇报的设计上，我没有采用日报的形式，我认为日报有点太过机械化了，甚至有可能导致一定的负面情绪。因此，我把工作汇报集中在周二和周四，仅仅两天的时间既不会太紧凑，也不会太松散。虽然工作汇报在团队中形成了一个良好的氛围，但因为技术实力薄弱带来的问题依然暴露了很多。以至于在团队中出现了一些负面情绪，前端同学在抱怨后端开发，后端开发也在推责前端，气氛一度紧张。在这样一种情形下，我认为技术培训工作已经迫在眉睫了。</p>\n<h2 id=\"技术培训\"><a href=\"#技术培训\" class=\"headerlink\" title=\"技术培训\"></a>技术培训</h2><p>技术培训工作是这一年最用心的工作之一，培训的核心主要集中在Kotlin语言。团队中几乎所有的同学对Kotlin语言都是陌生的，仅仅停留在最基础的用法上面，这显然不行！针对这个问题，我将培训内容集中在Kotlin重难点攻克上面。</p>\n<p>回顾过去一年，我大约进行了十多次技术培训，内容包括：</p>\n<ul>\n<li>Kotlin基础知识</li>\n<li>Kotlin难点攻克</li>\n<li>Git基础用法（针对公司全员）</li>\n<li>Android常见问题解决方案</li>\n<li>从Swift看Kotlin</li>\n<li>基础网络知识</li>\n<li>基础调试技巧培训（adb，gradle，Linux)</li>\n</ul>\n<p>其中一部分内容是作为技术分享课程进行的，准备这些课程其实并不容易。但依然有极少数同学对于培训课程不屑一顾，即使在课堂上再三强调过的问题，在实际开发中依然屡屡再犯。为此，在技术层面上，我想我还需要做更多的工作。</p>\n<h2 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h2><p>与往常不一样，这一次我决定使用Pull Request的方式合并代码。这样，我可以对每一次提交进行Code Review。每一次的Pull Request我都会逐行检查，并且会对每一次的打回整理一个完整的文档描述问题出在哪里。</p>\n<p>不得不说，Code Review的效果是显著的，团队中一些代码风格很差的同学。经过几次代码被打回的洗礼之后，代码风格有了很大的改善。然而，遗憾的是，后期由于工作过于繁忙，这个部分的工作也慢慢取消了。</p>\n<p>整体而言，Code Review的确带动了团队整体编码水平的提升。编码能力提高之后，问题减少了许多。不过，由于前期遗留的一些老问题，导致部分低级错误依然在犯，真是让人心力交瘁。与此同时，团队中另外一个问题也慢慢暴露了出来。你可以很明显地感觉到，团队整体的凝聚力、核心价值观是缺失的，以至于针对同一个问题每个人的聚焦点完全不一样。部分同学采取“当一天和尚撞一天钟”的做法。因此，我认为核心价值观的建设必须尽快搞起来。</p>\n<h2 id=\"定期会议\"><a href=\"#定期会议\" class=\"headerlink\" title=\"定期会议\"></a>定期会议</h2><p>为了建立团队核心价值观，我决定定期开展一些会议。然而，由于时间的关系，仅组织了几场会议。但在每次例会结束的时候，我都会做一些核心价值观引导。我一直认为，一个没有核心价值观的公司是一个不完整的公司。这有点类似于“精神出轨”和“肉体出轨”，两者都非常可怕，在IT公司，“精神出轨”的最终症状往往就是“肉体出轨”。但核心价值观的建设是一个漫长的过程，每次会议开完，总感觉收效甚微。内心就像嚼一块过期的臭豆腐，五味杂陈。为此，我改变了策略，决定先带动部分同学，再通过部分同学带动其他同学。有点像旧社会的“让一部分人先富起来”的感觉。这一部分的工作真是举步维艰，不过，好在最后的结果还不错。最终，大部分同学都形成了统一的价值观。</p>\n<p>以上，是过去一年我在工作上所做的一些尝试，其实都是一些老生常谈的套路，但实践下来的效果其实还不错。</p>\n<p>回首2017年，的确是完全献给工作的一年。这一年，我常常奋战到深夜，即使在周末，也是如此。这一年，我几乎没有出去旅游，甚至于几公里外的徒步都没有。相对往年，时间显得更加稀缺，但与此同时带来的回报也是双倍的。在团队管理上，我有了新的见解；在技术上，我也有了新的突破；在人际关系处理上，我也有了新的进步。</p>\n<p>伴随收获随之而来的就是遗憾，这一年主要有两个遗憾。第一个遗憾，对于团队，始终感觉有些亏欠。这一年，我给团队的关键词是“技术”。因此，在团队感情集结、团队建设方面做的工作太少。以至于直到年尾，大家对彼此依然有些陌生，这不得不说是一个很大的遗憾。第二个遗憾，是对自己，17年我给自己定的关键词是“运动”。然而，由于工作的繁忙，锻炼并没有按计划进行，以至于体质一再下降，这不得不说又是一个遗憾，这一部分希望2018年能够及时弥补上来。</p>\n<p>明天就是农历2018年了，突然意识到，我已经三十岁了，虽然我很不愿意承认。三十而立，我希望自己可以有一些新的突破。因此，我给自己的2018预设了几个目标，希望在2019年之前可以顺利完成。</p>\n<p>最后，感谢所有陪伴我度过2017年的小伙伴们，2018年我会更加努力，让你看到一个更优秀的欧阳锋。这一年我给自己定的年度关键字是“稳”，无论是在事业上，还是在身体上，亦或者是其它方面，都希望可以稳扎稳打、稳步向前。</p>\n<p>我是欧阳锋，即使而立之年，我依然相信，只要坚持做一件事情，就一定会成功。我始终偏爱那些无畏困难、不问前程、坚持不懈的人们。我始终怀揣着梦想，2018年我会从“新”出发。2018，祝福正在看文章的你，也能高挂云帆，傲视沧海。</p>\n<p>遇见欧阳锋，希望你没有后悔，2018年再见。</p>\n"},{"title":"欧阳锋档案馆","date":"2018-02-28T14:24:00.000Z","comments":1,"_content":"\n>你好，欢迎来到欧阳锋档案馆！你可能已经看过了我的一些文章，但对应欧阳锋工作室可能依然比较陌生。这篇文章主要记录当前欧阳锋工作室的主要关注渠道，以及最新的一些进展。\n\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-379667eaf372fef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 关注渠道\n官方网站：[http://www.youngfeng.com](http://www.youngfeng.com)\n\n微信公众号：**欧阳锋工作室**(微信号：OuyangfengOffice)\n\n新浪微博：[欧阳锋工作室](https://weibo.com/u/6140262139?refer_flag=1001030201_)\n\nGitHub：[https://github.com/yuanhoujun](https://github.com/yuanhoujun)\n\n简书：[https://www.jianshu.com/u/db019edd34b4](https://www.jianshu.com/u/db019edd34b4)\n\n# 交流群\niOS交流群：468167089\nKotlin语言交流群：329673958\n\n---\n我是欧阳锋，我期待着与你的邂逅 << ","source":"_posts/about ouyangfeng/欧阳锋档案馆.md","raw":"title: 欧阳锋档案馆\ndate: 2018/2/28 22:24\ncomments: true\ntags:\n- 欧阳锋\n- 关注\n- 工作室\ncategories:\n- 关于欧阳锋\n---\n\n>你好，欢迎来到欧阳锋档案馆！你可能已经看过了我的一些文章，但对应欧阳锋工作室可能依然比较陌生。这篇文章主要记录当前欧阳锋工作室的主要关注渠道，以及最新的一些进展。\n\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-379667eaf372fef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 关注渠道\n官方网站：[http://www.youngfeng.com](http://www.youngfeng.com)\n\n微信公众号：**欧阳锋工作室**(微信号：OuyangfengOffice)\n\n新浪微博：[欧阳锋工作室](https://weibo.com/u/6140262139?refer_flag=1001030201_)\n\nGitHub：[https://github.com/yuanhoujun](https://github.com/yuanhoujun)\n\n简书：[https://www.jianshu.com/u/db019edd34b4](https://www.jianshu.com/u/db019edd34b4)\n\n# 交流群\niOS交流群：468167089\nKotlin语言交流群：329673958\n\n---\n我是欧阳锋，我期待着与你的邂逅 << ","slug":"about ouyangfeng/欧阳锋档案馆","published":1,"updated":"2019-04-28T12:39:23.520Z","_id":"cjv0x7uhp003gbkb42mqjq7x6","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>你好，欢迎来到欧阳锋档案馆！你可能已经看过了我的一些文章，但对应欧阳锋工作室可能依然比较陌生。这篇文章主要记录当前欧阳锋工作室的主要关注渠道，以及最新的一些进展。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-379667eaf372fef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<h1 id=\"关注渠道\"><a href=\"#关注渠道\" class=\"headerlink\" title=\"关注渠道\"></a>关注渠道</h1><p>官方网站：<a href=\"http://www.youngfeng.com\" target=\"_blank\" rel=\"noopener\">http://www.youngfeng.com</a></p>\n<p>微信公众号：<strong>欧阳锋工作室</strong>(微信号：OuyangfengOffice)</p>\n<p>新浪微博：<a href=\"https://weibo.com/u/6140262139?refer_flag=1001030201_\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></p>\n<p>GitHub：<a href=\"https://github.com/yuanhoujun\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun</a></p>\n<p>简书：<a href=\"https://www.jianshu.com/u/db019edd34b4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/db019edd34b4</a></p>\n<h1 id=\"交流群\"><a href=\"#交流群\" class=\"headerlink\" title=\"交流群\"></a>交流群</h1><p>iOS交流群：468167089<br>Kotlin语言交流群：329673958</p>\n<hr>\n<p>我是欧阳锋，我期待着与你的邂逅 &lt;&lt; </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>你好，欢迎来到欧阳锋档案馆！你可能已经看过了我的一些文章，但对应欧阳锋工作室可能依然比较陌生。这篇文章主要记录当前欧阳锋工作室的主要关注渠道，以及最新的一些进展。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-379667eaf372fef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<h1 id=\"关注渠道\"><a href=\"#关注渠道\" class=\"headerlink\" title=\"关注渠道\"></a>关注渠道</h1><p>官方网站：<a href=\"http://www.youngfeng.com\" target=\"_blank\" rel=\"noopener\">http://www.youngfeng.com</a></p>\n<p>微信公众号：<strong>欧阳锋工作室</strong>(微信号：OuyangfengOffice)</p>\n<p>新浪微博：<a href=\"https://weibo.com/u/6140262139?refer_flag=1001030201_\" target=\"_blank\" rel=\"noopener\">欧阳锋工作室</a></p>\n<p>GitHub：<a href=\"https://github.com/yuanhoujun\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun</a></p>\n<p>简书：<a href=\"https://www.jianshu.com/u/db019edd34b4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/db019edd34b4</a></p>\n<h1 id=\"交流群\"><a href=\"#交流群\" class=\"headerlink\" title=\"交流群\"></a>交流群</h1><p>iOS交流群：468167089<br>Kotlin语言交流群：329673958</p>\n<hr>\n<p>我是欧阳锋，我期待着与你的邂逅 &lt;&lt; </p>\n"},{"title":"是你自己选择了安逸，别怪路途太遥远","date":"2018-03-05T01:54:00.000Z","comments":1,"_content":"\n![](http://upload-images.jianshu.io/upload_images/703764-84fac9ea75a54152.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>“老同学，我的工作好无聊，每天有大把的时间却不知道如何打发。我也不知道这个工作的意义在哪里？” 这是两年前我的一个高中同学给我发来的微信消息。一年后，我再次收到他发来的微信消息 “嘿，哥们！我到清远工作了”，“做运维了吗？”，“不是，还是公务员”，“.....” \n\n他是我的铁哥们，叫赵亦然。他在大学的主修专业是计算机，莫名其妙地做了公务员。现在在利用业余时间学习系统运维。他说，他想去考红帽子认证工程师。希望可以换个工作，并详细询问了我关于深圳系统运维工程师的一些事情。可是，正如你所见，一年后，一切照旧。工作依旧，抱怨依然。\n\n曾几何时，公务员已经成为了年轻人选择工作的第一标准，也成为了父母口中的金饭碗。而对于年轻人，选择公务员这个职业，大多都是出于无奈。当然，也不排除部分同学的确对从政有很大的兴趣。\n\n严格来讲，这个结论也许有失偏颇。但从我周围的情况来看，结果确实是这样。不信，问问你的公务员朋友，也许你也会得到下面这样一段对话。\n\nA：为什么你选择做公务员？\nB：大学的时候，没有目标，不知道自己喜欢什么，就想着考着试试看。没想到，真考上了，就一直做下来了...\n\n然而，很多同学在真正从事这个职业的时候就开始后悔，公务员机械式的工作方式让他们痛苦不堪。但一想到放弃，想到要放弃这安逸的工作，想到对未知的恐惧，马上就打消了这个念头。 \n\n公务员职业如此，软件行业也是如此。我是一名软件工程师，在工作中也遇到了很多类似情况的小伙伴。他们并不喜欢编程，却因为IT行业高额薪资而逼迫自己从事这个行业。\n\n同样地，他们也是痛苦的，如果你正好处在这样一个阶段，你应该可以感同身受。而如果你恰好做了自己喜欢的工作，你不妨试想一下，让你从事一份你并不喜欢的工作是什么滋味。\n\n拿身边的一些朋友举例，因为并不热爱编程，以至于在对话中很难听到他跟你讨论编程。平时也很少看到他在代码层面的产出，大多是朋友圈晒晒图，或者玩玩游戏，以至于编程技术始终在原地踏步。而一旦离开原有单位跳槽的时候，问题就来了。这类同学往往面临找工作困难的问题，部分同学甚至容易出现因为找工作而情绪低迷的问题。每次听到这类抱怨，我都不知道如何安慰他们。因为，这其实就是一个因果关系而已。你自己不努力，谁能帮你？\n\n有时候，我也劝他们，换一份工作吧，去做你真正喜欢的事业。结果你应该可以想见，耳朵是听进去了，行动却没有跟上。\n\n有人可能觉得，IT行业应该不好混，因为是技术活。这样的同学可以过得轻松自在吗？其实不然，在IT公司总有一部分同学可以独挑大梁，以至于复杂的工作他都可以帮你搞定。这部分同学就做一些“扫扫地、擦擦桌子”的工作就行了。日子不仅过得逍遥快活，还烙下个优秀员工的称号。\n\n不仅身边的同学和朋友是这样，我的妹妹也是如此。\n\n毕业后，她选择了在一所市里的普通小学教书。为了获得教师许可证，她几经磨难。如此艰难的求职过程，我以为她应该喜欢这份工作。可事实，却并非如此。\n\n一天我突然收到她发来的消息 “哥，学生们太不听话了，领导们还屡次刁难我。我决定，换个工作，我想去长沙，做点其他的事情，我不太适合当老师”。为此，我给她推荐了文员或者前台或者培训机构指导老师一类的工作。我以为，一年后我应该能看到她有所举动。可事实上，当我再次见到她的时候。很明显，她已经取消了这个计划。\n\n每年都有无数的人挣扎在痛苦工作的边缘，想要放弃吧，又害怕没有一技之长找不到工作。坚持吧，又如坐针毡、心如刀绞。看似面露微笑，其实心里在骂娘。早上起来先骂一遍自己傻逼，然后扭头坐上上班的地铁。\n\n![](http://upload-images.jianshu.io/upload_images/703764-90b90b0bacf0ea59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n我非常喜欢一句话：如果你觉得很难，那是因为你在走上坡路。人对于未知的事物都会充满恐惧，以至于迈出第一步往往是最艰难的。\n\n试想一下，如果让你每天早上8点起来慢跑一个小时，坚持1年，你能做到吗？毫无疑问，能够做到的人寥寥无几。事实上，这事并没有想象的那么困难。你不敢去做，只是因为你给自己预设了太多门槛，你害怕面对未知的事情。\n\n挖掘本性往往是一个痛苦的过程，可顺遂本性的安逸，永远不过是原地踏步、无所作为。\n\n有人说，有一种鸟生来就没有脚，以至于它必须不停地飞，才不至于摔死。其实，人生就是这样，停在树上休息，不如奋力往前飞，看到更美的风景。有人问我，你为什么可以坚持一直学习，你有什么动机。其实，我的动机很简单，我不想在我80岁的时候，当我的孙子问起我来的时候，我无话可说。人生多一点挫折，多一点磨难，没什么不好。\n\n其实，你仔细算一下，人生不过3万天而已。与其一直做着自己不喜欢的工作混混度日，还不如跳出来，勇敢去做自己擅长的事情。用1万天去摸索，1万天去热爱，最后的1万天用来安享晚年。\n\n余生可贵，请别再抱怨！是你自己选择了安逸，何必怪路途太遥远！\n\n**备注：文章并没有歧视任何职业的意思，请勿产生误解。**\n\n---\n我是欧阳锋，你中枪了吗？那还不点个赞 ~","source":"_posts/comprehensive article/是你自己选择了安逸，别怪路途太遥远.md","raw":"title: 是你自己选择了安逸，别怪路途太遥远\ndate: 2018/3/5 9:54\ncomments: true\ntags:\n- 2017\n- 总结\ncategories:\n- 随文杂记\n---\n\n![](http://upload-images.jianshu.io/upload_images/703764-84fac9ea75a54152.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>“老同学，我的工作好无聊，每天有大把的时间却不知道如何打发。我也不知道这个工作的意义在哪里？” 这是两年前我的一个高中同学给我发来的微信消息。一年后，我再次收到他发来的微信消息 “嘿，哥们！我到清远工作了”，“做运维了吗？”，“不是，还是公务员”，“.....” \n\n他是我的铁哥们，叫赵亦然。他在大学的主修专业是计算机，莫名其妙地做了公务员。现在在利用业余时间学习系统运维。他说，他想去考红帽子认证工程师。希望可以换个工作，并详细询问了我关于深圳系统运维工程师的一些事情。可是，正如你所见，一年后，一切照旧。工作依旧，抱怨依然。\n\n曾几何时，公务员已经成为了年轻人选择工作的第一标准，也成为了父母口中的金饭碗。而对于年轻人，选择公务员这个职业，大多都是出于无奈。当然，也不排除部分同学的确对从政有很大的兴趣。\n\n严格来讲，这个结论也许有失偏颇。但从我周围的情况来看，结果确实是这样。不信，问问你的公务员朋友，也许你也会得到下面这样一段对话。\n\nA：为什么你选择做公务员？\nB：大学的时候，没有目标，不知道自己喜欢什么，就想着考着试试看。没想到，真考上了，就一直做下来了...\n\n然而，很多同学在真正从事这个职业的时候就开始后悔，公务员机械式的工作方式让他们痛苦不堪。但一想到放弃，想到要放弃这安逸的工作，想到对未知的恐惧，马上就打消了这个念头。 \n\n公务员职业如此，软件行业也是如此。我是一名软件工程师，在工作中也遇到了很多类似情况的小伙伴。他们并不喜欢编程，却因为IT行业高额薪资而逼迫自己从事这个行业。\n\n同样地，他们也是痛苦的，如果你正好处在这样一个阶段，你应该可以感同身受。而如果你恰好做了自己喜欢的工作，你不妨试想一下，让你从事一份你并不喜欢的工作是什么滋味。\n\n拿身边的一些朋友举例，因为并不热爱编程，以至于在对话中很难听到他跟你讨论编程。平时也很少看到他在代码层面的产出，大多是朋友圈晒晒图，或者玩玩游戏，以至于编程技术始终在原地踏步。而一旦离开原有单位跳槽的时候，问题就来了。这类同学往往面临找工作困难的问题，部分同学甚至容易出现因为找工作而情绪低迷的问题。每次听到这类抱怨，我都不知道如何安慰他们。因为，这其实就是一个因果关系而已。你自己不努力，谁能帮你？\n\n有时候，我也劝他们，换一份工作吧，去做你真正喜欢的事业。结果你应该可以想见，耳朵是听进去了，行动却没有跟上。\n\n有人可能觉得，IT行业应该不好混，因为是技术活。这样的同学可以过得轻松自在吗？其实不然，在IT公司总有一部分同学可以独挑大梁，以至于复杂的工作他都可以帮你搞定。这部分同学就做一些“扫扫地、擦擦桌子”的工作就行了。日子不仅过得逍遥快活，还烙下个优秀员工的称号。\n\n不仅身边的同学和朋友是这样，我的妹妹也是如此。\n\n毕业后，她选择了在一所市里的普通小学教书。为了获得教师许可证，她几经磨难。如此艰难的求职过程，我以为她应该喜欢这份工作。可事实，却并非如此。\n\n一天我突然收到她发来的消息 “哥，学生们太不听话了，领导们还屡次刁难我。我决定，换个工作，我想去长沙，做点其他的事情，我不太适合当老师”。为此，我给她推荐了文员或者前台或者培训机构指导老师一类的工作。我以为，一年后我应该能看到她有所举动。可事实上，当我再次见到她的时候。很明显，她已经取消了这个计划。\n\n每年都有无数的人挣扎在痛苦工作的边缘，想要放弃吧，又害怕没有一技之长找不到工作。坚持吧，又如坐针毡、心如刀绞。看似面露微笑，其实心里在骂娘。早上起来先骂一遍自己傻逼，然后扭头坐上上班的地铁。\n\n![](http://upload-images.jianshu.io/upload_images/703764-90b90b0bacf0ea59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n我非常喜欢一句话：如果你觉得很难，那是因为你在走上坡路。人对于未知的事物都会充满恐惧，以至于迈出第一步往往是最艰难的。\n\n试想一下，如果让你每天早上8点起来慢跑一个小时，坚持1年，你能做到吗？毫无疑问，能够做到的人寥寥无几。事实上，这事并没有想象的那么困难。你不敢去做，只是因为你给自己预设了太多门槛，你害怕面对未知的事情。\n\n挖掘本性往往是一个痛苦的过程，可顺遂本性的安逸，永远不过是原地踏步、无所作为。\n\n有人说，有一种鸟生来就没有脚，以至于它必须不停地飞，才不至于摔死。其实，人生就是这样，停在树上休息，不如奋力往前飞，看到更美的风景。有人问我，你为什么可以坚持一直学习，你有什么动机。其实，我的动机很简单，我不想在我80岁的时候，当我的孙子问起我来的时候，我无话可说。人生多一点挫折，多一点磨难，没什么不好。\n\n其实，你仔细算一下，人生不过3万天而已。与其一直做着自己不喜欢的工作混混度日，还不如跳出来，勇敢去做自己擅长的事情。用1万天去摸索，1万天去热爱，最后的1万天用来安享晚年。\n\n余生可贵，请别再抱怨！是你自己选择了安逸，何必怪路途太遥远！\n\n**备注：文章并没有歧视任何职业的意思，请勿产生误解。**\n\n---\n我是欧阳锋，你中枪了吗？那还不点个赞 ~","slug":"comprehensive article/是你自己选择了安逸，别怪路途太遥远","published":1,"updated":"2019-04-28T12:39:23.521Z","_id":"cjv0x7uhr003ibkb4gq1njmjg","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-84fac9ea75a54152.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>“老同学，我的工作好无聊，每天有大把的时间却不知道如何打发。我也不知道这个工作的意义在哪里？” 这是两年前我的一个高中同学给我发来的微信消息。一年后，我再次收到他发来的微信消息 “嘿，哥们！我到清远工作了”，“做运维了吗？”，“不是，还是公务员”，“…..” </p>\n</blockquote>\n<p>他是我的铁哥们，叫赵亦然。他在大学的主修专业是计算机，莫名其妙地做了公务员。现在在利用业余时间学习系统运维。他说，他想去考红帽子认证工程师。希望可以换个工作，并详细询问了我关于深圳系统运维工程师的一些事情。可是，正如你所见，一年后，一切照旧。工作依旧，抱怨依然。</p>\n<p>曾几何时，公务员已经成为了年轻人选择工作的第一标准，也成为了父母口中的金饭碗。而对于年轻人，选择公务员这个职业，大多都是出于无奈。当然，也不排除部分同学的确对从政有很大的兴趣。</p>\n<p>严格来讲，这个结论也许有失偏颇。但从我周围的情况来看，结果确实是这样。不信，问问你的公务员朋友，也许你也会得到下面这样一段对话。</p>\n<p>A：为什么你选择做公务员？<br>B：大学的时候，没有目标，不知道自己喜欢什么，就想着考着试试看。没想到，真考上了，就一直做下来了…</p>\n<p>然而，很多同学在真正从事这个职业的时候就开始后悔，公务员机械式的工作方式让他们痛苦不堪。但一想到放弃，想到要放弃这安逸的工作，想到对未知的恐惧，马上就打消了这个念头。 </p>\n<p>公务员职业如此，软件行业也是如此。我是一名软件工程师，在工作中也遇到了很多类似情况的小伙伴。他们并不喜欢编程，却因为IT行业高额薪资而逼迫自己从事这个行业。</p>\n<p>同样地，他们也是痛苦的，如果你正好处在这样一个阶段，你应该可以感同身受。而如果你恰好做了自己喜欢的工作，你不妨试想一下，让你从事一份你并不喜欢的工作是什么滋味。</p>\n<p>拿身边的一些朋友举例，因为并不热爱编程，以至于在对话中很难听到他跟你讨论编程。平时也很少看到他在代码层面的产出，大多是朋友圈晒晒图，或者玩玩游戏，以至于编程技术始终在原地踏步。而一旦离开原有单位跳槽的时候，问题就来了。这类同学往往面临找工作困难的问题，部分同学甚至容易出现因为找工作而情绪低迷的问题。每次听到这类抱怨，我都不知道如何安慰他们。因为，这其实就是一个因果关系而已。你自己不努力，谁能帮你？</p>\n<p>有时候，我也劝他们，换一份工作吧，去做你真正喜欢的事业。结果你应该可以想见，耳朵是听进去了，行动却没有跟上。</p>\n<p>有人可能觉得，IT行业应该不好混，因为是技术活。这样的同学可以过得轻松自在吗？其实不然，在IT公司总有一部分同学可以独挑大梁，以至于复杂的工作他都可以帮你搞定。这部分同学就做一些“扫扫地、擦擦桌子”的工作就行了。日子不仅过得逍遥快活，还烙下个优秀员工的称号。</p>\n<p>不仅身边的同学和朋友是这样，我的妹妹也是如此。</p>\n<p>毕业后，她选择了在一所市里的普通小学教书。为了获得教师许可证，她几经磨难。如此艰难的求职过程，我以为她应该喜欢这份工作。可事实，却并非如此。</p>\n<p>一天我突然收到她发来的消息 “哥，学生们太不听话了，领导们还屡次刁难我。我决定，换个工作，我想去长沙，做点其他的事情，我不太适合当老师”。为此，我给她推荐了文员或者前台或者培训机构指导老师一类的工作。我以为，一年后我应该能看到她有所举动。可事实上，当我再次见到她的时候。很明显，她已经取消了这个计划。</p>\n<p>每年都有无数的人挣扎在痛苦工作的边缘，想要放弃吧，又害怕没有一技之长找不到工作。坚持吧，又如坐针毡、心如刀绞。看似面露微笑，其实心里在骂娘。早上起来先骂一遍自己傻逼，然后扭头坐上上班的地铁。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-90b90b0bacf0ea59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>我非常喜欢一句话：如果你觉得很难，那是因为你在走上坡路。人对于未知的事物都会充满恐惧，以至于迈出第一步往往是最艰难的。</p>\n<p>试想一下，如果让你每天早上8点起来慢跑一个小时，坚持1年，你能做到吗？毫无疑问，能够做到的人寥寥无几。事实上，这事并没有想象的那么困难。你不敢去做，只是因为你给自己预设了太多门槛，你害怕面对未知的事情。</p>\n<p>挖掘本性往往是一个痛苦的过程，可顺遂本性的安逸，永远不过是原地踏步、无所作为。</p>\n<p>有人说，有一种鸟生来就没有脚，以至于它必须不停地飞，才不至于摔死。其实，人生就是这样，停在树上休息，不如奋力往前飞，看到更美的风景。有人问我，你为什么可以坚持一直学习，你有什么动机。其实，我的动机很简单，我不想在我80岁的时候，当我的孙子问起我来的时候，我无话可说。人生多一点挫折，多一点磨难，没什么不好。</p>\n<p>其实，你仔细算一下，人生不过3万天而已。与其一直做着自己不喜欢的工作混混度日，还不如跳出来，勇敢去做自己擅长的事情。用1万天去摸索，1万天去热爱，最后的1万天用来安享晚年。</p>\n<p>余生可贵，请别再抱怨！是你自己选择了安逸，何必怪路途太遥远！</p>\n<p><strong>备注：文章并没有歧视任何职业的意思，请勿产生误解。</strong></p>\n<hr>\n<p>我是欧阳锋，你中枪了吗？那还不点个赞 ~</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-84fac9ea75a54152.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>“老同学，我的工作好无聊，每天有大把的时间却不知道如何打发。我也不知道这个工作的意义在哪里？” 这是两年前我的一个高中同学给我发来的微信消息。一年后，我再次收到他发来的微信消息 “嘿，哥们！我到清远工作了”，“做运维了吗？”，“不是，还是公务员”，“…..” </p>\n</blockquote>\n<p>他是我的铁哥们，叫赵亦然。他在大学的主修专业是计算机，莫名其妙地做了公务员。现在在利用业余时间学习系统运维。他说，他想去考红帽子认证工程师。希望可以换个工作，并详细询问了我关于深圳系统运维工程师的一些事情。可是，正如你所见，一年后，一切照旧。工作依旧，抱怨依然。</p>\n<p>曾几何时，公务员已经成为了年轻人选择工作的第一标准，也成为了父母口中的金饭碗。而对于年轻人，选择公务员这个职业，大多都是出于无奈。当然，也不排除部分同学的确对从政有很大的兴趣。</p>\n<p>严格来讲，这个结论也许有失偏颇。但从我周围的情况来看，结果确实是这样。不信，问问你的公务员朋友，也许你也会得到下面这样一段对话。</p>\n<p>A：为什么你选择做公务员？<br>B：大学的时候，没有目标，不知道自己喜欢什么，就想着考着试试看。没想到，真考上了，就一直做下来了…</p>\n<p>然而，很多同学在真正从事这个职业的时候就开始后悔，公务员机械式的工作方式让他们痛苦不堪。但一想到放弃，想到要放弃这安逸的工作，想到对未知的恐惧，马上就打消了这个念头。 </p>\n<p>公务员职业如此，软件行业也是如此。我是一名软件工程师，在工作中也遇到了很多类似情况的小伙伴。他们并不喜欢编程，却因为IT行业高额薪资而逼迫自己从事这个行业。</p>\n<p>同样地，他们也是痛苦的，如果你正好处在这样一个阶段，你应该可以感同身受。而如果你恰好做了自己喜欢的工作，你不妨试想一下，让你从事一份你并不喜欢的工作是什么滋味。</p>\n<p>拿身边的一些朋友举例，因为并不热爱编程，以至于在对话中很难听到他跟你讨论编程。平时也很少看到他在代码层面的产出，大多是朋友圈晒晒图，或者玩玩游戏，以至于编程技术始终在原地踏步。而一旦离开原有单位跳槽的时候，问题就来了。这类同学往往面临找工作困难的问题，部分同学甚至容易出现因为找工作而情绪低迷的问题。每次听到这类抱怨，我都不知道如何安慰他们。因为，这其实就是一个因果关系而已。你自己不努力，谁能帮你？</p>\n<p>有时候，我也劝他们，换一份工作吧，去做你真正喜欢的事业。结果你应该可以想见，耳朵是听进去了，行动却没有跟上。</p>\n<p>有人可能觉得，IT行业应该不好混，因为是技术活。这样的同学可以过得轻松自在吗？其实不然，在IT公司总有一部分同学可以独挑大梁，以至于复杂的工作他都可以帮你搞定。这部分同学就做一些“扫扫地、擦擦桌子”的工作就行了。日子不仅过得逍遥快活，还烙下个优秀员工的称号。</p>\n<p>不仅身边的同学和朋友是这样，我的妹妹也是如此。</p>\n<p>毕业后，她选择了在一所市里的普通小学教书。为了获得教师许可证，她几经磨难。如此艰难的求职过程，我以为她应该喜欢这份工作。可事实，却并非如此。</p>\n<p>一天我突然收到她发来的消息 “哥，学生们太不听话了，领导们还屡次刁难我。我决定，换个工作，我想去长沙，做点其他的事情，我不太适合当老师”。为此，我给她推荐了文员或者前台或者培训机构指导老师一类的工作。我以为，一年后我应该能看到她有所举动。可事实上，当我再次见到她的时候。很明显，她已经取消了这个计划。</p>\n<p>每年都有无数的人挣扎在痛苦工作的边缘，想要放弃吧，又害怕没有一技之长找不到工作。坚持吧，又如坐针毡、心如刀绞。看似面露微笑，其实心里在骂娘。早上起来先骂一遍自己傻逼，然后扭头坐上上班的地铁。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-90b90b0bacf0ea59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>我非常喜欢一句话：如果你觉得很难，那是因为你在走上坡路。人对于未知的事物都会充满恐惧，以至于迈出第一步往往是最艰难的。</p>\n<p>试想一下，如果让你每天早上8点起来慢跑一个小时，坚持1年，你能做到吗？毫无疑问，能够做到的人寥寥无几。事实上，这事并没有想象的那么困难。你不敢去做，只是因为你给自己预设了太多门槛，你害怕面对未知的事情。</p>\n<p>挖掘本性往往是一个痛苦的过程，可顺遂本性的安逸，永远不过是原地踏步、无所作为。</p>\n<p>有人说，有一种鸟生来就没有脚，以至于它必须不停地飞，才不至于摔死。其实，人生就是这样，停在树上休息，不如奋力往前飞，看到更美的风景。有人问我，你为什么可以坚持一直学习，你有什么动机。其实，我的动机很简单，我不想在我80岁的时候，当我的孙子问起我来的时候，我无话可说。人生多一点挫折，多一点磨难，没什么不好。</p>\n<p>其实，你仔细算一下，人生不过3万天而已。与其一直做着自己不喜欢的工作混混度日，还不如跳出来，勇敢去做自己擅长的事情。用1万天去摸索，1万天去热爱，最后的1万天用来安享晚年。</p>\n<p>余生可贵，请别再抱怨！是你自己选择了安逸，何必怪路途太遥远！</p>\n<p><strong>备注：文章并没有歧视任何职业的意思，请勿产生误解。</strong></p>\n<hr>\n<p>我是欧阳锋，你中枪了吗？那还不点个赞 ~</p>\n"},{"title":"最完整的Markdown基础教程","date":"2018-04-18T06:13:00.000Z","comments":1,"_content":"\n>提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。Markdown是由一个叫 [ JOHN GRUBER](https://daringfireball.net/) 的哥们发明的，它的语法用一篇文章就可以说完。不相信吗？让我们来试试看...\n\n# 基础语法\n### 标题\nMarkdown支持6种级别的标题，对应html标签 **h1 ~ h6**\n\n```\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n```\n\n以上标记效果如下：\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\n除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 [Setext](http://docutils.sourceforge.net/mirror/setext.html) 标记语言的表现形式，使用下划线进行文本大小的控制\n\n```\n这是一级标题\n===\n这是二级标题\n---\n```\n\n使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。遗憾的是，简书并不支持这种语法。因此，我们用一张图来展示效果：\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959375a6f?w=830&h=240&f=png&s=23820)\n这种处理方式在Github的一些开源工程上面比较常见，显而易见的缺点是：文字大小控制级别有限。\n\n### 段落及区块引用\n需要记住的是，Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。\n\n而另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号\\>用于段首进行强调，被强调的文字部分将会高亮显示\n\n```\n> 这段文字将被高亮显示...\n```\n\n以上标记显示效果如下：\n> 这段文字将被高亮显示...\n\n### 插入链接或图片\nMarkdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记\n```\n[点击跳转至百度](http://www.baidu.com)\n![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&h=703&f=jpeg&s=56927)\n```\n\n以上标记显示效果如下：\n\n[点击跳转至百度](http://www.baidu.com)\n![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&h=703&f=jpeg&s=56927)\n\n注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。\n\n### 列表\nMarkdown支持有序列表和无序列表两种形式：\n* 无序列表使用\\*或\\+或\\-标识\n* 有序列表使用数字加\\.标识，例如：1\\.\n\n```\n* 黄瓜\n* 玉米\n* 茄子\n\n+ 黄瓜\n+ 玉米\n+ 茄子\n\n- 黄瓜\n- 玉米\n- 茄子\n\n1. 黄瓜\n2. 玉米\n3. 茄子\n```\n\n以上标记显示效果如下：\n* 黄瓜\n* 玉米\n* 茄子\n\n+ 黄瓜\n+ 玉米\n+ 茄子\n\n- 黄瓜\n- 玉米\n- 茄子\n\n1. 黄瓜\n2. 玉米\n3. 茄子\n\n注：这里比较有趣的地方是，对于有序列表，Markdown将只关注你的第一个项目的数字编号。例如：如果第一个项目编号是3，以此类推，第二个项目应该是4，最终将显示为3、4、5。而如果你指定了第一个编号，后面的编号指定错误也没有关系，Markdown将只在乎你的第一个项目编号。\n\n### 使用列表的一些注意事项\n如果在单一列表项中包含了多个段落，为了保证渲染正常，\\*与段落首字母之间必须保留四个空格\n\n```\n*    段落一\n\n     小段一\n*    段落二\n\n     小段二\n```\n\n以上标记显示效果如下：\n*    段落一\n\n     小段一\n*    段落二\n\n      小段二\n\n另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格\n\n```\n* 段落一\n    > 区块标记一\n* 段落二\n    > 区块标记二\n```\n\n* 段落一\n    > 区块标记一\n* 段落二\n    > 区块标记二\n\n注：记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。\n\n### 分隔线\n有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以\n\n```\n***\n---\n```\n\n***\n---------------------------------------\n\n产生分隔线的语法要求比较松，符号之间添加空格也可以。\n\n### 强调\n有时候，我们希望对某一部分文字进行强调，使用\\*或\\_包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗\n\n```\n*这里是斜体*\n_这里是斜体_\n\n**这里是加粗**\n__这里是加粗__\n```\n\n*这里是斜体*\n_这里是斜体_\n\n**这里是加粗**\n__这里是加粗__\n\n# 高级用法\n### 插入代码块\nMarkdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。\n\n方法是，使用反引号`进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹\n\n这是一段`var x = 3`行内代码\n\n如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果：\n\n```\nfun (x: Int, y: Int): Int {\n  return x + y\n}\n```\n\n注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。\n\n### 插入表格\n表格是Markdown语法中比较复杂的一个，其语法如下：\n\n```\n表头|条目一|条目二\n:---:|:---:|:---:\n项目|项目一|项目二\n```\n\n以上标记显示效果如下：\n\n表头|条目一|条目二\n:---:|:---:|:---:\n项目|项目一|项目二\n\n注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。\n\n# 其它\n### 特殊符号处理\nMarkdown使用反斜杠\\\\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：\n\n```\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n    \n例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\\\\\\ =\\> \\\\ 。\n\n注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。\n\n### 如何给文字上色\n使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：\n1. 先用Markdown编辑完成\n2. 导出为html，在需要上色的部分手动添加标签`<font color='#ff0000'></font>`保存即可。\n\n### Markdown软件推荐\n如果你是一个Mac用户，我推荐你使用开源的 [MacDown](http://macdown.uranusjr.com/)：\n![Macdown](https://user-gold-cdn.xitu.io/2018/4/18/162d75d95959514c?w=1240&h=706&f=png&s=290836)\n\n如果你愿意花钱的话，一些收费产品其实更好。例如：Byword，Ulysses，Typora等等都很不错。\n\n日常使用，我就用Macdown。写书，我就用Ulysses。\n\n# 简单总结\nMarkdown是一门比html更简单的标记语言，其主要用于日常写作。最终通过相应的编辑器或者脚本转换成html用于页面渲染。如果你是一个作家，或者是一个程序员，Markdown对你来说是一门必备的技能。掌握Markdown真的很简单，如你所见，这篇文章使用了这么短的篇幅就已经将Markdown的语法全部介绍完了。\n\n不过，由于Markdown基础语法的限制，出现了一些针对Markdown语法的加强版本。它支持的语法特性更多，但这不是我们这篇文章的讨论范围。如果你希望快速掌握Markdown，很简单，动起来吧！\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","source":"_posts/it tips/最完整的Markdown基础教程.md","raw":"title: 最完整的Markdown基础教程\ndate: 2018/04/18 14:13\ncomments: true\ntags:\n- Markdown\ncategories:\n- IT小知识\n---\n\n>提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。Markdown是由一个叫 [ JOHN GRUBER](https://daringfireball.net/) 的哥们发明的，它的语法用一篇文章就可以说完。不相信吗？让我们来试试看...\n\n# 基础语法\n### 标题\nMarkdown支持6种级别的标题，对应html标签 **h1 ~ h6**\n\n```\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n```\n\n以上标记效果如下：\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\n除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 [Setext](http://docutils.sourceforge.net/mirror/setext.html) 标记语言的表现形式，使用下划线进行文本大小的控制\n\n```\n这是一级标题\n===\n这是二级标题\n---\n```\n\n使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。遗憾的是，简书并不支持这种语法。因此，我们用一张图来展示效果：\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959375a6f?w=830&h=240&f=png&s=23820)\n这种处理方式在Github的一些开源工程上面比较常见，显而易见的缺点是：文字大小控制级别有限。\n\n### 段落及区块引用\n需要记住的是，Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。\n\n而另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号\\>用于段首进行强调，被强调的文字部分将会高亮显示\n\n```\n> 这段文字将被高亮显示...\n```\n\n以上标记显示效果如下：\n> 这段文字将被高亮显示...\n\n### 插入链接或图片\nMarkdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记\n```\n[点击跳转至百度](http://www.baidu.com)\n![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&h=703&f=jpeg&s=56927)\n```\n\n以上标记显示效果如下：\n\n[点击跳转至百度](http://www.baidu.com)\n![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&h=703&f=jpeg&s=56927)\n\n注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。\n\n### 列表\nMarkdown支持有序列表和无序列表两种形式：\n* 无序列表使用\\*或\\+或\\-标识\n* 有序列表使用数字加\\.标识，例如：1\\.\n\n```\n* 黄瓜\n* 玉米\n* 茄子\n\n+ 黄瓜\n+ 玉米\n+ 茄子\n\n- 黄瓜\n- 玉米\n- 茄子\n\n1. 黄瓜\n2. 玉米\n3. 茄子\n```\n\n以上标记显示效果如下：\n* 黄瓜\n* 玉米\n* 茄子\n\n+ 黄瓜\n+ 玉米\n+ 茄子\n\n- 黄瓜\n- 玉米\n- 茄子\n\n1. 黄瓜\n2. 玉米\n3. 茄子\n\n注：这里比较有趣的地方是，对于有序列表，Markdown将只关注你的第一个项目的数字编号。例如：如果第一个项目编号是3，以此类推，第二个项目应该是4，最终将显示为3、4、5。而如果你指定了第一个编号，后面的编号指定错误也没有关系，Markdown将只在乎你的第一个项目编号。\n\n### 使用列表的一些注意事项\n如果在单一列表项中包含了多个段落，为了保证渲染正常，\\*与段落首字母之间必须保留四个空格\n\n```\n*    段落一\n\n     小段一\n*    段落二\n\n     小段二\n```\n\n以上标记显示效果如下：\n*    段落一\n\n     小段一\n*    段落二\n\n      小段二\n\n另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格\n\n```\n* 段落一\n    > 区块标记一\n* 段落二\n    > 区块标记二\n```\n\n* 段落一\n    > 区块标记一\n* 段落二\n    > 区块标记二\n\n注：记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。\n\n### 分隔线\n有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以\n\n```\n***\n---\n```\n\n***\n---------------------------------------\n\n产生分隔线的语法要求比较松，符号之间添加空格也可以。\n\n### 强调\n有时候，我们希望对某一部分文字进行强调，使用\\*或\\_包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗\n\n```\n*这里是斜体*\n_这里是斜体_\n\n**这里是加粗**\n__这里是加粗__\n```\n\n*这里是斜体*\n_这里是斜体_\n\n**这里是加粗**\n__这里是加粗__\n\n# 高级用法\n### 插入代码块\nMarkdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。\n\n方法是，使用反引号`进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹\n\n这是一段`var x = 3`行内代码\n\n如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果：\n\n```\nfun (x: Int, y: Int): Int {\n  return x + y\n}\n```\n\n注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。\n\n### 插入表格\n表格是Markdown语法中比较复杂的一个，其语法如下：\n\n```\n表头|条目一|条目二\n:---:|:---:|:---:\n项目|项目一|项目二\n```\n\n以上标记显示效果如下：\n\n表头|条目一|条目二\n:---:|:---:|:---:\n项目|项目一|项目二\n\n注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。\n\n# 其它\n### 特殊符号处理\nMarkdown使用反斜杠\\\\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：\n\n```\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n    \n例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\\\\\\ =\\> \\\\ 。\n\n注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。\n\n### 如何给文字上色\n使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：\n1. 先用Markdown编辑完成\n2. 导出为html，在需要上色的部分手动添加标签`<font color='#ff0000'></font>`保存即可。\n\n### Markdown软件推荐\n如果你是一个Mac用户，我推荐你使用开源的 [MacDown](http://macdown.uranusjr.com/)：\n![Macdown](https://user-gold-cdn.xitu.io/2018/4/18/162d75d95959514c?w=1240&h=706&f=png&s=290836)\n\n如果你愿意花钱的话，一些收费产品其实更好。例如：Byword，Ulysses，Typora等等都很不错。\n\n日常使用，我就用Macdown。写书，我就用Ulysses。\n\n# 简单总结\nMarkdown是一门比html更简单的标记语言，其主要用于日常写作。最终通过相应的编辑器或者脚本转换成html用于页面渲染。如果你是一个作家，或者是一个程序员，Markdown对你来说是一门必备的技能。掌握Markdown真的很简单，如你所见，这篇文章使用了这么短的篇幅就已经将Markdown的语法全部介绍完了。\n\n不过，由于Markdown基础语法的限制，出现了一些针对Markdown语法的加强版本。它支持的语法特性更多，但这不是我们这篇文章的讨论范围。如果你希望快速掌握Markdown，很简单，动起来吧！\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","slug":"it tips/最完整的Markdown基础教程","published":1,"updated":"2019-04-28T12:39:23.523Z","_id":"cjv0x7uht003kbkb41qdlp9m0","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。Markdown是由一个叫 <a href=\"https://daringfireball.net/\" target=\"_blank\" rel=\"noopener\"> JOHN GRUBER</a> 的哥们发明的，它的语法用一篇文章就可以说完。不相信吗？让我们来试试看…</p>\n</blockquote>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>Markdown支持6种级别的标题，对应html标签 <strong>h1 ~ h6</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># h1</span><br><span class=\"line\">## h2</span><br><span class=\"line\">### h3</span><br><span class=\"line\">#### h4</span><br><span class=\"line\">##### h5</span><br><span class=\"line\">###### h6</span><br></pre></td></tr></table></figure>\n<p>以上标记效果如下：</p>\n<h1 id=\"h1\"><a href=\"#h1\" class=\"headerlink\" title=\"h1\"></a>h1</h1><h2 id=\"h2\"><a href=\"#h2\" class=\"headerlink\" title=\"h2\"></a>h2</h2><h3 id=\"h3\"><a href=\"#h3\" class=\"headerlink\" title=\"h3\"></a>h3</h3><h4 id=\"h4\"><a href=\"#h4\" class=\"headerlink\" title=\"h4\"></a>h4</h4><h5 id=\"h5\"><a href=\"#h5\" class=\"headerlink\" title=\"h5\"></a>h5</h5><h6 id=\"h6\"><a href=\"#h6\" class=\"headerlink\" title=\"h6\"></a>h6</h6><p>除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 <a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"noopener\">Setext</a> 标记语言的表现形式，使用下划线进行文本大小的控制</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一级标题</span><br><span class=\"line\">===</span><br><span class=\"line\">这是二级标题</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。遗憾的是，简书并不支持这种语法。因此，我们用一张图来展示效果：<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d959375a6f?w=830&amp;h=240&amp;f=png&amp;s=23820\" alt=\"\"><br>这种处理方式在Github的一些开源工程上面比较常见，显而易见的缺点是：文字大小控制级别有限。</p>\n<h3 id=\"段落及区块引用\"><a href=\"#段落及区块引用\" class=\"headerlink\" title=\"段落及区块引用\"></a>段落及区块引用</h3><p>需要记住的是，Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。</p>\n<p>而另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号>用于段首进行强调，被强调的文字部分将会高亮显示</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这段文字将被高亮显示...</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<blockquote>\n<p>这段文字将被高亮显示…</p>\n</blockquote>\n<h3 id=\"插入链接或图片\"><a href=\"#插入链接或图片\" class=\"headerlink\" title=\"插入链接或图片\"></a>插入链接或图片</h3><p>Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[点击跳转至百度](http://www.baidu.com)</span><br><span class=\"line\">![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927)</span><br></pre></td></tr></table></figure></p>\n<p>以上标记显示效果如下：</p>\n<p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">点击跳转至百度</a><br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927\" alt=\"图片\"></p>\n<p>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>Markdown支持有序列表和无序列表两种形式：</p>\n<ul>\n<li>无序列表使用*或+或-标识</li>\n<li>有序列表使用数字加.标识，例如：1.</li>\n</ul>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 黄瓜</span><br><span class=\"line\">* 玉米</span><br><span class=\"line\">* 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">+ 黄瓜</span><br><span class=\"line\">+ 玉米</span><br><span class=\"line\">+ 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">- 黄瓜</span><br><span class=\"line\">- 玉米</span><br><span class=\"line\">- 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">1. 黄瓜</span><br><span class=\"line\">2. 玉米</span><br><span class=\"line\">3. 茄子</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ol>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ol>\n<p>注：这里比较有趣的地方是，对于有序列表，Markdown将只关注你的第一个项目的数字编号。例如：如果第一个项目编号是3，以此类推，第二个项目应该是4，最终将显示为3、4、5。而如果你指定了第一个编号，后面的编号指定错误也没有关系，Markdown将只在乎你的第一个项目编号。</p>\n<h3 id=\"使用列表的一些注意事项\"><a href=\"#使用列表的一些注意事项\" class=\"headerlink\" title=\"使用列表的一些注意事项\"></a>使用列表的一些注意事项</h3><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*    段落一</span><br><span class=\"line\"></span><br><span class=\"line\">     小段一</span><br><span class=\"line\">*    段落二</span><br><span class=\"line\"></span><br><span class=\"line\">     小段二</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<ul>\n<li><p>段落一</p>\n<p>小段一</p>\n</li>\n<li><p>段落二</p>\n<p> 小段二</p>\n</li>\n</ul>\n<p>另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 段落一</span><br><span class=\"line\">    &gt; 区块标记一</span><br><span class=\"line\">* 段落二</span><br><span class=\"line\">    &gt; 区块标记二</span><br></pre></td></tr></table></figure>\n<ul>\n<li>段落一<blockquote>\n<p>区块标记一</p>\n</blockquote>\n</li>\n<li>段落二<blockquote>\n<p>区块标记二</p>\n</blockquote>\n</li>\n</ul>\n<p>注：记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。</p>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"*\"></a><em>*</em></h2><p>产生分隔线的语法要求比较松，符号之间添加空格也可以。</p>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>有时候，我们希望对某一部分文字进行强调，使用*或_包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*这里是斜体*</span><br><span class=\"line\">_这里是斜体_</span><br><span class=\"line\"></span><br><span class=\"line\">**这里是加粗**</span><br><span class=\"line\">__这里是加粗__</span><br></pre></td></tr></table></figure>\n<p><em>这里是斜体</em><br><em>这里是斜体</em></p>\n<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>\n<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h3 id=\"插入代码块\"><a href=\"#插入代码块\" class=\"headerlink\" title=\"插入代码块\"></a>插入代码块</h3><p>Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。</p>\n<p>方法是，使用反引号`进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p>\n<p>这是一段<code>var x = 3</code>行内代码</p>\n<p>如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun (x: Int, y: Int): Int &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。</p>\n<h3 id=\"插入表格\"><a href=\"#插入表格\" class=\"headerlink\" title=\"插入表格\"></a>插入表格</h3><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头|条目一|条目二</span><br><span class=\"line\">:---:|:---:|:---:</span><br><span class=\"line\">项目|项目一|项目二</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">条目一</th>\n<th style=\"text-align:center\">条目二</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">项目</td>\n<td style=\"text-align:center\">项目一</td>\n<td style=\"text-align:center\">项目二</td>\n</tr>\n</tbody>\n</table>\n<p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><h3 id=\"特殊符号处理\"><a href=\"#特殊符号处理\" class=\"headerlink\" title=\"特殊符号处理\"></a>特殊符号处理</h3><p>Markdown使用反斜杠\\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\">*   星号</span><br><span class=\"line\">_   底线</span><br><span class=\"line\">&#123;&#125;  花括号</span><br><span class=\"line\">[]  方括号</span><br><span class=\"line\">()  括弧</span><br><span class=\"line\">#   井字号</span><br><span class=\"line\">+   加号</span><br><span class=\"line\">-   减号</span><br><span class=\"line\">.   英文句点</span><br><span class=\"line\">!   惊叹号</span><br></pre></td></tr></table></figure>\n<p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\\\\ => \\ 。</p>\n<p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p>\n<h3 id=\"如何给文字上色\"><a href=\"#如何给文字上色\" class=\"headerlink\" title=\"如何给文字上色\"></a>如何给文字上色</h3><p>使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：</p>\n<ol>\n<li>先用Markdown编辑完成</li>\n<li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color=&#39;#ff0000&#39;&gt;&lt;/font&gt;</code>保存即可。</li>\n</ol>\n<h3 id=\"Markdown软件推荐\"><a href=\"#Markdown软件推荐\" class=\"headerlink\" title=\"Markdown软件推荐\"></a>Markdown软件推荐</h3><p>如果你是一个Mac用户，我推荐你使用开源的 <a href=\"http://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">MacDown</a>：<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d95959514c?w=1240&amp;h=706&amp;f=png&amp;s=290836\" alt=\"Macdown\"></p>\n<p>如果你愿意花钱的话，一些收费产品其实更好。例如：Byword，Ulysses，Typora等等都很不错。</p>\n<p>日常使用，我就用Macdown。写书，我就用Ulysses。</p>\n<h1 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h1><p>Markdown是一门比html更简单的标记语言，其主要用于日常写作。最终通过相应的编辑器或者脚本转换成html用于页面渲染。如果你是一个作家，或者是一个程序员，Markdown对你来说是一门必备的技能。掌握Markdown真的很简单，如你所见，这篇文章使用了这么短的篇幅就已经将Markdown的语法全部介绍完了。</p>\n<p>不过，由于Markdown基础语法的限制，出现了一些针对Markdown语法的加强版本。它支持的语法特性更多，但这不是我们这篇文章的讨论范围。如果你希望快速掌握Markdown，很简单，动起来吧！</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。Markdown是由一个叫 <a href=\"https://daringfireball.net/\" target=\"_blank\" rel=\"noopener\"> JOHN GRUBER</a> 的哥们发明的，它的语法用一篇文章就可以说完。不相信吗？让我们来试试看…</p>\n</blockquote>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>Markdown支持6种级别的标题，对应html标签 <strong>h1 ~ h6</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># h1</span><br><span class=\"line\">## h2</span><br><span class=\"line\">### h3</span><br><span class=\"line\">#### h4</span><br><span class=\"line\">##### h5</span><br><span class=\"line\">###### h6</span><br></pre></td></tr></table></figure>\n<p>以上标记效果如下：</p>\n<h1 id=\"h1\"><a href=\"#h1\" class=\"headerlink\" title=\"h1\"></a>h1</h1><h2 id=\"h2\"><a href=\"#h2\" class=\"headerlink\" title=\"h2\"></a>h2</h2><h3 id=\"h3\"><a href=\"#h3\" class=\"headerlink\" title=\"h3\"></a>h3</h3><h4 id=\"h4\"><a href=\"#h4\" class=\"headerlink\" title=\"h4\"></a>h4</h4><h5 id=\"h5\"><a href=\"#h5\" class=\"headerlink\" title=\"h5\"></a>h5</h5><h6 id=\"h6\"><a href=\"#h6\" class=\"headerlink\" title=\"h6\"></a>h6</h6><p>除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 <a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"noopener\">Setext</a> 标记语言的表现形式，使用下划线进行文本大小的控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一级标题</span><br><span class=\"line\">===</span><br><span class=\"line\">这是二级标题</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。遗憾的是，简书并不支持这种语法。因此，我们用一张图来展示效果：<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d959375a6f?w=830&amp;h=240&amp;f=png&amp;s=23820\" alt=\"\"><br>这种处理方式在Github的一些开源工程上面比较常见，显而易见的缺点是：文字大小控制级别有限。</p>\n<h3 id=\"段落及区块引用\"><a href=\"#段落及区块引用\" class=\"headerlink\" title=\"段落及区块引用\"></a>段落及区块引用</h3><p>需要记住的是，Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。</p>\n<p>而另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号>用于段首进行强调，被强调的文字部分将会高亮显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这段文字将被高亮显示...</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<blockquote>\n<p>这段文字将被高亮显示…</p>\n</blockquote>\n<h3 id=\"插入链接或图片\"><a href=\"#插入链接或图片\" class=\"headerlink\" title=\"插入链接或图片\"></a>插入链接或图片</h3><p>Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[点击跳转至百度](http://www.baidu.com)</span><br><span class=\"line\">![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927)</span><br></pre></td></tr></table></figure></p>\n<p>以上标记显示效果如下：</p>\n<p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">点击跳转至百度</a><br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927\" alt=\"图片\"></p>\n<p>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>Markdown支持有序列表和无序列表两种形式：</p>\n<ul>\n<li>无序列表使用*或+或-标识</li>\n<li>有序列表使用数字加.标识，例如：1.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 黄瓜</span><br><span class=\"line\">* 玉米</span><br><span class=\"line\">* 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">+ 黄瓜</span><br><span class=\"line\">+ 玉米</span><br><span class=\"line\">+ 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">- 黄瓜</span><br><span class=\"line\">- 玉米</span><br><span class=\"line\">- 茄子</span><br><span class=\"line\"></span><br><span class=\"line\">1. 黄瓜</span><br><span class=\"line\">2. 玉米</span><br><span class=\"line\">3. 茄子</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ul>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ul>\n<ol>\n<li>黄瓜</li>\n<li>玉米</li>\n<li>茄子</li>\n</ol>\n<p>注：这里比较有趣的地方是，对于有序列表，Markdown将只关注你的第一个项目的数字编号。例如：如果第一个项目编号是3，以此类推，第二个项目应该是4，最终将显示为3、4、5。而如果你指定了第一个编号，后面的编号指定错误也没有关系，Markdown将只在乎你的第一个项目编号。</p>\n<h3 id=\"使用列表的一些注意事项\"><a href=\"#使用列表的一些注意事项\" class=\"headerlink\" title=\"使用列表的一些注意事项\"></a>使用列表的一些注意事项</h3><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*    段落一</span><br><span class=\"line\"></span><br><span class=\"line\">     小段一</span><br><span class=\"line\">*    段落二</span><br><span class=\"line\"></span><br><span class=\"line\">     小段二</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<ul>\n<li><p>段落一</p>\n<p>小段一</p>\n</li>\n<li><p>段落二</p>\n<p> 小段二</p>\n</li>\n</ul>\n<p>另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 段落一</span><br><span class=\"line\">    &gt; 区块标记一</span><br><span class=\"line\">* 段落二</span><br><span class=\"line\">    &gt; 区块标记二</span><br></pre></td></tr></table></figure>\n<ul>\n<li>段落一<blockquote>\n<p>区块标记一</p>\n</blockquote>\n</li>\n<li>段落二<blockquote>\n<p>区块标记二</p>\n</blockquote>\n</li>\n</ul>\n<p>注：记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。</p>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"*\"></a><em>*</em></h2><p>产生分隔线的语法要求比较松，符号之间添加空格也可以。</p>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>有时候，我们希望对某一部分文字进行强调，使用*或_包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*这里是斜体*</span><br><span class=\"line\">_这里是斜体_</span><br><span class=\"line\"></span><br><span class=\"line\">**这里是加粗**</span><br><span class=\"line\">__这里是加粗__</span><br></pre></td></tr></table></figure>\n<p><em>这里是斜体</em><br><em>这里是斜体</em></p>\n<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>\n<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h3 id=\"插入代码块\"><a href=\"#插入代码块\" class=\"headerlink\" title=\"插入代码块\"></a>插入代码块</h3><p>Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。</p>\n<p>方法是，使用反引号`进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p>\n<p>这是一段<code>var x = 3</code>行内代码</p>\n<p>如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun (x: Int, y: Int): Int &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。</p>\n<h3 id=\"插入表格\"><a href=\"#插入表格\" class=\"headerlink\" title=\"插入表格\"></a>插入表格</h3><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头|条目一|条目二</span><br><span class=\"line\">:---:|:---:|:---:</span><br><span class=\"line\">项目|项目一|项目二</span><br></pre></td></tr></table></figure>\n<p>以上标记显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:center\">条目一</th>\n<th style=\"text-align:center\">条目二</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">项目</td>\n<td style=\"text-align:center\">项目一</td>\n<td style=\"text-align:center\">项目二</td>\n</tr>\n</tbody>\n</table>\n<p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><h3 id=\"特殊符号处理\"><a href=\"#特殊符号处理\" class=\"headerlink\" title=\"特殊符号处理\"></a>特殊符号处理</h3><p>Markdown使用反斜杠\\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\">*   星号</span><br><span class=\"line\">_   底线</span><br><span class=\"line\">&#123;&#125;  花括号</span><br><span class=\"line\">[]  方括号</span><br><span class=\"line\">()  括弧</span><br><span class=\"line\">#   井字号</span><br><span class=\"line\">+   加号</span><br><span class=\"line\">-   减号</span><br><span class=\"line\">.   英文句点</span><br><span class=\"line\">!   惊叹号</span><br></pre></td></tr></table></figure>\n<p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\\\\ => \\ 。</p>\n<p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p>\n<h3 id=\"如何给文字上色\"><a href=\"#如何给文字上色\" class=\"headerlink\" title=\"如何给文字上色\"></a>如何给文字上色</h3><p>使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：</p>\n<ol>\n<li>先用Markdown编辑完成</li>\n<li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color=&#39;#ff0000&#39;&gt;&lt;/font&gt;</code>保存即可。</li>\n</ol>\n<h3 id=\"Markdown软件推荐\"><a href=\"#Markdown软件推荐\" class=\"headerlink\" title=\"Markdown软件推荐\"></a>Markdown软件推荐</h3><p>如果你是一个Mac用户，我推荐你使用开源的 <a href=\"http://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">MacDown</a>：<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d75d95959514c?w=1240&amp;h=706&amp;f=png&amp;s=290836\" alt=\"Macdown\"></p>\n<p>如果你愿意花钱的话，一些收费产品其实更好。例如：Byword，Ulysses，Typora等等都很不错。</p>\n<p>日常使用，我就用Macdown。写书，我就用Ulysses。</p>\n<h1 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h1><p>Markdown是一门比html更简单的标记语言，其主要用于日常写作。最终通过相应的编辑器或者脚本转换成html用于页面渲染。如果你是一个作家，或者是一个程序员，Markdown对你来说是一门必备的技能。掌握Markdown真的很简单，如你所见，这篇文章使用了这么短的篇幅就已经将Markdown的语法全部介绍完了。</p>\n<p>不过，由于Markdown基础语法的限制，出现了一些针对Markdown语法的加强版本。它支持的语法特性更多，但这不是我们这篇文章的讨论范围。如果你希望快速掌握Markdown，很简单，动起来吧！</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"2018最新Kotlin基础视频教程上线了","date":"2018-07-09T07:02:00.000Z","comments":1,"_content":"\n从5月份开始制作这个视频，历时两个多月，终于在网易云课堂与大家见面了...\n\n![](https://user-gold-cdn.xitu.io/2018/7/9/1647d0644608714d)\n\n### 视频特色\n* 在前期课程中，使用普通编辑器进行编码，治疗你的IDE依赖症\n* 所有课程均使用live coding的方式授课，保持与你的频率一致\n* 每节课程课后都准备了相应的习题供大家巩固练习\n* 课程覆盖面广，线下效果持续跟踪\n* 项目实战部分是一个非常有意思的小项目，使用控制台完成类QQ聊天室功能（支持文字消息、文件发送、文件下载等功能）\n\n\n### 课程目录\n* Kotlin基础环境配置、变量与空值安全\n* 一等公民函数基础语法\n* 高阶函数、lambda表达式与匿名函数\n* 面向对象知识点（类、接口、继承、扩展等）\n* Kotlin语言中多样的class类型、对象以及枚举\n* 强大的集合与控制流处理\n* 操作符重载\n* 更安全的泛型处理\n* 代理模式及其应用\n* 协程简介\n* 析构、注解与异常处理\n* Kotlin与Java互通的那些事儿\n* 控制台版本QQ聊天室项目实战\n\n\n### 一些感想\n这是我第一次真正尝试录制视频教程，种种原因，导致整个视频的录制、剪辑加发布审核一共花掉了两个多月，将近三个月。而且还是离职在家，全职的情况下。\n\n即便如此，事实上，这个视频依然没有达到我的要求。但我想，第一次永远是青涩的，想要一步到位永远不过是痴人说梦。我坚信下一个视频我会做的更好。因此，也希望大家对这个视频提出宝贵的意见。\n\n### 视频介绍看这里\n在Kotlin交流群中，不少同学希望我能够出露脸视频。为了满足大家的愿望，我在课程的开始部分录制了一段真人解说视频。如果你不想看文字介绍的话，请移步到这里：[http://study.163.com/course/courseLearn.htm?courseId=1005686004&share=2&shareId=400000000535034#/learn/video?lessonId=1052950023&courseId=1005686004](http://study.163.com/course/courseLearn.htm?courseId=1005686004&share=2&shareId=400000000535034#/learn/video?lessonId=1052950023&courseId=1005686004)\n\n### 如何观看这个视频教程\n目前，该视频教程仅上线了网易云课堂，同学们可以移步至这里观看：[http://study.163.com/course/introduction.htm?courseId=1005686004&share=2&shareId=400000000535034](http://study.163.com/course/introduction.htm?courseId=1005686004&share=2&shareId=400000000535034)\n\n### 课程问题解惑\n如果你在使用Kotlin视频教程的时候遇到了任何问题，欢迎来我的Kotlin语言交流群里面提问。只要是关于视频课程的内容，一定有问必答。如果你没有购买这个视频教程，也可以添加这个QQ交流群，群里的小伙伴都非常热情。如果遇到了Kotlin语言问题，也可以在群里提问，同样会有问必答。\n\n### 视频课程资料\n课程源码：[https://github.com/yuanhoujun/kotlin-video-tutorial](https://github.com/yuanhoujun/kotlin-video-tutorial)\n\n习题答案：关注微信公众号【欧阳锋工作室】，回复“Kotlin视频教程”索取\n \n ### Kotlin语言交流群\n 唯一官方Kotlin语言交流群：329673958，期待您的加入。\n","source":"_posts/kotlin/2018最新Kotlin基础视频教程上线了.md","raw":"title: 2018最新Kotlin基础视频教程上线了\ndate: 2018/07/09 15:02\ncomments: true\ntags:\n- Android\n- Kotlin基础\n- 视频教程\ncategories:\n- Kotlin\n- 基础知识\n---\n\n从5月份开始制作这个视频，历时两个多月，终于在网易云课堂与大家见面了...\n\n![](https://user-gold-cdn.xitu.io/2018/7/9/1647d0644608714d)\n\n### 视频特色\n* 在前期课程中，使用普通编辑器进行编码，治疗你的IDE依赖症\n* 所有课程均使用live coding的方式授课，保持与你的频率一致\n* 每节课程课后都准备了相应的习题供大家巩固练习\n* 课程覆盖面广，线下效果持续跟踪\n* 项目实战部分是一个非常有意思的小项目，使用控制台完成类QQ聊天室功能（支持文字消息、文件发送、文件下载等功能）\n\n\n### 课程目录\n* Kotlin基础环境配置、变量与空值安全\n* 一等公民函数基础语法\n* 高阶函数、lambda表达式与匿名函数\n* 面向对象知识点（类、接口、继承、扩展等）\n* Kotlin语言中多样的class类型、对象以及枚举\n* 强大的集合与控制流处理\n* 操作符重载\n* 更安全的泛型处理\n* 代理模式及其应用\n* 协程简介\n* 析构、注解与异常处理\n* Kotlin与Java互通的那些事儿\n* 控制台版本QQ聊天室项目实战\n\n\n### 一些感想\n这是我第一次真正尝试录制视频教程，种种原因，导致整个视频的录制、剪辑加发布审核一共花掉了两个多月，将近三个月。而且还是离职在家，全职的情况下。\n\n即便如此，事实上，这个视频依然没有达到我的要求。但我想，第一次永远是青涩的，想要一步到位永远不过是痴人说梦。我坚信下一个视频我会做的更好。因此，也希望大家对这个视频提出宝贵的意见。\n\n### 视频介绍看这里\n在Kotlin交流群中，不少同学希望我能够出露脸视频。为了满足大家的愿望，我在课程的开始部分录制了一段真人解说视频。如果你不想看文字介绍的话，请移步到这里：[http://study.163.com/course/courseLearn.htm?courseId=1005686004&share=2&shareId=400000000535034#/learn/video?lessonId=1052950023&courseId=1005686004](http://study.163.com/course/courseLearn.htm?courseId=1005686004&share=2&shareId=400000000535034#/learn/video?lessonId=1052950023&courseId=1005686004)\n\n### 如何观看这个视频教程\n目前，该视频教程仅上线了网易云课堂，同学们可以移步至这里观看：[http://study.163.com/course/introduction.htm?courseId=1005686004&share=2&shareId=400000000535034](http://study.163.com/course/introduction.htm?courseId=1005686004&share=2&shareId=400000000535034)\n\n### 课程问题解惑\n如果你在使用Kotlin视频教程的时候遇到了任何问题，欢迎来我的Kotlin语言交流群里面提问。只要是关于视频课程的内容，一定有问必答。如果你没有购买这个视频教程，也可以添加这个QQ交流群，群里的小伙伴都非常热情。如果遇到了Kotlin语言问题，也可以在群里提问，同样会有问必答。\n\n### 视频课程资料\n课程源码：[https://github.com/yuanhoujun/kotlin-video-tutorial](https://github.com/yuanhoujun/kotlin-video-tutorial)\n\n习题答案：关注微信公众号【欧阳锋工作室】，回复“Kotlin视频教程”索取\n \n ### Kotlin语言交流群\n 唯一官方Kotlin语言交流群：329673958，期待您的加入。\n","slug":"kotlin/2018最新Kotlin基础视频教程上线了","published":1,"updated":"2019-04-28T12:39:23.523Z","_id":"cjv0x7uhx003nbkb4vv0835ib","layout":"post","photos":[],"link":"","content":"<p>从5月份开始制作这个视频，历时两个多月，终于在网易云课堂与大家见面了…</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/9/1647d0644608714d\" alt=\"\"></p>\n<h3 id=\"视频特色\"><a href=\"#视频特色\" class=\"headerlink\" title=\"视频特色\"></a>视频特色</h3><ul>\n<li>在前期课程中，使用普通编辑器进行编码，治疗你的IDE依赖症</li>\n<li>所有课程均使用live coding的方式授课，保持与你的频率一致</li>\n<li>每节课程课后都准备了相应的习题供大家巩固练习</li>\n<li>课程覆盖面广，线下效果持续跟踪</li>\n<li>项目实战部分是一个非常有意思的小项目，使用控制台完成类QQ聊天室功能（支持文字消息、文件发送、文件下载等功能）</li>\n</ul>\n<h3 id=\"课程目录\"><a href=\"#课程目录\" class=\"headerlink\" title=\"课程目录\"></a>课程目录</h3><ul>\n<li>Kotlin基础环境配置、变量与空值安全</li>\n<li>一等公民函数基础语法</li>\n<li>高阶函数、lambda表达式与匿名函数</li>\n<li>面向对象知识点（类、接口、继承、扩展等）</li>\n<li>Kotlin语言中多样的class类型、对象以及枚举</li>\n<li>强大的集合与控制流处理</li>\n<li>操作符重载</li>\n<li>更安全的泛型处理</li>\n<li>代理模式及其应用</li>\n<li>协程简介</li>\n<li>析构、注解与异常处理</li>\n<li>Kotlin与Java互通的那些事儿</li>\n<li>控制台版本QQ聊天室项目实战</li>\n</ul>\n<h3 id=\"一些感想\"><a href=\"#一些感想\" class=\"headerlink\" title=\"一些感想\"></a>一些感想</h3><p>这是我第一次真正尝试录制视频教程，种种原因，导致整个视频的录制、剪辑加发布审核一共花掉了两个多月，将近三个月。而且还是离职在家，全职的情况下。</p>\n<p>即便如此，事实上，这个视频依然没有达到我的要求。但我想，第一次永远是青涩的，想要一步到位永远不过是痴人说梦。我坚信下一个视频我会做的更好。因此，也希望大家对这个视频提出宝贵的意见。</p>\n<h3 id=\"视频介绍看这里\"><a href=\"#视频介绍看这里\" class=\"headerlink\" title=\"视频介绍看这里\"></a>视频介绍看这里</h3><p>在Kotlin交流群中，不少同学希望我能够出露脸视频。为了满足大家的愿望，我在课程的开始部分录制了一段真人解说视频。如果你不想看文字介绍的话，请移步到这里：<a href=\"http://study.163.com/course/courseLearn.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034#/learn/video?lessonId=1052950023&amp;courseId=1005686004\" target=\"_blank\" rel=\"noopener\">http://study.163.com/course/courseLearn.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034#/learn/video?lessonId=1052950023&amp;courseId=1005686004</a></p>\n<h3 id=\"如何观看这个视频教程\"><a href=\"#如何观看这个视频教程\" class=\"headerlink\" title=\"如何观看这个视频教程\"></a>如何观看这个视频教程</h3><p>目前，该视频教程仅上线了网易云课堂，同学们可以移步至这里观看：<a href=\"http://study.163.com/course/introduction.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034\" target=\"_blank\" rel=\"noopener\">http://study.163.com/course/introduction.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034</a></p>\n<h3 id=\"课程问题解惑\"><a href=\"#课程问题解惑\" class=\"headerlink\" title=\"课程问题解惑\"></a>课程问题解惑</h3><p>如果你在使用Kotlin视频教程的时候遇到了任何问题，欢迎来我的Kotlin语言交流群里面提问。只要是关于视频课程的内容，一定有问必答。如果你没有购买这个视频教程，也可以添加这个QQ交流群，群里的小伙伴都非常热情。如果遇到了Kotlin语言问题，也可以在群里提问，同样会有问必答。</p>\n<h3 id=\"视频课程资料\"><a href=\"#视频课程资料\" class=\"headerlink\" title=\"视频课程资料\"></a>视频课程资料</h3><p>课程源码：<a href=\"https://github.com/yuanhoujun/kotlin-video-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/kotlin-video-tutorial</a></p>\n<p>习题答案：关注微信公众号【欧阳锋工作室】，回复“Kotlin视频教程”索取</p>\n<h3 id=\"Kotlin语言交流群\"><a href=\"#Kotlin语言交流群\" class=\"headerlink\" title=\"Kotlin语言交流群\"></a>Kotlin语言交流群</h3><p> 唯一官方Kotlin语言交流群：329673958，期待您的加入。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从5月份开始制作这个视频，历时两个多月，终于在网易云课堂与大家见面了…</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/9/1647d0644608714d\" alt=\"\"></p>\n<h3 id=\"视频特色\"><a href=\"#视频特色\" class=\"headerlink\" title=\"视频特色\"></a>视频特色</h3><ul>\n<li>在前期课程中，使用普通编辑器进行编码，治疗你的IDE依赖症</li>\n<li>所有课程均使用live coding的方式授课，保持与你的频率一致</li>\n<li>每节课程课后都准备了相应的习题供大家巩固练习</li>\n<li>课程覆盖面广，线下效果持续跟踪</li>\n<li>项目实战部分是一个非常有意思的小项目，使用控制台完成类QQ聊天室功能（支持文字消息、文件发送、文件下载等功能）</li>\n</ul>\n<h3 id=\"课程目录\"><a href=\"#课程目录\" class=\"headerlink\" title=\"课程目录\"></a>课程目录</h3><ul>\n<li>Kotlin基础环境配置、变量与空值安全</li>\n<li>一等公民函数基础语法</li>\n<li>高阶函数、lambda表达式与匿名函数</li>\n<li>面向对象知识点（类、接口、继承、扩展等）</li>\n<li>Kotlin语言中多样的class类型、对象以及枚举</li>\n<li>强大的集合与控制流处理</li>\n<li>操作符重载</li>\n<li>更安全的泛型处理</li>\n<li>代理模式及其应用</li>\n<li>协程简介</li>\n<li>析构、注解与异常处理</li>\n<li>Kotlin与Java互通的那些事儿</li>\n<li>控制台版本QQ聊天室项目实战</li>\n</ul>\n<h3 id=\"一些感想\"><a href=\"#一些感想\" class=\"headerlink\" title=\"一些感想\"></a>一些感想</h3><p>这是我第一次真正尝试录制视频教程，种种原因，导致整个视频的录制、剪辑加发布审核一共花掉了两个多月，将近三个月。而且还是离职在家，全职的情况下。</p>\n<p>即便如此，事实上，这个视频依然没有达到我的要求。但我想，第一次永远是青涩的，想要一步到位永远不过是痴人说梦。我坚信下一个视频我会做的更好。因此，也希望大家对这个视频提出宝贵的意见。</p>\n<h3 id=\"视频介绍看这里\"><a href=\"#视频介绍看这里\" class=\"headerlink\" title=\"视频介绍看这里\"></a>视频介绍看这里</h3><p>在Kotlin交流群中，不少同学希望我能够出露脸视频。为了满足大家的愿望，我在课程的开始部分录制了一段真人解说视频。如果你不想看文字介绍的话，请移步到这里：<a href=\"http://study.163.com/course/courseLearn.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034#/learn/video?lessonId=1052950023&amp;courseId=1005686004\" target=\"_blank\" rel=\"noopener\">http://study.163.com/course/courseLearn.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034#/learn/video?lessonId=1052950023&amp;courseId=1005686004</a></p>\n<h3 id=\"如何观看这个视频教程\"><a href=\"#如何观看这个视频教程\" class=\"headerlink\" title=\"如何观看这个视频教程\"></a>如何观看这个视频教程</h3><p>目前，该视频教程仅上线了网易云课堂，同学们可以移步至这里观看：<a href=\"http://study.163.com/course/introduction.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034\" target=\"_blank\" rel=\"noopener\">http://study.163.com/course/introduction.htm?courseId=1005686004&amp;share=2&amp;shareId=400000000535034</a></p>\n<h3 id=\"课程问题解惑\"><a href=\"#课程问题解惑\" class=\"headerlink\" title=\"课程问题解惑\"></a>课程问题解惑</h3><p>如果你在使用Kotlin视频教程的时候遇到了任何问题，欢迎来我的Kotlin语言交流群里面提问。只要是关于视频课程的内容，一定有问必答。如果你没有购买这个视频教程，也可以添加这个QQ交流群，群里的小伙伴都非常热情。如果遇到了Kotlin语言问题，也可以在群里提问，同样会有问必答。</p>\n<h3 id=\"视频课程资料\"><a href=\"#视频课程资料\" class=\"headerlink\" title=\"视频课程资料\"></a>视频课程资料</h3><p>课程源码：<a href=\"https://github.com/yuanhoujun/kotlin-video-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/kotlin-video-tutorial</a></p>\n<p>习题答案：关注微信公众号【欧阳锋工作室】，回复“Kotlin视频教程”索取</p>\n<h3 id=\"Kotlin语言交流群\"><a href=\"#Kotlin语言交流群\" class=\"headerlink\" title=\"Kotlin语言交流群\"></a>Kotlin语言交流群</h3><p> 唯一官方Kotlin语言交流群：329673958，期待您的加入。</p>\n"},{"title":"Kotlin难点解析：extension和this指针","date":"2018-04-13T16:11:00.000Z","comments":1,"_content":"\n>扩展（extension）是Kotlin语言中使用非常简单的一个特性。这篇文章并不是要讲解扩展的基本用法，而是解决在一些复杂场景中，扩展容易让人产生迷惑的一些问题。除了扩展，本篇文章还将讲解this指针在Kotlin语言中的基础用法。\n\n![](https://upload-images.jianshu.io/upload_images/703764-119913eaea78702b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 扩展函数难点解析\n大多数场景下，你都能轻松搞定Kotlin扩展。可是，看看下面这个题目，你还能脱口而出，告诉我答案是什么吗？\n\n```\nopen class E {\n\n}\n\nopen class E1: E() {\n\n}\n\nopen class A {\n\n    open fun E.f() {\n        println(\"E.f in A\")\n    }\n\n    open fun E1.f() {\n        println(\"E1.f in A\")\n    }\n\n    fun call(e: E) {\n        e.f()\n    }\n}\n\nclass A1: A() {\n\n    override fun E.f() {\n        println(\"E.f in A1\")\n    }\n\n    override fun E1.f() {\n        println(\"E1.f in A1\")\n    }\n}\n\nfun main(args: Array<String>) {\n    // a）\n    A().call(E())\n\n    // b）\n    A1().call(E())\n\n    // c）\n    A().call(E())\n\n    // d）\n    A().call(E1())\n}\n```\n\n问题：请告诉a，b，c，d位置代码执行的输出结果是什么？\n\n对于这个问题，恐怕你在纸上写写画画半天也不一定能给出正确答案吧。关于这个问题，其实我之前的一篇文章 [ [Kotlin] Lambda and Extension](https://www.jianshu.com/p/d7a40c6a60d1) 中有提到过。可是，我认为这篇文章关于这部分的解释不够清晰，有必要再详细阐述一次。\n\nOk，let's started。\n\n为了解决这个问题，官方提出了两个新的概念：**dispatch receiver**和**extension receiver**。\n\n* dispatch receiver：中文翻译为**分发接收者**。所谓的分发接收者，就是声明这个扩展方法所在的类。即：在哪个类中声明，那个类就是你的分发接收者。\n* extension receiver：中文翻译为**扩展接收者**。所谓的扩展接收者，就是你实际扩展的那个类。举个例子：你针对Int类扩展了一个方法add，这个add方法的扩展接收者就是Int类实例。\n\n为了简化，这里我们将**dispatch receiver**简称为**DR**，将**extension receiver**简称为**ER**。\n\n还记得多态的概念吗？多态是一种运行时概念，即对象的类型要等到运行时才能最终确定。因此，一些语言中也将多态叫做类型延迟加载。解决上面这个问题我们需要关注就是扩展函数是否会产生多态行为。\n\n这里我们将产生多态行为的技术叫做**动态解析**，与之相反的行为称之为**静态解析**。\n\n为了解决上面的问题，你需要记住下面这个规则：\n* DR类型是动态解析的\n* 与之相反，ER类型是静态解析的\n\n先看上面例子的a、b部分，很显然：\n* a代码中f函数的DR是类A，ER是类E\n* b代码中f函数的DR是类A1，ER是类E\n\n参照上面的规则，由于DR类型是动态解析的。在A1类中我们重写了E的扩展函数f，运行时最终会执行A1类中扩展的f方法。a部分很明显会输出A类中扩展的f方法。因此，最终的输出结果如下：\n\n```\nE.f in A\nE.f in A1\n```\n\n继续看c、d部分，c、d部分的DR都是A，而对于ER，c、d分别是E、E1。参照上面的规则，ER是静态解析的。在call方法声明的地方，我们传入的对象类型是E，这就决定了无论扩展方法是来自E还是其子类，将始终执行E类的扩展方法。因此，c、d部分将输出同样的结果：\n\n```\nE.f in A\nE.f in A\n```\n由此可见，如果你牢记上述两条规则，解决问题将变得非常容易。为了加强你的记忆，我用一个表格总结上面的知识点：\n\n-|DR|ER\n:---:|:---:|:---:\n概念|扩展方法声明所在的类|声明扩展方法的类\n解析方式|动态解析|静态解析\n\nPS：由于新版本Kotlin中针对扩展函数也加入了override关键字，这非常有助于DR和ER的理解。如果你在使用Kotlin，强烈建议你更新到最新版本。\n\n![](https://upload-images.jianshu.io/upload_images/703764-ab52dd83e6235da6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 不太一样的this指针\n在Java语言中，如果你在内部类中需要外部类的引用可以将this写在类名后面。可是，试试看Kotlin，果断不行。\n\n为了获得外部类的引用，Kotlin语言引入了@符号。举个例子：\n\n```\nclass Outer {\n    inner class Inner {\n        fun f() {\n            println(this@Outer)\n        }\n    }\n}\n```\n\n可以看到，为了获取外部类的引用，只需要在@后面接外部类的名称即可。\n\n如果对应一个扩展函数，this引用指向是什么呢？先说答案，扩展函数中的this指针指向ER，即实际扩展的那个类对象。\n\n```\nfun Outer.foo() {\n  println(this)\n}\n```\n\n这里的this指向foo函数的接收者Outer类实例。\n\nthis指针还有一种场景是用在lambda表达式中，这是一种比较特殊的使用场景。lambda表达式本身没有任何接收者，如果是在全局声明一个lambda表达式，将不能使用this指针。而如果是在某个类或者扩展方法中使用this指针，将指向实际所在类或者扩展方法的接收者。\n\n如果你习惯了Kotlin语言的这种表达方式，this指针的指向就不再是一个问题了。在你习惯这种用法之前，我用一个表格简单总结一下this指针的用法：\n\n位置|指向\n:---:|:---:\n类中|默认指向当前类实例，使用@操作符指向具体外部类实例\n扩展函数|默认指向扩展函数的接收者\nlambda表达式|默认指向实际所在类实例或所在扩展函数的接收者\n\n## 总结\n关于扩展，大多数情况下，你不会遇到文章开头那种复杂的情况。如果遇到了这种情况，只要清楚地区分DR和ER，并牢记DR和ER的解析方式，就能轻松应对了。对于this指针，与Java语言不一样的地方是，为了引用具体类的实例，Kotlin语言使用@符号。个人认为，这种表述方式更自然。如果遇到某些比较复杂的情况，只需要弄清楚接收者，问题就引刃而解了。","source":"_posts/kotlin/Kotlin难点解析：extension和this指针.md","raw":"title: Kotlin难点解析：extension和this指针\ndate: 2018/4/14 00:11\ncomments: true\ntags:\n- Kotlin\n- 扩展\n- this\ncategories:\n- Kotlin\n- 基础知识\n---\n\n>扩展（extension）是Kotlin语言中使用非常简单的一个特性。这篇文章并不是要讲解扩展的基本用法，而是解决在一些复杂场景中，扩展容易让人产生迷惑的一些问题。除了扩展，本篇文章还将讲解this指针在Kotlin语言中的基础用法。\n\n![](https://upload-images.jianshu.io/upload_images/703764-119913eaea78702b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 扩展函数难点解析\n大多数场景下，你都能轻松搞定Kotlin扩展。可是，看看下面这个题目，你还能脱口而出，告诉我答案是什么吗？\n\n```\nopen class E {\n\n}\n\nopen class E1: E() {\n\n}\n\nopen class A {\n\n    open fun E.f() {\n        println(\"E.f in A\")\n    }\n\n    open fun E1.f() {\n        println(\"E1.f in A\")\n    }\n\n    fun call(e: E) {\n        e.f()\n    }\n}\n\nclass A1: A() {\n\n    override fun E.f() {\n        println(\"E.f in A1\")\n    }\n\n    override fun E1.f() {\n        println(\"E1.f in A1\")\n    }\n}\n\nfun main(args: Array<String>) {\n    // a）\n    A().call(E())\n\n    // b）\n    A1().call(E())\n\n    // c）\n    A().call(E())\n\n    // d）\n    A().call(E1())\n}\n```\n\n问题：请告诉a，b，c，d位置代码执行的输出结果是什么？\n\n对于这个问题，恐怕你在纸上写写画画半天也不一定能给出正确答案吧。关于这个问题，其实我之前的一篇文章 [ [Kotlin] Lambda and Extension](https://www.jianshu.com/p/d7a40c6a60d1) 中有提到过。可是，我认为这篇文章关于这部分的解释不够清晰，有必要再详细阐述一次。\n\nOk，let's started。\n\n为了解决这个问题，官方提出了两个新的概念：**dispatch receiver**和**extension receiver**。\n\n* dispatch receiver：中文翻译为**分发接收者**。所谓的分发接收者，就是声明这个扩展方法所在的类。即：在哪个类中声明，那个类就是你的分发接收者。\n* extension receiver：中文翻译为**扩展接收者**。所谓的扩展接收者，就是你实际扩展的那个类。举个例子：你针对Int类扩展了一个方法add，这个add方法的扩展接收者就是Int类实例。\n\n为了简化，这里我们将**dispatch receiver**简称为**DR**，将**extension receiver**简称为**ER**。\n\n还记得多态的概念吗？多态是一种运行时概念，即对象的类型要等到运行时才能最终确定。因此，一些语言中也将多态叫做类型延迟加载。解决上面这个问题我们需要关注就是扩展函数是否会产生多态行为。\n\n这里我们将产生多态行为的技术叫做**动态解析**，与之相反的行为称之为**静态解析**。\n\n为了解决上面的问题，你需要记住下面这个规则：\n* DR类型是动态解析的\n* 与之相反，ER类型是静态解析的\n\n先看上面例子的a、b部分，很显然：\n* a代码中f函数的DR是类A，ER是类E\n* b代码中f函数的DR是类A1，ER是类E\n\n参照上面的规则，由于DR类型是动态解析的。在A1类中我们重写了E的扩展函数f，运行时最终会执行A1类中扩展的f方法。a部分很明显会输出A类中扩展的f方法。因此，最终的输出结果如下：\n\n```\nE.f in A\nE.f in A1\n```\n\n继续看c、d部分，c、d部分的DR都是A，而对于ER，c、d分别是E、E1。参照上面的规则，ER是静态解析的。在call方法声明的地方，我们传入的对象类型是E，这就决定了无论扩展方法是来自E还是其子类，将始终执行E类的扩展方法。因此，c、d部分将输出同样的结果：\n\n```\nE.f in A\nE.f in A\n```\n由此可见，如果你牢记上述两条规则，解决问题将变得非常容易。为了加强你的记忆，我用一个表格总结上面的知识点：\n\n-|DR|ER\n:---:|:---:|:---:\n概念|扩展方法声明所在的类|声明扩展方法的类\n解析方式|动态解析|静态解析\n\nPS：由于新版本Kotlin中针对扩展函数也加入了override关键字，这非常有助于DR和ER的理解。如果你在使用Kotlin，强烈建议你更新到最新版本。\n\n![](https://upload-images.jianshu.io/upload_images/703764-ab52dd83e6235da6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 不太一样的this指针\n在Java语言中，如果你在内部类中需要外部类的引用可以将this写在类名后面。可是，试试看Kotlin，果断不行。\n\n为了获得外部类的引用，Kotlin语言引入了@符号。举个例子：\n\n```\nclass Outer {\n    inner class Inner {\n        fun f() {\n            println(this@Outer)\n        }\n    }\n}\n```\n\n可以看到，为了获取外部类的引用，只需要在@后面接外部类的名称即可。\n\n如果对应一个扩展函数，this引用指向是什么呢？先说答案，扩展函数中的this指针指向ER，即实际扩展的那个类对象。\n\n```\nfun Outer.foo() {\n  println(this)\n}\n```\n\n这里的this指向foo函数的接收者Outer类实例。\n\nthis指针还有一种场景是用在lambda表达式中，这是一种比较特殊的使用场景。lambda表达式本身没有任何接收者，如果是在全局声明一个lambda表达式，将不能使用this指针。而如果是在某个类或者扩展方法中使用this指针，将指向实际所在类或者扩展方法的接收者。\n\n如果你习惯了Kotlin语言的这种表达方式，this指针的指向就不再是一个问题了。在你习惯这种用法之前，我用一个表格简单总结一下this指针的用法：\n\n位置|指向\n:---:|:---:\n类中|默认指向当前类实例，使用@操作符指向具体外部类实例\n扩展函数|默认指向扩展函数的接收者\nlambda表达式|默认指向实际所在类实例或所在扩展函数的接收者\n\n## 总结\n关于扩展，大多数情况下，你不会遇到文章开头那种复杂的情况。如果遇到了这种情况，只要清楚地区分DR和ER，并牢记DR和ER的解析方式，就能轻松应对了。对于this指针，与Java语言不一样的地方是，为了引用具体类的实例，Kotlin语言使用@符号。个人认为，这种表述方式更自然。如果遇到某些比较复杂的情况，只需要弄清楚接收者，问题就引刃而解了。","slug":"kotlin/Kotlin难点解析：extension和this指针","published":1,"updated":"2019-04-28T12:39:23.524Z","_id":"cjv0x7uhz003qbkb4b3262o0p","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>扩展（extension）是Kotlin语言中使用非常简单的一个特性。这篇文章并不是要讲解扩展的基本用法，而是解决在一些复杂场景中，扩展容易让人产生迷惑的一些问题。除了扩展，本篇文章还将讲解this指针在Kotlin语言中的基础用法。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-119913eaea78702b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"扩展函数难点解析\"><a href=\"#扩展函数难点解析\" class=\"headerlink\" title=\"扩展函数难点解析\"></a>扩展函数难点解析</h2><p>大多数场景下，你都能轻松搞定Kotlin扩展。可是，看看下面这个题目，你还能脱口而出，告诉我答案是什么吗？</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open class E &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">open class E1: E() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">open class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    open fun E.f() &#123;</span><br><span class=\"line\">        println(&quot;E.f in A&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    open fun E1.f() &#123;</span><br><span class=\"line\">        println(&quot;E1.f in A&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun call(e: E) &#123;</span><br><span class=\"line\">        e.f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class A1: A() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun E.f() &#123;</span><br><span class=\"line\">        println(&quot;E.f in A1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun E1.f() &#123;</span><br><span class=\"line\">        println(&quot;E1.f in A1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // a）</span><br><span class=\"line\">    A().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // b）</span><br><span class=\"line\">    A1().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // c）</span><br><span class=\"line\">    A().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // d）</span><br><span class=\"line\">    A().call(E1())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题：请告诉a，b，c，d位置代码执行的输出结果是什么？</p>\n<p>对于这个问题，恐怕你在纸上写写画画半天也不一定能给出正确答案吧。关于这个问题，其实我之前的一篇文章 <a href=\"https://www.jianshu.com/p/d7a40c6a60d1\" target=\"_blank\" rel=\"noopener\"> [Kotlin] Lambda and Extension</a> 中有提到过。可是，我认为这篇文章关于这部分的解释不够清晰，有必要再详细阐述一次。</p>\n<p>Ok，let’s started。</p>\n<p>为了解决这个问题，官方提出了两个新的概念：<strong>dispatch receiver</strong>和<strong>extension receiver</strong>。</p>\n<ul>\n<li>dispatch receiver：中文翻译为<strong>分发接收者</strong>。所谓的分发接收者，就是声明这个扩展方法所在的类。即：在哪个类中声明，那个类就是你的分发接收者。</li>\n<li>extension receiver：中文翻译为<strong>扩展接收者</strong>。所谓的扩展接收者，就是你实际扩展的那个类。举个例子：你针对Int类扩展了一个方法add，这个add方法的扩展接收者就是Int类实例。</li>\n</ul>\n<p>为了简化，这里我们将<strong>dispatch receiver</strong>简称为<strong>DR</strong>，将<strong>extension receiver</strong>简称为<strong>ER</strong>。</p>\n<p>还记得多态的概念吗？多态是一种运行时概念，即对象的类型要等到运行时才能最终确定。因此，一些语言中也将多态叫做类型延迟加载。解决上面这个问题我们需要关注就是扩展函数是否会产生多态行为。</p>\n<p>这里我们将产生多态行为的技术叫做<strong>动态解析</strong>，与之相反的行为称之为<strong>静态解析</strong>。</p>\n<p>为了解决上面的问题，你需要记住下面这个规则：</p>\n<ul>\n<li>DR类型是动态解析的</li>\n<li>与之相反，ER类型是静态解析的</li>\n</ul>\n<p>先看上面例子的a、b部分，很显然：</p>\n<ul>\n<li>a代码中f函数的DR是类A，ER是类E</li>\n<li>b代码中f函数的DR是类A1，ER是类E</li>\n</ul>\n<p>参照上面的规则，由于DR类型是动态解析的。在A1类中我们重写了E的扩展函数f，运行时最终会执行A1类中扩展的f方法。a部分很明显会输出A类中扩展的f方法。因此，最终的输出结果如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E.f in A</span><br><span class=\"line\">E.f in A1</span><br></pre></td></tr></table></figure>\n<p>继续看c、d部分，c、d部分的DR都是A，而对于ER，c、d分别是E、E1。参照上面的规则，ER是静态解析的。在call方法声明的地方，我们传入的对象类型是E，这就决定了无论扩展方法是来自E还是其子类，将始终执行E类的扩展方法。因此，c、d部分将输出同样的结果：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E.f in A</span><br><span class=\"line\">E.f in A</span><br></pre></td></tr></table></figure>\n<p>由此可见，如果你牢记上述两条规则，解决问题将变得非常容易。为了加强你的记忆，我用一个表格总结上面的知识点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">DR</th>\n<th style=\"text-align:center\">ER</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">概念</td>\n<td style=\"text-align:center\">扩展方法声明所在的类</td>\n<td style=\"text-align:center\">声明扩展方法的类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">解析方式</td>\n<td style=\"text-align:center\">动态解析</td>\n<td style=\"text-align:center\">静态解析</td>\n</tr>\n</tbody>\n</table>\n<p>PS：由于新版本Kotlin中针对扩展函数也加入了override关键字，这非常有助于DR和ER的理解。如果你在使用Kotlin，强烈建议你更新到最新版本。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ab52dd83e6235da6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"不太一样的this指针\"><a href=\"#不太一样的this指针\" class=\"headerlink\" title=\"不太一样的this指针\"></a>不太一样的this指针</h2><p>在Java语言中，如果你在内部类中需要外部类的引用可以将this写在类名后面。可是，试试看Kotlin，果断不行。</p>\n<p>为了获得外部类的引用，Kotlin语言引入了@符号。举个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    inner class Inner &#123;</span><br><span class=\"line\">        fun f() &#123;</span><br><span class=\"line\">            println(this@Outer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，为了获取外部类的引用，只需要在@后面接外部类的名称即可。</p>\n<p>如果对应一个扩展函数，this引用指向是什么呢？先说答案，扩展函数中的this指针指向ER，即实际扩展的那个类对象。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun Outer.foo() &#123;</span><br><span class=\"line\">  println(this)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的this指向foo函数的接收者Outer类实例。</p>\n<p>this指针还有一种场景是用在lambda表达式中，这是一种比较特殊的使用场景。lambda表达式本身没有任何接收者，如果是在全局声明一个lambda表达式，将不能使用this指针。而如果是在某个类或者扩展方法中使用this指针，将指向实际所在类或者扩展方法的接收者。</p>\n<p>如果你习惯了Kotlin语言的这种表达方式，this指针的指向就不再是一个问题了。在你习惯这种用法之前，我用一个表格简单总结一下this指针的用法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">位置</th>\n<th style=\"text-align:center\">指向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">类中</td>\n<td style=\"text-align:center\">默认指向当前类实例，使用@操作符指向具体外部类实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展函数</td>\n<td style=\"text-align:center\">默认指向扩展函数的接收者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lambda表达式</td>\n<td style=\"text-align:center\">默认指向实际所在类实例或所在扩展函数的接收者</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于扩展，大多数情况下，你不会遇到文章开头那种复杂的情况。如果遇到了这种情况，只要清楚地区分DR和ER，并牢记DR和ER的解析方式，就能轻松应对了。对于this指针，与Java语言不一样的地方是，为了引用具体类的实例，Kotlin语言使用@符号。个人认为，这种表述方式更自然。如果遇到某些比较复杂的情况，只需要弄清楚接收者，问题就引刃而解了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>扩展（extension）是Kotlin语言中使用非常简单的一个特性。这篇文章并不是要讲解扩展的基本用法，而是解决在一些复杂场景中，扩展容易让人产生迷惑的一些问题。除了扩展，本篇文章还将讲解this指针在Kotlin语言中的基础用法。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-119913eaea78702b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"扩展函数难点解析\"><a href=\"#扩展函数难点解析\" class=\"headerlink\" title=\"扩展函数难点解析\"></a>扩展函数难点解析</h2><p>大多数场景下，你都能轻松搞定Kotlin扩展。可是，看看下面这个题目，你还能脱口而出，告诉我答案是什么吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open class E &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">open class E1: E() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">open class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    open fun E.f() &#123;</span><br><span class=\"line\">        println(&quot;E.f in A&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    open fun E1.f() &#123;</span><br><span class=\"line\">        println(&quot;E1.f in A&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun call(e: E) &#123;</span><br><span class=\"line\">        e.f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class A1: A() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun E.f() &#123;</span><br><span class=\"line\">        println(&quot;E.f in A1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun E1.f() &#123;</span><br><span class=\"line\">        println(&quot;E1.f in A1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // a）</span><br><span class=\"line\">    A().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // b）</span><br><span class=\"line\">    A1().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // c）</span><br><span class=\"line\">    A().call(E())</span><br><span class=\"line\"></span><br><span class=\"line\">    // d）</span><br><span class=\"line\">    A().call(E1())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题：请告诉a，b，c，d位置代码执行的输出结果是什么？</p>\n<p>对于这个问题，恐怕你在纸上写写画画半天也不一定能给出正确答案吧。关于这个问题，其实我之前的一篇文章 <a href=\"https://www.jianshu.com/p/d7a40c6a60d1\" target=\"_blank\" rel=\"noopener\"> [Kotlin] Lambda and Extension</a> 中有提到过。可是，我认为这篇文章关于这部分的解释不够清晰，有必要再详细阐述一次。</p>\n<p>Ok，let’s started。</p>\n<p>为了解决这个问题，官方提出了两个新的概念：<strong>dispatch receiver</strong>和<strong>extension receiver</strong>。</p>\n<ul>\n<li>dispatch receiver：中文翻译为<strong>分发接收者</strong>。所谓的分发接收者，就是声明这个扩展方法所在的类。即：在哪个类中声明，那个类就是你的分发接收者。</li>\n<li>extension receiver：中文翻译为<strong>扩展接收者</strong>。所谓的扩展接收者，就是你实际扩展的那个类。举个例子：你针对Int类扩展了一个方法add，这个add方法的扩展接收者就是Int类实例。</li>\n</ul>\n<p>为了简化，这里我们将<strong>dispatch receiver</strong>简称为<strong>DR</strong>，将<strong>extension receiver</strong>简称为<strong>ER</strong>。</p>\n<p>还记得多态的概念吗？多态是一种运行时概念，即对象的类型要等到运行时才能最终确定。因此，一些语言中也将多态叫做类型延迟加载。解决上面这个问题我们需要关注就是扩展函数是否会产生多态行为。</p>\n<p>这里我们将产生多态行为的技术叫做<strong>动态解析</strong>，与之相反的行为称之为<strong>静态解析</strong>。</p>\n<p>为了解决上面的问题，你需要记住下面这个规则：</p>\n<ul>\n<li>DR类型是动态解析的</li>\n<li>与之相反，ER类型是静态解析的</li>\n</ul>\n<p>先看上面例子的a、b部分，很显然：</p>\n<ul>\n<li>a代码中f函数的DR是类A，ER是类E</li>\n<li>b代码中f函数的DR是类A1，ER是类E</li>\n</ul>\n<p>参照上面的规则，由于DR类型是动态解析的。在A1类中我们重写了E的扩展函数f，运行时最终会执行A1类中扩展的f方法。a部分很明显会输出A类中扩展的f方法。因此，最终的输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E.f in A</span><br><span class=\"line\">E.f in A1</span><br></pre></td></tr></table></figure>\n<p>继续看c、d部分，c、d部分的DR都是A，而对于ER，c、d分别是E、E1。参照上面的规则，ER是静态解析的。在call方法声明的地方，我们传入的对象类型是E，这就决定了无论扩展方法是来自E还是其子类，将始终执行E类的扩展方法。因此，c、d部分将输出同样的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E.f in A</span><br><span class=\"line\">E.f in A</span><br></pre></td></tr></table></figure>\n<p>由此可见，如果你牢记上述两条规则，解决问题将变得非常容易。为了加强你的记忆，我用一个表格总结上面的知识点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">DR</th>\n<th style=\"text-align:center\">ER</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">概念</td>\n<td style=\"text-align:center\">扩展方法声明所在的类</td>\n<td style=\"text-align:center\">声明扩展方法的类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">解析方式</td>\n<td style=\"text-align:center\">动态解析</td>\n<td style=\"text-align:center\">静态解析</td>\n</tr>\n</tbody>\n</table>\n<p>PS：由于新版本Kotlin中针对扩展函数也加入了override关键字，这非常有助于DR和ER的理解。如果你在使用Kotlin，强烈建议你更新到最新版本。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ab52dd83e6235da6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"不太一样的this指针\"><a href=\"#不太一样的this指针\" class=\"headerlink\" title=\"不太一样的this指针\"></a>不太一样的this指针</h2><p>在Java语言中，如果你在内部类中需要外部类的引用可以将this写在类名后面。可是，试试看Kotlin，果断不行。</p>\n<p>为了获得外部类的引用，Kotlin语言引入了@符号。举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    inner class Inner &#123;</span><br><span class=\"line\">        fun f() &#123;</span><br><span class=\"line\">            println(this@Outer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，为了获取外部类的引用，只需要在@后面接外部类的名称即可。</p>\n<p>如果对应一个扩展函数，this引用指向是什么呢？先说答案，扩展函数中的this指针指向ER，即实际扩展的那个类对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun Outer.foo() &#123;</span><br><span class=\"line\">  println(this)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的this指向foo函数的接收者Outer类实例。</p>\n<p>this指针还有一种场景是用在lambda表达式中，这是一种比较特殊的使用场景。lambda表达式本身没有任何接收者，如果是在全局声明一个lambda表达式，将不能使用this指针。而如果是在某个类或者扩展方法中使用this指针，将指向实际所在类或者扩展方法的接收者。</p>\n<p>如果你习惯了Kotlin语言的这种表达方式，this指针的指向就不再是一个问题了。在你习惯这种用法之前，我用一个表格简单总结一下this指针的用法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">位置</th>\n<th style=\"text-align:center\">指向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">类中</td>\n<td style=\"text-align:center\">默认指向当前类实例，使用@操作符指向具体外部类实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展函数</td>\n<td style=\"text-align:center\">默认指向扩展函数的接收者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lambda表达式</td>\n<td style=\"text-align:center\">默认指向实际所在类实例或所在扩展函数的接收者</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于扩展，大多数情况下，你不会遇到文章开头那种复杂的情况。如果遇到了这种情况，只要清楚地区分DR和ER，并牢记DR和ER的解析方式，就能轻松应对了。对于this指针，与Java语言不一样的地方是，为了引用具体类的实例，Kotlin语言使用@符号。个人认为，这种表述方式更自然。如果遇到某些比较复杂的情况，只需要弄清楚接收者，问题就引刃而解了。</p>\n"},{"title":"你是否也被Kotlin语言的object绕晕了呢","date":"2018-04-14T04:18:00.000Z","comments":1,"_content":"\n![文 | 欧阳锋](https://upload-images.jianshu.io/upload_images/703764-499d2f2f3e299b80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n近日，在笔者的Kotlin语言交流群中。的确发现了一些同学对**object**的用法有一些疑问。于是，出现了下面这样错误的用法：\n![](https://upload-images.jianshu.io/upload_images/703764-a0f15e2bb073278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n很自然的想法，c是一个接口类型的成员变量，访问外部类的成员变量，这不是理所应当的吗？\n\n即使查看Kotlin官方文档，也有这样一段描述：\n>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Java handles this case with anonymous inner classes. Kotlin slightly generalizes this concept with object expressions and object declarations.\n\n核心意思是：Kotlin使用object代替Java匿名内部类实现。\n\n很明显，即便如此，这里的访问应该也是合情合理的。从匿名内部类中访问成员变量在Java语言中是完全允许的。\n\n这个问题很有意思，解答这个我们需要生成Java字节码，再反编译成Java看看具体生成的代码是什么。\n\n借助[JD-GUI](http://jd.benow.ca/)，我们可以看到下面的内容：\n\n```\npublic final class Outer\n{\n  private String a;\n\n  public static final class c\n    implements Moveable\n  {\n    public static final c INSTANCE;\n    \n    static\n    {\n      c localc = new c();INSTANCE = localc;\n    }\n    \n    public void move()\n    {\n      Moveable.DefaultImpls.move(this);\n    }\n  }\n}\n```\n\n很有意思，我们在Kotlin类中object部分的代码最终变成了下面这个样子：\n\n```\n public static final class c implements Moveable {\n    public static final c INSTANCE;\n    static {\n      c localc = new c();INSTANCE = localc;\n    }\n    \n    public void move() {\n      Moveable.DefaultImpls.move(this);\n    }\n  }\n```\n\n这是一个静态内部类，很明显，静态内部类是不能访问外部类成员变量的。可是问题来了，说好的匿名内部类呢？\n\n这里一定要注意，如果你只是这样声明了一个object，Kotlin认为你是需要一个静态内部类。而如果你用一个变量去接收object表达式，Kotlin认为你需要一个匿名内部类对象。\n\n因此，这个类应该这样改进：\n\n```\nclass Outer {\n    private var a: String? = null\n    \n    // 用变量c去接收object表达式\n    private val c = object: Moveable {\n        override fun move() {\n            super.move()\n            // 改进后，这里访问正常\n            println(a)\n        }\n    }\n}\n```\n\n>为了避免出现这个问题，谨记一个原则：如果object只是声明，它代表一个静态内部类。如果用变量接收object表达式，它代表一个匿名内部类对象。\n\n## object能干啥？\n很自然地想到，Kotlin的object到底有什么作用。其实，从上文的表述来看。很明显，object至少有下面两个作用：\n* 简化生成静态内部类\n* 生成匿名内部类对象\n\n其实，object还有一个非常重要的作用，就是生成单例对象。如果你需要在Kotlin语言中使用单例，非常简单，只需要使用object关键字即可。\n\n```\nobject Singleton {\n    fun f1() {\n        \n    }\n    \n    fun f2() {\n        \n    }\n}\n```\n\n这种方式声明object和上面的方式略有区别，其最终会生成一个名为Singleton的类，并在类中生成一个静态代码块进行单例对象生成：\n\n```\npublic final class Singleton\n{\n  public static final Singleton INSTANCE;\n  \n  public final void f1() {}\n  \n  public final void f2() {}\n  \n  static\n  {\n    Singleton localSingleton = new Singleton();INSTANCE = localSingleton;\n  }\n}\n```\n\n在Kotlin语言中对方法进行访问的时候最终其实是通过**INSTANCE**实例进行中转的。\n\n在Kotlin语言中还有一个很常用的object叫做伴随对象。所谓的伴随对象只不过是名字叫做**Companion**的object而已。它主要用于类中生成类似Java的静态变量，Kotlin语言针对这个变量会认为你只是希望生成一个静态变量，而不希望引入多余的类。如果你是和Java语言混合开发的话，可以使用一个注解生成和Java语言静态变量完全一样的效果。\n\n## 简单总结\nKotlin语言中使用object命名的方式的确容易让人误认为只要使用这个关键字就是生成了一个对象。而从上文的表述当中，你会发现，其实不同的使用姿势将产生不同的效果。因此，在日常使用中一定要学会随机应变。如果遇到了不明白的问题，不妨来看看这篇文章是否已经解答了你的问题。如果没有，请在文章下方留言告诉我。\n\n## 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n","source":"_posts/kotlin/你是否也被Kotlin语言的object绕晕了呢.md","raw":"title: 你是否也被Kotlin语言的object绕晕了呢\ndate: 2018/04/14 12:18\ncomments: true\ntags:\n- Kotlin\n- object\n- 编程语言\ncategories:\n- Kotlin\n- 基础知识\n---\n\n![文 | 欧阳锋](https://upload-images.jianshu.io/upload_images/703764-499d2f2f3e299b80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n近日，在笔者的Kotlin语言交流群中。的确发现了一些同学对**object**的用法有一些疑问。于是，出现了下面这样错误的用法：\n![](https://upload-images.jianshu.io/upload_images/703764-a0f15e2bb073278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n很自然的想法，c是一个接口类型的成员变量，访问外部类的成员变量，这不是理所应当的吗？\n\n即使查看Kotlin官方文档，也有这样一段描述：\n>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Java handles this case with anonymous inner classes. Kotlin slightly generalizes this concept with object expressions and object declarations.\n\n核心意思是：Kotlin使用object代替Java匿名内部类实现。\n\n很明显，即便如此，这里的访问应该也是合情合理的。从匿名内部类中访问成员变量在Java语言中是完全允许的。\n\n这个问题很有意思，解答这个我们需要生成Java字节码，再反编译成Java看看具体生成的代码是什么。\n\n借助[JD-GUI](http://jd.benow.ca/)，我们可以看到下面的内容：\n\n```\npublic final class Outer\n{\n  private String a;\n\n  public static final class c\n    implements Moveable\n  {\n    public static final c INSTANCE;\n    \n    static\n    {\n      c localc = new c();INSTANCE = localc;\n    }\n    \n    public void move()\n    {\n      Moveable.DefaultImpls.move(this);\n    }\n  }\n}\n```\n\n很有意思，我们在Kotlin类中object部分的代码最终变成了下面这个样子：\n\n```\n public static final class c implements Moveable {\n    public static final c INSTANCE;\n    static {\n      c localc = new c();INSTANCE = localc;\n    }\n    \n    public void move() {\n      Moveable.DefaultImpls.move(this);\n    }\n  }\n```\n\n这是一个静态内部类，很明显，静态内部类是不能访问外部类成员变量的。可是问题来了，说好的匿名内部类呢？\n\n这里一定要注意，如果你只是这样声明了一个object，Kotlin认为你是需要一个静态内部类。而如果你用一个变量去接收object表达式，Kotlin认为你需要一个匿名内部类对象。\n\n因此，这个类应该这样改进：\n\n```\nclass Outer {\n    private var a: String? = null\n    \n    // 用变量c去接收object表达式\n    private val c = object: Moveable {\n        override fun move() {\n            super.move()\n            // 改进后，这里访问正常\n            println(a)\n        }\n    }\n}\n```\n\n>为了避免出现这个问题，谨记一个原则：如果object只是声明，它代表一个静态内部类。如果用变量接收object表达式，它代表一个匿名内部类对象。\n\n## object能干啥？\n很自然地想到，Kotlin的object到底有什么作用。其实，从上文的表述来看。很明显，object至少有下面两个作用：\n* 简化生成静态内部类\n* 生成匿名内部类对象\n\n其实，object还有一个非常重要的作用，就是生成单例对象。如果你需要在Kotlin语言中使用单例，非常简单，只需要使用object关键字即可。\n\n```\nobject Singleton {\n    fun f1() {\n        \n    }\n    \n    fun f2() {\n        \n    }\n}\n```\n\n这种方式声明object和上面的方式略有区别，其最终会生成一个名为Singleton的类，并在类中生成一个静态代码块进行单例对象生成：\n\n```\npublic final class Singleton\n{\n  public static final Singleton INSTANCE;\n  \n  public final void f1() {}\n  \n  public final void f2() {}\n  \n  static\n  {\n    Singleton localSingleton = new Singleton();INSTANCE = localSingleton;\n  }\n}\n```\n\n在Kotlin语言中对方法进行访问的时候最终其实是通过**INSTANCE**实例进行中转的。\n\n在Kotlin语言中还有一个很常用的object叫做伴随对象。所谓的伴随对象只不过是名字叫做**Companion**的object而已。它主要用于类中生成类似Java的静态变量，Kotlin语言针对这个变量会认为你只是希望生成一个静态变量，而不希望引入多余的类。如果你是和Java语言混合开发的话，可以使用一个注解生成和Java语言静态变量完全一样的效果。\n\n## 简单总结\nKotlin语言中使用object命名的方式的确容易让人误认为只要使用这个关键字就是生成了一个对象。而从上文的表述当中，你会发现，其实不同的使用姿势将产生不同的效果。因此，在日常使用中一定要学会随机应变。如果遇到了不明白的问题，不妨来看看这篇文章是否已经解答了你的问题。如果没有，请在文章下方留言告诉我。\n\n## 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n","slug":"kotlin/你是否也被Kotlin语言的object绕晕了呢","published":1,"updated":"2019-04-28T12:39:23.525Z","_id":"cjv0x7ui0003tbkb4o9luy7hm","layout":"post","photos":[],"link":"","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-499d2f2f3e299b80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<p>近日，在笔者的Kotlin语言交流群中。的确发现了一些同学对<strong>object</strong>的用法有一些疑问。于是，出现了下面这样错误的用法：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-a0f15e2bb073278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>很自然的想法，c是一个接口类型的成员变量，访问外部类的成员变量，这不是理所应当的吗？</p>\n<p>即使查看Kotlin官方文档，也有这样一段描述：</p>\n<blockquote>\n<p>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Java handles this case with anonymous inner classes. Kotlin slightly generalizes this concept with object expressions and object declarations.</p>\n</blockquote>\n<p>核心意思是：Kotlin使用object代替Java匿名内部类实现。</p>\n<p>很明显，即便如此，这里的访问应该也是合情合理的。从匿名内部类中访问成员变量在Java语言中是完全允许的。</p>\n<p>这个问题很有意思，解答这个我们需要生成Java字节码，再反编译成Java看看具体生成的代码是什么。</p>\n<p>借助<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">JD-GUI</a>，我们可以看到下面的内容：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Outer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  private String a;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static final class c</span><br><span class=\"line\">    implements Moveable</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    public static final c INSTANCE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      c localc = new c();INSTANCE = localc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void move()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Moveable.DefaultImpls.move(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很有意思，我们在Kotlin类中object部分的代码最终变成了下面这个样子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final class c implements Moveable &#123;</span><br><span class=\"line\">   public static final c INSTANCE;</span><br><span class=\"line\">   static &#123;</span><br><span class=\"line\">     c localc = new c();INSTANCE = localc;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public void move() &#123;</span><br><span class=\"line\">     Moveable.DefaultImpls.move(this);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个静态内部类，很明显，静态内部类是不能访问外部类成员变量的。可是问题来了，说好的匿名内部类呢？</p>\n<p>这里一定要注意，如果你只是这样声明了一个object，Kotlin认为你是需要一个静态内部类。而如果你用一个变量去接收object表达式，Kotlin认为你需要一个匿名内部类对象。</p>\n<p>因此，这个类应该这样改进：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    private var a: String? = null</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 用变量c去接收object表达式</span><br><span class=\"line\">    private val c = object: Moveable &#123;</span><br><span class=\"line\">        override fun move() &#123;</span><br><span class=\"line\">            super.move()</span><br><span class=\"line\">            // 改进后，这里访问正常</span><br><span class=\"line\">            println(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了避免出现这个问题，谨记一个原则：如果object只是声明，它代表一个静态内部类。如果用变量接收object表达式，它代表一个匿名内部类对象。</p>\n</blockquote>\n<h2 id=\"object能干啥？\"><a href=\"#object能干啥？\" class=\"headerlink\" title=\"object能干啥？\"></a>object能干啥？</h2><p>很自然地想到，Kotlin的object到底有什么作用。其实，从上文的表述来看。很明显，object至少有下面两个作用：</p>\n<ul>\n<li>简化生成静态内部类</li>\n<li>生成匿名内部类对象</li>\n</ul>\n<p>其实，object还有一个非常重要的作用，就是生成单例对象。如果你需要在Kotlin语言中使用单例，非常简单，只需要使用object关键字即可。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Singleton &#123;</span><br><span class=\"line\">    fun f1() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun f2() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式声明object和上面的方式略有区别，其最终会生成一个名为Singleton的类，并在类中生成一个静态代码块进行单例对象生成：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public static final Singleton INSTANCE;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public final void f1() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public final void f2() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  static</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Singleton localSingleton = new Singleton();INSTANCE = localSingleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Kotlin语言中对方法进行访问的时候最终其实是通过<strong>INSTANCE</strong>实例进行中转的。</p>\n<p>在Kotlin语言中还有一个很常用的object叫做伴随对象。所谓的伴随对象只不过是名字叫做<strong>Companion</strong>的object而已。它主要用于类中生成类似Java的静态变量，Kotlin语言针对这个变量会认为你只是希望生成一个静态变量，而不希望引入多余的类。如果你是和Java语言混合开发的话，可以使用一个注解生成和Java语言静态变量完全一样的效果。</p>\n<h2 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h2><p>Kotlin语言中使用object命名的方式的确容易让人误认为只要使用这个关键字就是生成了一个对象。而从上文的表述当中，你会发现，其实不同的使用姿势将产生不同的效果。因此，在日常使用中一定要学会随机应变。如果遇到了不明白的问题，不妨来看看这篇文章是否已经解答了你的问题。如果没有，请在文章下方留言告诉我。</p>\n<h2 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h2><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-499d2f2f3e299b80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<p>近日，在笔者的Kotlin语言交流群中。的确发现了一些同学对<strong>object</strong>的用法有一些疑问。于是，出现了下面这样错误的用法：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-a0f15e2bb073278a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>很自然的想法，c是一个接口类型的成员变量，访问外部类的成员变量，这不是理所应当的吗？</p>\n<p>即使查看Kotlin官方文档，也有这样一段描述：</p>\n<blockquote>\n<p>Sometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Java handles this case with anonymous inner classes. Kotlin slightly generalizes this concept with object expressions and object declarations.</p>\n</blockquote>\n<p>核心意思是：Kotlin使用object代替Java匿名内部类实现。</p>\n<p>很明显，即便如此，这里的访问应该也是合情合理的。从匿名内部类中访问成员变量在Java语言中是完全允许的。</p>\n<p>这个问题很有意思，解答这个我们需要生成Java字节码，再反编译成Java看看具体生成的代码是什么。</p>\n<p>借助<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">JD-GUI</a>，我们可以看到下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Outer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  private String a;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static final class c</span><br><span class=\"line\">    implements Moveable</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    public static final c INSTANCE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      c localc = new c();INSTANCE = localc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void move()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Moveable.DefaultImpls.move(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很有意思，我们在Kotlin类中object部分的代码最终变成了下面这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final class c implements Moveable &#123;</span><br><span class=\"line\">   public static final c INSTANCE;</span><br><span class=\"line\">   static &#123;</span><br><span class=\"line\">     c localc = new c();INSTANCE = localc;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public void move() &#123;</span><br><span class=\"line\">     Moveable.DefaultImpls.move(this);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个静态内部类，很明显，静态内部类是不能访问外部类成员变量的。可是问题来了，说好的匿名内部类呢？</p>\n<p>这里一定要注意，如果你只是这样声明了一个object，Kotlin认为你是需要一个静态内部类。而如果你用一个变量去接收object表达式，Kotlin认为你需要一个匿名内部类对象。</p>\n<p>因此，这个类应该这样改进：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Outer &#123;</span><br><span class=\"line\">    private var a: String? = null</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 用变量c去接收object表达式</span><br><span class=\"line\">    private val c = object: Moveable &#123;</span><br><span class=\"line\">        override fun move() &#123;</span><br><span class=\"line\">            super.move()</span><br><span class=\"line\">            // 改进后，这里访问正常</span><br><span class=\"line\">            println(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了避免出现这个问题，谨记一个原则：如果object只是声明，它代表一个静态内部类。如果用变量接收object表达式，它代表一个匿名内部类对象。</p>\n</blockquote>\n<h2 id=\"object能干啥？\"><a href=\"#object能干啥？\" class=\"headerlink\" title=\"object能干啥？\"></a>object能干啥？</h2><p>很自然地想到，Kotlin的object到底有什么作用。其实，从上文的表述来看。很明显，object至少有下面两个作用：</p>\n<ul>\n<li>简化生成静态内部类</li>\n<li>生成匿名内部类对象</li>\n</ul>\n<p>其实，object还有一个非常重要的作用，就是生成单例对象。如果你需要在Kotlin语言中使用单例，非常简单，只需要使用object关键字即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Singleton &#123;</span><br><span class=\"line\">    fun f1() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun f2() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式声明object和上面的方式略有区别，其最终会生成一个名为Singleton的类，并在类中生成一个静态代码块进行单例对象生成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public static final Singleton INSTANCE;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public final void f1() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public final void f2() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  static</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Singleton localSingleton = new Singleton();INSTANCE = localSingleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Kotlin语言中对方法进行访问的时候最终其实是通过<strong>INSTANCE</strong>实例进行中转的。</p>\n<p>在Kotlin语言中还有一个很常用的object叫做伴随对象。所谓的伴随对象只不过是名字叫做<strong>Companion</strong>的object而已。它主要用于类中生成类似Java的静态变量，Kotlin语言针对这个变量会认为你只是希望生成一个静态变量，而不希望引入多余的类。如果你是和Java语言混合开发的话，可以使用一个注解生成和Java语言静态变量完全一样的效果。</p>\n<h2 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h2><p>Kotlin语言中使用object命名的方式的确容易让人误认为只要使用这个关键字就是生成了一个对象。而从上文的表述当中，你会发现，其实不同的使用姿势将产生不同的效果。因此，在日常使用中一定要学会随机应变。如果遇到了不明白的问题，不妨来看看这篇文章是否已经解答了你的问题。如果没有，请在文章下方留言告诉我。</p>\n<h2 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h2><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"关于Kotlin抛弃可检测的异常处理，你怎么看？","date":"2018-04-27T06:57:00.000Z","comments":1,"_content":"\n> 可检测的异常英文翻译为**Checked Exception**，以下简称为CE。CE是一个备受争议的话题，有人主张CE是一个不可或缺的特性，也有人认为CE带来了一些问题，是一个冗余特性。这其中的支持者和反对者中都不乏软件行业的大佬。今天，我们借助这篇文章一起来讨论一下CE存在的必要性。\n\n# 什么是CE\n部分同学可能还不知道CE到底是什么。因此，在开始命题之前，有必要给大家解释一下CE的概念。\n\nCE其实你每天都在用，只是你不知道它的存在而已。看一个例子你就明白了：\n\n```\npublic void readString() throws IOException, FileNotFoundException {}\n```\n\n在这个函数声明的最后面，我们指定了函数可能抛出的异常，在使用的时候我们就可以针对具体的异常使用`try {} catch() {}`进行处理了。\n\n由于我们在方法声明中指定了可能抛出的异常，因此方法具体可能抛出的异常是已知的，这就称之为可检测的异常（CE）。由于CE的声明来自编译阶段，因此IDE可能帮助你智能判断强制你针对某些异常进行处理，并给出友好提示。\n\n这是一个很好的特性，不是吗？\n\n想象一下，如果有一天，我们不能在函数上指定可抛出的异常了，会怎样？我们无法确定函数可能抛出的异常，并且可能会因为没有正确处理某个异常而导致程序奔溃。\n\n可是，就是有人认为CE多此一举，并且Kotlin语言就是其中的支持者。为什么会有人坚定地认为CE多此一举呢？这是下一个我们要讨论的话题。\n\n# 关于CE的争论\nJava语言的CE设计借鉴了C++，而在受到Java影响的那些语言中，例如C#、Ruby等都去掉了CE的设计，这从实践的角度证明CE的存在确实意义不大。\n\n在这个问题中，C#的主导工程师Anders Hejlsberg最有发言权。老实说，笔者并没有用过C#。可是，如果你搜索一下网络上关于C#和Java对比的文章你就会发现：C#被认为是一门比Java更优秀的编程语言，它始终在新增一些现代语言的特性，使你毫不费力地使用它。而Java作为一门古老的语言，受限于一些原始设计，在增加新特性时总是步履维艰，甚至有点不伦不类。\n\n关于CE的设计，有人对Anders Hejlsberg进行过一次采访。采访的原文链接在这里：[https://www.artima.com/intv/handcuffs.html](https://www.artima.com/intv/handcuffs.html)\n\n关于CE，Anders Hejlsberg认为它带来了两个问题**版本问题**和**扩展问题**。\n\n所谓的版本问题是什么意思呢？Anders Hejlsberg举了一个例子：\n> 假设有一个方法foo，它声明了抛出异常A、B和C，在下一个版本设计的时候，foo增加了一个新的特性，可能会抛出异常D。对于设计者来说，很明显这是一个大的改变，几乎可以确定的是，客户程序员不会去处理这个异常。为了避免出现问题，设计者不得不声明一个新的方法foo2，抛出一个新的异常。然后，客户程序员可以将针对foo的逻辑处理切换到foo2。\n\n而所谓的扩展问题又是什么意思呢？这更好理解，以下来自Anders Hejlsberg的原话翻译并整理：\n> 如果你在设计一个很小的系统，声明一个方法抛出一个异常，这很棒。可是，如果你尝试构建一个大的系统，其中包含了四、五个小系统的时候，问题来了。假设每个子系统可能抛出四到五个异常，而每上升一个系统，就犹如爬阶梯，异常数量会指数倍增加，最终你可能处理的异常将达到40个甚至80个。很显然，这是一个很糟糕的设计！\n\nAnders Hejlsberg的话有理有据。可是，中国的 [王垠](https://baike.baidu.com/item/%E7%8E%8B%E5%9E%A0/6826943?fr=aladdin) 并不同意这个观点。关于Kotlin的CE设计，他写了一篇文章专门讲了这个问题，文章的原稿在这里：[Kotlin 和 Checked Exception\n](http://www.yinwang.org/blog-cn/2017/05/23/kotlin)\n\n看完王垠的文章，你会发现，他并不赞同Anders Hejlsberg的话。他认为，所谓的版本问题和扩展问题，其实都来自于程序员的滥用。只要处理得当，CE带来的好处是无法取代的。\n\n其实，关于CE的争论还远不止Anders Hejlsberg和王垠两人。互联网上有很多关于这个问题的讨论。如果你感兴趣，可以Google了解一下。\n\n# 你怎么看？\n很显然，Kotlin语言受到了C#设计的影响，手起刀落，去掉了CE的设计。对于客户程序员来说，显而易见的一个改变是，你再也不能在Kotlin的方法声明中指定可能抛出的异常了。对于Kotlin语言的这种设计，你是赞成还是反对呢？\n\n# 欢迎参与投票讨论\n扫描下方二维码关注**欧阳锋工作室**，回复“CE”参与投票，或在所有文章中选择同名文章进行投票。\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","source":"_posts/kotlin/关于Kotlin抛弃可检测的异常处理，你怎么看？.md","raw":"title: 关于Kotlin抛弃可检测的异常处理，你怎么看？\ndate: 2018/04/27 14:57\ncomments: true\ntags:\n- Kotlin\n- 编程语言\ncategories:\n- Kotlin\n- 基础知识\n---\n\n> 可检测的异常英文翻译为**Checked Exception**，以下简称为CE。CE是一个备受争议的话题，有人主张CE是一个不可或缺的特性，也有人认为CE带来了一些问题，是一个冗余特性。这其中的支持者和反对者中都不乏软件行业的大佬。今天，我们借助这篇文章一起来讨论一下CE存在的必要性。\n\n# 什么是CE\n部分同学可能还不知道CE到底是什么。因此，在开始命题之前，有必要给大家解释一下CE的概念。\n\nCE其实你每天都在用，只是你不知道它的存在而已。看一个例子你就明白了：\n\n```\npublic void readString() throws IOException, FileNotFoundException {}\n```\n\n在这个函数声明的最后面，我们指定了函数可能抛出的异常，在使用的时候我们就可以针对具体的异常使用`try {} catch() {}`进行处理了。\n\n由于我们在方法声明中指定了可能抛出的异常，因此方法具体可能抛出的异常是已知的，这就称之为可检测的异常（CE）。由于CE的声明来自编译阶段，因此IDE可能帮助你智能判断强制你针对某些异常进行处理，并给出友好提示。\n\n这是一个很好的特性，不是吗？\n\n想象一下，如果有一天，我们不能在函数上指定可抛出的异常了，会怎样？我们无法确定函数可能抛出的异常，并且可能会因为没有正确处理某个异常而导致程序奔溃。\n\n可是，就是有人认为CE多此一举，并且Kotlin语言就是其中的支持者。为什么会有人坚定地认为CE多此一举呢？这是下一个我们要讨论的话题。\n\n# 关于CE的争论\nJava语言的CE设计借鉴了C++，而在受到Java影响的那些语言中，例如C#、Ruby等都去掉了CE的设计，这从实践的角度证明CE的存在确实意义不大。\n\n在这个问题中，C#的主导工程师Anders Hejlsberg最有发言权。老实说，笔者并没有用过C#。可是，如果你搜索一下网络上关于C#和Java对比的文章你就会发现：C#被认为是一门比Java更优秀的编程语言，它始终在新增一些现代语言的特性，使你毫不费力地使用它。而Java作为一门古老的语言，受限于一些原始设计，在增加新特性时总是步履维艰，甚至有点不伦不类。\n\n关于CE的设计，有人对Anders Hejlsberg进行过一次采访。采访的原文链接在这里：[https://www.artima.com/intv/handcuffs.html](https://www.artima.com/intv/handcuffs.html)\n\n关于CE，Anders Hejlsberg认为它带来了两个问题**版本问题**和**扩展问题**。\n\n所谓的版本问题是什么意思呢？Anders Hejlsberg举了一个例子：\n> 假设有一个方法foo，它声明了抛出异常A、B和C，在下一个版本设计的时候，foo增加了一个新的特性，可能会抛出异常D。对于设计者来说，很明显这是一个大的改变，几乎可以确定的是，客户程序员不会去处理这个异常。为了避免出现问题，设计者不得不声明一个新的方法foo2，抛出一个新的异常。然后，客户程序员可以将针对foo的逻辑处理切换到foo2。\n\n而所谓的扩展问题又是什么意思呢？这更好理解，以下来自Anders Hejlsberg的原话翻译并整理：\n> 如果你在设计一个很小的系统，声明一个方法抛出一个异常，这很棒。可是，如果你尝试构建一个大的系统，其中包含了四、五个小系统的时候，问题来了。假设每个子系统可能抛出四到五个异常，而每上升一个系统，就犹如爬阶梯，异常数量会指数倍增加，最终你可能处理的异常将达到40个甚至80个。很显然，这是一个很糟糕的设计！\n\nAnders Hejlsberg的话有理有据。可是，中国的 [王垠](https://baike.baidu.com/item/%E7%8E%8B%E5%9E%A0/6826943?fr=aladdin) 并不同意这个观点。关于Kotlin的CE设计，他写了一篇文章专门讲了这个问题，文章的原稿在这里：[Kotlin 和 Checked Exception\n](http://www.yinwang.org/blog-cn/2017/05/23/kotlin)\n\n看完王垠的文章，你会发现，他并不赞同Anders Hejlsberg的话。他认为，所谓的版本问题和扩展问题，其实都来自于程序员的滥用。只要处理得当，CE带来的好处是无法取代的。\n\n其实，关于CE的争论还远不止Anders Hejlsberg和王垠两人。互联网上有很多关于这个问题的讨论。如果你感兴趣，可以Google了解一下。\n\n# 你怎么看？\n很显然，Kotlin语言受到了C#设计的影响，手起刀落，去掉了CE的设计。对于客户程序员来说，显而易见的一个改变是，你再也不能在Kotlin的方法声明中指定可能抛出的异常了。对于Kotlin语言的这种设计，你是赞成还是反对呢？\n\n# 欢迎参与投票讨论\n扫描下方二维码关注**欧阳锋工作室**，回复“CE”参与投票，或在所有文章中选择同名文章进行投票。\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","slug":"kotlin/关于Kotlin抛弃可检测的异常处理，你怎么看？","published":1,"updated":"2019-04-28T12:39:23.525Z","_id":"cjv0x7ui2003wbkb4ylpq2hsi","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>可检测的异常英文翻译为<strong>Checked Exception</strong>，以下简称为CE。CE是一个备受争议的话题，有人主张CE是一个不可或缺的特性，也有人认为CE带来了一些问题，是一个冗余特性。这其中的支持者和反对者中都不乏软件行业的大佬。今天，我们借助这篇文章一起来讨论一下CE存在的必要性。</p>\n</blockquote>\n<h1 id=\"什么是CE\"><a href=\"#什么是CE\" class=\"headerlink\" title=\"什么是CE\"></a>什么是CE</h1><p>部分同学可能还不知道CE到底是什么。因此，在开始命题之前，有必要给大家解释一下CE的概念。</p>\n<p>CE其实你每天都在用，只是你不知道它的存在而已。看一个例子你就明白了：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void readString() throws IOException, FileNotFoundException &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个函数声明的最后面，我们指定了函数可能抛出的异常，在使用的时候我们就可以针对具体的异常使用<code>try {} catch() {}</code>进行处理了。</p>\n<p>由于我们在方法声明中指定了可能抛出的异常，因此方法具体可能抛出的异常是已知的，这就称之为可检测的异常（CE）。由于CE的声明来自编译阶段，因此IDE可能帮助你智能判断强制你针对某些异常进行处理，并给出友好提示。</p>\n<p>这是一个很好的特性，不是吗？</p>\n<p>想象一下，如果有一天，我们不能在函数上指定可抛出的异常了，会怎样？我们无法确定函数可能抛出的异常，并且可能会因为没有正确处理某个异常而导致程序奔溃。</p>\n<p>可是，就是有人认为CE多此一举，并且Kotlin语言就是其中的支持者。为什么会有人坚定地认为CE多此一举呢？这是下一个我们要讨论的话题。</p>\n<h1 id=\"关于CE的争论\"><a href=\"#关于CE的争论\" class=\"headerlink\" title=\"关于CE的争论\"></a>关于CE的争论</h1><p>Java语言的CE设计借鉴了C++，而在受到Java影响的那些语言中，例如C#、Ruby等都去掉了CE的设计，这从实践的角度证明CE的存在确实意义不大。</p>\n<p>在这个问题中，C#的主导工程师Anders Hejlsberg最有发言权。老实说，笔者并没有用过C#。可是，如果你搜索一下网络上关于C#和Java对比的文章你就会发现：C#被认为是一门比Java更优秀的编程语言，它始终在新增一些现代语言的特性，使你毫不费力地使用它。而Java作为一门古老的语言，受限于一些原始设计，在增加新特性时总是步履维艰，甚至有点不伦不类。</p>\n<p>关于CE的设计，有人对Anders Hejlsberg进行过一次采访。采访的原文链接在这里：<a href=\"https://www.artima.com/intv/handcuffs.html\" target=\"_blank\" rel=\"noopener\">https://www.artima.com/intv/handcuffs.html</a></p>\n<p>关于CE，Anders Hejlsberg认为它带来了两个问题<strong>版本问题</strong>和<strong>扩展问题</strong>。</p>\n<p>所谓的版本问题是什么意思呢？Anders Hejlsberg举了一个例子：</p>\n<blockquote>\n<p>假设有一个方法foo，它声明了抛出异常A、B和C，在下一个版本设计的时候，foo增加了一个新的特性，可能会抛出异常D。对于设计者来说，很明显这是一个大的改变，几乎可以确定的是，客户程序员不会去处理这个异常。为了避免出现问题，设计者不得不声明一个新的方法foo2，抛出一个新的异常。然后，客户程序员可以将针对foo的逻辑处理切换到foo2。</p>\n</blockquote>\n<p>而所谓的扩展问题又是什么意思呢？这更好理解，以下来自Anders Hejlsberg的原话翻译并整理：</p>\n<blockquote>\n<p>如果你在设计一个很小的系统，声明一个方法抛出一个异常，这很棒。可是，如果你尝试构建一个大的系统，其中包含了四、五个小系统的时候，问题来了。假设每个子系统可能抛出四到五个异常，而每上升一个系统，就犹如爬阶梯，异常数量会指数倍增加，最终你可能处理的异常将达到40个甚至80个。很显然，这是一个很糟糕的设计！</p>\n</blockquote>\n<p>Anders Hejlsberg的话有理有据。可是，中国的 <a href=\"https://baike.baidu.com/item/%E7%8E%8B%E5%9E%A0/6826943?fr=aladdin\" target=\"_blank\" rel=\"noopener\">王垠</a> 并不同意这个观点。关于Kotlin的CE设计，他写了一篇文章专门讲了这个问题，文章的原稿在这里：<a href=\"http://www.yinwang.org/blog-cn/2017/05/23/kotlin\" target=\"_blank\" rel=\"noopener\">Kotlin 和 Checked Exception\n</a></p>\n<p>看完王垠的文章，你会发现，他并不赞同Anders Hejlsberg的话。他认为，所谓的版本问题和扩展问题，其实都来自于程序员的滥用。只要处理得当，CE带来的好处是无法取代的。</p>\n<p>其实，关于CE的争论还远不止Anders Hejlsberg和王垠两人。互联网上有很多关于这个问题的讨论。如果你感兴趣，可以Google了解一下。</p>\n<h1 id=\"你怎么看？\"><a href=\"#你怎么看？\" class=\"headerlink\" title=\"你怎么看？\"></a>你怎么看？</h1><p>很显然，Kotlin语言受到了C#设计的影响，手起刀落，去掉了CE的设计。对于客户程序员来说，显而易见的一个改变是，你再也不能在Kotlin的方法声明中指定可能抛出的异常了。对于Kotlin语言的这种设计，你是赞成还是反对呢？</p>\n<h1 id=\"欢迎参与投票讨论\"><a href=\"#欢迎参与投票讨论\" class=\"headerlink\" title=\"欢迎参与投票讨论\"></a>欢迎参与投票讨论</h1><p>扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复“CE”参与投票，或在所有文章中选择同名文章进行投票。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>可检测的异常英文翻译为<strong>Checked Exception</strong>，以下简称为CE。CE是一个备受争议的话题，有人主张CE是一个不可或缺的特性，也有人认为CE带来了一些问题，是一个冗余特性。这其中的支持者和反对者中都不乏软件行业的大佬。今天，我们借助这篇文章一起来讨论一下CE存在的必要性。</p>\n</blockquote>\n<h1 id=\"什么是CE\"><a href=\"#什么是CE\" class=\"headerlink\" title=\"什么是CE\"></a>什么是CE</h1><p>部分同学可能还不知道CE到底是什么。因此，在开始命题之前，有必要给大家解释一下CE的概念。</p>\n<p>CE其实你每天都在用，只是你不知道它的存在而已。看一个例子你就明白了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void readString() throws IOException, FileNotFoundException &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个函数声明的最后面，我们指定了函数可能抛出的异常，在使用的时候我们就可以针对具体的异常使用<code>try {} catch() {}</code>进行处理了。</p>\n<p>由于我们在方法声明中指定了可能抛出的异常，因此方法具体可能抛出的异常是已知的，这就称之为可检测的异常（CE）。由于CE的声明来自编译阶段，因此IDE可能帮助你智能判断强制你针对某些异常进行处理，并给出友好提示。</p>\n<p>这是一个很好的特性，不是吗？</p>\n<p>想象一下，如果有一天，我们不能在函数上指定可抛出的异常了，会怎样？我们无法确定函数可能抛出的异常，并且可能会因为没有正确处理某个异常而导致程序奔溃。</p>\n<p>可是，就是有人认为CE多此一举，并且Kotlin语言就是其中的支持者。为什么会有人坚定地认为CE多此一举呢？这是下一个我们要讨论的话题。</p>\n<h1 id=\"关于CE的争论\"><a href=\"#关于CE的争论\" class=\"headerlink\" title=\"关于CE的争论\"></a>关于CE的争论</h1><p>Java语言的CE设计借鉴了C++，而在受到Java影响的那些语言中，例如C#、Ruby等都去掉了CE的设计，这从实践的角度证明CE的存在确实意义不大。</p>\n<p>在这个问题中，C#的主导工程师Anders Hejlsberg最有发言权。老实说，笔者并没有用过C#。可是，如果你搜索一下网络上关于C#和Java对比的文章你就会发现：C#被认为是一门比Java更优秀的编程语言，它始终在新增一些现代语言的特性，使你毫不费力地使用它。而Java作为一门古老的语言，受限于一些原始设计，在增加新特性时总是步履维艰，甚至有点不伦不类。</p>\n<p>关于CE的设计，有人对Anders Hejlsberg进行过一次采访。采访的原文链接在这里：<a href=\"https://www.artima.com/intv/handcuffs.html\" target=\"_blank\" rel=\"noopener\">https://www.artima.com/intv/handcuffs.html</a></p>\n<p>关于CE，Anders Hejlsberg认为它带来了两个问题<strong>版本问题</strong>和<strong>扩展问题</strong>。</p>\n<p>所谓的版本问题是什么意思呢？Anders Hejlsberg举了一个例子：</p>\n<blockquote>\n<p>假设有一个方法foo，它声明了抛出异常A、B和C，在下一个版本设计的时候，foo增加了一个新的特性，可能会抛出异常D。对于设计者来说，很明显这是一个大的改变，几乎可以确定的是，客户程序员不会去处理这个异常。为了避免出现问题，设计者不得不声明一个新的方法foo2，抛出一个新的异常。然后，客户程序员可以将针对foo的逻辑处理切换到foo2。</p>\n</blockquote>\n<p>而所谓的扩展问题又是什么意思呢？这更好理解，以下来自Anders Hejlsberg的原话翻译并整理：</p>\n<blockquote>\n<p>如果你在设计一个很小的系统，声明一个方法抛出一个异常，这很棒。可是，如果你尝试构建一个大的系统，其中包含了四、五个小系统的时候，问题来了。假设每个子系统可能抛出四到五个异常，而每上升一个系统，就犹如爬阶梯，异常数量会指数倍增加，最终你可能处理的异常将达到40个甚至80个。很显然，这是一个很糟糕的设计！</p>\n</blockquote>\n<p>Anders Hejlsberg的话有理有据。可是，中国的 <a href=\"https://baike.baidu.com/item/%E7%8E%8B%E5%9E%A0/6826943?fr=aladdin\" target=\"_blank\" rel=\"noopener\">王垠</a> 并不同意这个观点。关于Kotlin的CE设计，他写了一篇文章专门讲了这个问题，文章的原稿在这里：<a href=\"http://www.yinwang.org/blog-cn/2017/05/23/kotlin\" target=\"_blank\" rel=\"noopener\">Kotlin 和 Checked Exception\n</a></p>\n<p>看完王垠的文章，你会发现，他并不赞同Anders Hejlsberg的话。他认为，所谓的版本问题和扩展问题，其实都来自于程序员的滥用。只要处理得当，CE带来的好处是无法取代的。</p>\n<p>其实，关于CE的争论还远不止Anders Hejlsberg和王垠两人。互联网上有很多关于这个问题的讨论。如果你感兴趣，可以Google了解一下。</p>\n<h1 id=\"你怎么看？\"><a href=\"#你怎么看？\" class=\"headerlink\" title=\"你怎么看？\"></a>你怎么看？</h1><p>很显然，Kotlin语言受到了C#设计的影响，手起刀落，去掉了CE的设计。对于客户程序员来说，显而易见的一个改变是，你再也不能在Kotlin的方法声明中指定可能抛出的异常了。对于Kotlin语言的这种设计，你是赞成还是反对呢？</p>\n<h1 id=\"欢迎参与投票讨论\"><a href=\"#欢迎参与投票讨论\" class=\"headerlink\" title=\"欢迎参与投票讨论\"></a>欢迎参与投票讨论</h1><p>扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复“CE”参与投票，或在所有文章中选择同名文章进行投票。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"测测你的Kotlin基础","date":"2018-04-27T07:09:00.000Z","comments":1,"_content":"\n\n![文 | 欧阳锋](https://user-gold-cdn.xitu.io/2018/4/25/162fabff1c2028ae?w=2250&h=500&f=png&s=60530)\n\n> 本次测试满分160分，测测看，你能拿几分 <<<\n\n#### 1）Kotlin语言有基本数据类型吗？（5分）\n\n#### 2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\n\n#### 3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\n\n#### 4）Sealed类有什么作用？（5分）\n\n#### 5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\n\n#### 6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\n\n#### 7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\n\n#### 8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\n\n#### 9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\n\n#### 10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\n\n#### 11）如果使用`Foo<out T: TUpper>`这种方式声明泛型，使用`Foo<*>`这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\n\n#### 12）如何自定义setter/getter方法？（5分）\n\n#### 13）使用语句`var x = null`声明变量x是否合法？如果合法，x的具体类型是什么？(5分)\n\n#### 14）下面这段代码的输出结果是什么？（10分）\n\n```\nval list = listOf(1, 2, 3)\nlist.add(4)\nprintln(list)\n```\n\n#### 15）下面这段代码的执行结果是什么？（5分）\n\n```\n// Kotlin端\nobject A {\n    fun init() {\n        println(\"A init\")\n    }\n}\n\n// Java端\nA.init()\n```\n\n#### 16）下面代码的执行结果是什么？（5分）\n\n```\nfun sum(a: Int, b: Int) = { a + b }\n\nprintln(sum(1, 3))\n```\n\n#### 17）下面代码的执行结果是什么？（5分）\n\n```\nprintln(null is Any)\nprintln(null!! is Nothing)\n```\n\n#### 18）下面代码的执行结果是什么？（10分）\n\n```\nclass A {\n    init() {\n        f()\n    }\n    \n    val a = \"a\"\n    \n    fun f() {\n        println(a)\n    }\n}\n\nfun main(args: Array<String>) {\n    A()\n}\n```\n\n#### 19）下面代码的执行结果是什么？（10分）\n\n```\nprintln(127 as Int? === 127 as Int?)\nprintln(128 as Int? === 128 as Int?)\n```\n\n#### 20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\n\n```\n (1..5).forEach {\n    if (it == 3) break\n    println(it)\n }\n```\n\n#### 21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\n\n```\nval A.x: Int = 3\n\nprintln(A().x)\n```\n\n#### 22）下面这段代码的执行结果是什么？（10分）\n\n```\nfun isOdd(x: Int) = x % 2 != 0\n\nfun length(s: String) = s.length\n\nfun <A, B, C> compose(f: (B) -> C, g: (A) -> B): (A) -> C {\n    return { x -> f(g(x)) }\n}\n\nfun main(args: Array<String>) {\n    val oddLength = compose(::isOdd, ::length)\n    val strings = listOf(\"a\", \"ab\", \"abc\")\n    println(strings.filter(oddLength))\n}\n```\n\n**注：本篇例子Kotlin版本为1.2.31，更新版本可能存在部分差异**\n\n#### 下面是你的基础等级：\n\n得分|评价\n:---:|:---:\n0 ~ 80|基础较差\n80 ~ 108 | 基础较好\n108 ~ 160 | 基础很棒\n\n# 查看答案方法\n微信扫描下方二维码关注**欧阳锋工作室**，回复“Kotlin测试题答案”即可获取当前测试题答案\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","source":"_posts/kotlin/测测你的Kotlin基础.md","raw":"title: 测测你的Kotlin基础\ndate: 2018/04/27 15:09\ncomments: true\ntags:\n- Kotlin\n- 编程语言\ncategories:\n- Kotlin\n- 基础知识\n---\n\n\n![文 | 欧阳锋](https://user-gold-cdn.xitu.io/2018/4/25/162fabff1c2028ae?w=2250&h=500&f=png&s=60530)\n\n> 本次测试满分160分，测测看，你能拿几分 <<<\n\n#### 1）Kotlin语言有基本数据类型吗？（5分）\n\n#### 2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\n\n#### 3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\n\n#### 4）Sealed类有什么作用？（5分）\n\n#### 5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\n\n#### 6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\n\n#### 7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\n\n#### 8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\n\n#### 9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\n\n#### 10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\n\n#### 11）如果使用`Foo<out T: TUpper>`这种方式声明泛型，使用`Foo<*>`这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\n\n#### 12）如何自定义setter/getter方法？（5分）\n\n#### 13）使用语句`var x = null`声明变量x是否合法？如果合法，x的具体类型是什么？(5分)\n\n#### 14）下面这段代码的输出结果是什么？（10分）\n\n```\nval list = listOf(1, 2, 3)\nlist.add(4)\nprintln(list)\n```\n\n#### 15）下面这段代码的执行结果是什么？（5分）\n\n```\n// Kotlin端\nobject A {\n    fun init() {\n        println(\"A init\")\n    }\n}\n\n// Java端\nA.init()\n```\n\n#### 16）下面代码的执行结果是什么？（5分）\n\n```\nfun sum(a: Int, b: Int) = { a + b }\n\nprintln(sum(1, 3))\n```\n\n#### 17）下面代码的执行结果是什么？（5分）\n\n```\nprintln(null is Any)\nprintln(null!! is Nothing)\n```\n\n#### 18）下面代码的执行结果是什么？（10分）\n\n```\nclass A {\n    init() {\n        f()\n    }\n    \n    val a = \"a\"\n    \n    fun f() {\n        println(a)\n    }\n}\n\nfun main(args: Array<String>) {\n    A()\n}\n```\n\n#### 19）下面代码的执行结果是什么？（10分）\n\n```\nprintln(127 as Int? === 127 as Int?)\nprintln(128 as Int? === 128 as Int?)\n```\n\n#### 20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\n\n```\n (1..5).forEach {\n    if (it == 3) break\n    println(it)\n }\n```\n\n#### 21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\n\n```\nval A.x: Int = 3\n\nprintln(A().x)\n```\n\n#### 22）下面这段代码的执行结果是什么？（10分）\n\n```\nfun isOdd(x: Int) = x % 2 != 0\n\nfun length(s: String) = s.length\n\nfun <A, B, C> compose(f: (B) -> C, g: (A) -> B): (A) -> C {\n    return { x -> f(g(x)) }\n}\n\nfun main(args: Array<String>) {\n    val oddLength = compose(::isOdd, ::length)\n    val strings = listOf(\"a\", \"ab\", \"abc\")\n    println(strings.filter(oddLength))\n}\n```\n\n**注：本篇例子Kotlin版本为1.2.31，更新版本可能存在部分差异**\n\n#### 下面是你的基础等级：\n\n得分|评价\n:---:|:---:\n0 ~ 80|基础较差\n80 ~ 108 | 基础较好\n108 ~ 160 | 基础很棒\n\n# 查看答案方法\n微信扫描下方二维码关注**欧阳锋工作室**，回复“Kotlin测试题答案”即可获取当前测试题答案\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。","slug":"kotlin/测测你的Kotlin基础","published":1,"updated":"2019-04-28T12:39:23.526Z","_id":"cjv0x7ui4003zbkb4irm1nnmy","layout":"post","photos":[],"link":"","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabff1c2028ae?w=2250&amp;h=500&amp;f=png&amp;s=60530\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>本次测试满分160分，测测看，你能拿几分 &lt;&lt;&lt;</p>\n</blockquote>\n<h4 id=\"1）Kotlin语言有基本数据类型吗？（5分）\"><a href=\"#1）Kotlin语言有基本数据类型吗？（5分）\" class=\"headerlink\" title=\"1）Kotlin语言有基本数据类型吗？（5分）\"></a>1）Kotlin语言有基本数据类型吗？（5分）</h4><h4 id=\"2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\"><a href=\"#2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\" class=\"headerlink\" title=\"2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\"></a>2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）</h4><h4 id=\"3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\"><a href=\"#3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\" class=\"headerlink\" title=\"3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\"></a>3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）</h4><h4 id=\"4）Sealed类有什么作用？（5分）\"><a href=\"#4）Sealed类有什么作用？（5分）\" class=\"headerlink\" title=\"4）Sealed类有什么作用？（5分）\"></a>4）Sealed类有什么作用？（5分）</h4><h4 id=\"5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\"><a href=\"#5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\" class=\"headerlink\" title=\"5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\"></a>5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）</h4><h4 id=\"6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\"><a href=\"#6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\" class=\"headerlink\" title=\"6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\"></a>6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）</h4><h4 id=\"7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\"><a href=\"#7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\" class=\"headerlink\" title=\"7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\"></a>7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）</h4><h4 id=\"8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\"><a href=\"#8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\" class=\"headerlink\" title=\"8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\"></a>8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）</h4><h4 id=\"9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\"><a href=\"#9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\" class=\"headerlink\" title=\"9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\"></a>9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）</h4><h4 id=\"10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\"><a href=\"#10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\" class=\"headerlink\" title=\"10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\"></a>10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）</h4><h4 id=\"11）如果使用Foo-lt-out-T-TUpper-gt-这种方式声明泛型，使用Foo-lt-gt-这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\"><a href=\"#11）如果使用Foo-lt-out-T-TUpper-gt-这种方式声明泛型，使用Foo-lt-gt-这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\" class=\"headerlink\" title=\"11）如果使用Foo&lt;out T: TUpper&gt;这种方式声明泛型，使用Foo&lt;*&gt;这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\"></a>11）如果使用<code>Foo&lt;out T: TUpper&gt;</code>这种方式声明泛型，使用<code>Foo&lt;*&gt;</code>这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）</h4><h4 id=\"12）如何自定义setter-getter方法？（5分）\"><a href=\"#12）如何自定义setter-getter方法？（5分）\" class=\"headerlink\" title=\"12）如何自定义setter/getter方法？（5分）\"></a>12）如何自定义setter/getter方法？（5分）</h4><h4 id=\"13）使用语句var-x-null声明变量x是否合法？如果合法，x的具体类型是什么？-5分\"><a href=\"#13）使用语句var-x-null声明变量x是否合法？如果合法，x的具体类型是什么？-5分\" class=\"headerlink\" title=\"13）使用语句var x = null声明变量x是否合法？如果合法，x的具体类型是什么？(5分)\"></a>13）使用语句<code>var x = null</code>声明变量x是否合法？如果合法，x的具体类型是什么？(5分)</h4><h4 id=\"14）下面这段代码的输出结果是什么？（10分）\"><a href=\"#14）下面这段代码的输出结果是什么？（10分）\" class=\"headerlink\" title=\"14）下面这段代码的输出结果是什么？（10分）\"></a>14）下面这段代码的输出结果是什么？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val list = listOf(1, 2, 3)</span><br><span class=\"line\">list.add(4)</span><br><span class=\"line\">println(list)</span><br></pre></td></tr></table></figure>\n<h4 id=\"15）下面这段代码的执行结果是什么？（5分）\"><a href=\"#15）下面这段代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"15）下面这段代码的执行结果是什么？（5分）\"></a>15）下面这段代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Kotlin端</span><br><span class=\"line\">object A &#123;</span><br><span class=\"line\">    fun init() &#123;</span><br><span class=\"line\">        println(&quot;A init&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Java端</span><br><span class=\"line\">A.init()</span><br></pre></td></tr></table></figure>\n<h4 id=\"16）下面代码的执行结果是什么？（5分）\"><a href=\"#16）下面代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"16）下面代码的执行结果是什么？（5分）\"></a>16）下面代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun sum(a: Int, b: Int) = &#123; a + b &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(sum(1, 3))</span><br></pre></td></tr></table></figure>\n<h4 id=\"17）下面代码的执行结果是什么？（5分）\"><a href=\"#17）下面代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"17）下面代码的执行结果是什么？（5分）\"></a>17）下面代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(null is Any)</span><br><span class=\"line\">println(null!! is Nothing)</span><br></pre></td></tr></table></figure>\n<h4 id=\"18）下面代码的执行结果是什么？（10分）\"><a href=\"#18）下面代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"18）下面代码的执行结果是什么？（10分）\"></a>18）下面代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">        f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    val a = &quot;a&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun f() &#123;</span><br><span class=\"line\">        println(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    A()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"19）下面代码的执行结果是什么？（10分）\"><a href=\"#19）下面代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"19）下面代码的执行结果是什么？（10分）\"></a>19）下面代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(127 as Int? === 127 as Int?)</span><br><span class=\"line\">println(128 as Int? === 128 as Int?)</span><br></pre></td></tr></table></figure>\n<h4 id=\"20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\"><a href=\"#20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\" class=\"headerlink\" title=\"20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\"></a>20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1..5).forEach &#123;</span><br><span class=\"line\">   if (it == 3) break</span><br><span class=\"line\">   println(it)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\"><a href=\"#21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\" class=\"headerlink\" title=\"21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\"></a>21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val A.x: Int = 3</span><br><span class=\"line\"></span><br><span class=\"line\">println(A().x)</span><br></pre></td></tr></table></figure>\n<h4 id=\"22）下面这段代码的执行结果是什么？（10分）\"><a href=\"#22）下面这段代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"22）下面这段代码的执行结果是什么？（10分）\"></a>22）下面这段代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun isOdd(x: Int) = x % 2 != 0</span><br><span class=\"line\"></span><br><span class=\"line\">fun length(s: String) = s.length</span><br><span class=\"line\"></span><br><span class=\"line\">fun &lt;A, B, C&gt; compose(f: (B) -&gt; C, g: (A) -&gt; B): (A) -&gt; C &#123;</span><br><span class=\"line\">    return &#123; x -&gt; f(g(x)) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val oddLength = compose(::isOdd, ::length)</span><br><span class=\"line\">    val strings = listOf(&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;)</span><br><span class=\"line\">    println(strings.filter(oddLength))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：本篇例子Kotlin版本为1.2.31，更新版本可能存在部分差异</strong></p>\n<h4 id=\"下面是你的基础等级：\"><a href=\"#下面是你的基础等级：\" class=\"headerlink\" title=\"下面是你的基础等级：\"></a>下面是你的基础等级：</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">得分</th>\n<th style=\"text-align:center\">评价</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0 ~ 80</td>\n<td style=\"text-align:center\">基础较差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80 ~ 108</td>\n<td style=\"text-align:center\">基础较好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">108 ~ 160</td>\n<td style=\"text-align:center\">基础很棒</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"查看答案方法\"><a href=\"#查看答案方法\" class=\"headerlink\" title=\"查看答案方法\"></a>查看答案方法</h1><p>微信扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复“Kotlin测试题答案”即可获取当前测试题答案</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabff1c2028ae?w=2250&amp;h=500&amp;f=png&amp;s=60530\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>本次测试满分160分，测测看，你能拿几分 &lt;&lt;&lt;</p>\n</blockquote>\n<h4 id=\"1）Kotlin语言有基本数据类型吗？（5分）\"><a href=\"#1）Kotlin语言有基本数据类型吗？（5分）\" class=\"headerlink\" title=\"1）Kotlin语言有基本数据类型吗？（5分）\"></a>1）Kotlin语言有基本数据类型吗？（5分）</h4><h4 id=\"2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\"><a href=\"#2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\" class=\"headerlink\" title=\"2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）\"></a>2）Kotlin中有哪些访问控制符，分别代表什么意思？默认访问控制符是什么？（5分）</h4><h4 id=\"3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\"><a href=\"#3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\" class=\"headerlink\" title=\"3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）\"></a>3）Kotlin接口是否允许有方法实现？是否允许声明成员变量？（5分）</h4><h4 id=\"4）Sealed类有什么作用？（5分）\"><a href=\"#4）Sealed类有什么作用？（5分）\" class=\"headerlink\" title=\"4）Sealed类有什么作用？（5分）\"></a>4）Sealed类有什么作用？（5分）</h4><h4 id=\"5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\"><a href=\"#5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\" class=\"headerlink\" title=\"5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）\"></a>5）Kotlin语言中如何实现类似Java创建匿名内部类对象？（10分）</h4><h4 id=\"6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\"><a href=\"#6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\" class=\"headerlink\" title=\"6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）\"></a>6）Kotlin的扩展相对继承有什么优势？扩展方法的执行是否也遵循多态？（10分）</h4><h4 id=\"7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\"><a href=\"#7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\" class=\"headerlink\" title=\"7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）\"></a>7）如果一个类同时实现多个接口，接口中存在同名方法，如何解决冲突？（5分）</h4><h4 id=\"8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\"><a href=\"#8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\" class=\"headerlink\" title=\"8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）\"></a>8）Kotlin语言中是否存在static关键字，如果没有，如何声明静态变量，并实现与Java互通（5分）</h4><h4 id=\"9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\"><a href=\"#9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\" class=\"headerlink\" title=\"9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）\"></a>9）使用Kotlin语言是否一定不会出现空指针异常？为什么？（10分）</h4><h4 id=\"10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\"><a href=\"#10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\" class=\"headerlink\" title=\"10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）\"></a>10）Kotlin语言中推荐使用什么方式判断两个对象是否相等？如何判断两个对象是同一个对象？（5分）</h4><h4 id=\"11）如果使用Foo-lt-out-T-TUpper-gt-这种方式声明泛型，使用Foo-lt-gt-这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\"><a href=\"#11）如果使用Foo-lt-out-T-TUpper-gt-这种方式声明泛型，使用Foo-lt-gt-这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\" class=\"headerlink\" title=\"11）如果使用Foo&lt;out T: TUpper&gt;这种方式声明泛型，使用Foo&lt;*&gt;这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）\"></a>11）如果使用<code>Foo&lt;out T: TUpper&gt;</code>这种方式声明泛型，使用<code>Foo&lt;*&gt;</code>这种方式接收该对象实例，代表什么意思？如何理解Kotlin泛型，与Java有什么区别？（10分）</h4><h4 id=\"12）如何自定义setter-getter方法？（5分）\"><a href=\"#12）如何自定义setter-getter方法？（5分）\" class=\"headerlink\" title=\"12）如何自定义setter/getter方法？（5分）\"></a>12）如何自定义setter/getter方法？（5分）</h4><h4 id=\"13）使用语句var-x-null声明变量x是否合法？如果合法，x的具体类型是什么？-5分\"><a href=\"#13）使用语句var-x-null声明变量x是否合法？如果合法，x的具体类型是什么？-5分\" class=\"headerlink\" title=\"13）使用语句var x = null声明变量x是否合法？如果合法，x的具体类型是什么？(5分)\"></a>13）使用语句<code>var x = null</code>声明变量x是否合法？如果合法，x的具体类型是什么？(5分)</h4><h4 id=\"14）下面这段代码的输出结果是什么？（10分）\"><a href=\"#14）下面这段代码的输出结果是什么？（10分）\" class=\"headerlink\" title=\"14）下面这段代码的输出结果是什么？（10分）\"></a>14）下面这段代码的输出结果是什么？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val list = listOf(1, 2, 3)</span><br><span class=\"line\">list.add(4)</span><br><span class=\"line\">println(list)</span><br></pre></td></tr></table></figure>\n<h4 id=\"15）下面这段代码的执行结果是什么？（5分）\"><a href=\"#15）下面这段代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"15）下面这段代码的执行结果是什么？（5分）\"></a>15）下面这段代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Kotlin端</span><br><span class=\"line\">object A &#123;</span><br><span class=\"line\">    fun init() &#123;</span><br><span class=\"line\">        println(&quot;A init&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Java端</span><br><span class=\"line\">A.init()</span><br></pre></td></tr></table></figure>\n<h4 id=\"16）下面代码的执行结果是什么？（5分）\"><a href=\"#16）下面代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"16）下面代码的执行结果是什么？（5分）\"></a>16）下面代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun sum(a: Int, b: Int) = &#123; a + b &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(sum(1, 3))</span><br></pre></td></tr></table></figure>\n<h4 id=\"17）下面代码的执行结果是什么？（5分）\"><a href=\"#17）下面代码的执行结果是什么？（5分）\" class=\"headerlink\" title=\"17）下面代码的执行结果是什么？（5分）\"></a>17）下面代码的执行结果是什么？（5分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(null is Any)</span><br><span class=\"line\">println(null!! is Nothing)</span><br></pre></td></tr></table></figure>\n<h4 id=\"18）下面代码的执行结果是什么？（10分）\"><a href=\"#18）下面代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"18）下面代码的执行结果是什么？（10分）\"></a>18）下面代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">        f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    val a = &quot;a&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun f() &#123;</span><br><span class=\"line\">        println(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    A()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"19）下面代码的执行结果是什么？（10分）\"><a href=\"#19）下面代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"19）下面代码的执行结果是什么？（10分）\"></a>19）下面代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(127 as Int? === 127 as Int?)</span><br><span class=\"line\">println(128 as Int? === 128 as Int?)</span><br></pre></td></tr></table></figure>\n<h4 id=\"20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\"><a href=\"#20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\" class=\"headerlink\" title=\"20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）\"></a>20）下面代码的执行结果是什么？如果运行异常，应该怎样修改才能达到预期效果？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1..5).forEach &#123;</span><br><span class=\"line\">   if (it == 3) break</span><br><span class=\"line\">   println(it)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\"><a href=\"#21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\" class=\"headerlink\" title=\"21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）\"></a>21）下面代码的执行结果是什么？如果运行异常，应该怎样修改，为什么要这样修改？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val A.x: Int = 3</span><br><span class=\"line\"></span><br><span class=\"line\">println(A().x)</span><br></pre></td></tr></table></figure>\n<h4 id=\"22）下面这段代码的执行结果是什么？（10分）\"><a href=\"#22）下面这段代码的执行结果是什么？（10分）\" class=\"headerlink\" title=\"22）下面这段代码的执行结果是什么？（10分）\"></a>22）下面这段代码的执行结果是什么？（10分）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun isOdd(x: Int) = x % 2 != 0</span><br><span class=\"line\"></span><br><span class=\"line\">fun length(s: String) = s.length</span><br><span class=\"line\"></span><br><span class=\"line\">fun &lt;A, B, C&gt; compose(f: (B) -&gt; C, g: (A) -&gt; B): (A) -&gt; C &#123;</span><br><span class=\"line\">    return &#123; x -&gt; f(g(x)) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val oddLength = compose(::isOdd, ::length)</span><br><span class=\"line\">    val strings = listOf(&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;)</span><br><span class=\"line\">    println(strings.filter(oddLength))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：本篇例子Kotlin版本为1.2.31，更新版本可能存在部分差异</strong></p>\n<h4 id=\"下面是你的基础等级：\"><a href=\"#下面是你的基础等级：\" class=\"headerlink\" title=\"下面是你的基础等级：\"></a>下面是你的基础等级：</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">得分</th>\n<th style=\"text-align:center\">评价</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0 ~ 80</td>\n<td style=\"text-align:center\">基础较差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80 ~ 108</td>\n<td style=\"text-align:center\">基础较好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">108 ~ 160</td>\n<td style=\"text-align:center\">基础很棒</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"查看答案方法\"><a href=\"#查看答案方法\" class=\"headerlink\" title=\"查看答案方法\"></a>查看答案方法</h1><p>微信扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复“Kotlin测试题答案”即可获取当前测试题答案</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"Android两行代码实现仿微信滑动返回效果","date":"2018-03-06T01:57:00.000Z","comments":1,"_content":"\n![](http://upload-images.jianshu.io/upload_images/703764-017d5942c296de5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>iPhone滑动关闭页面是一个非常讨喜的设计。滑动关闭可以让你聚焦屏幕内容，而不需要因为返回突然切换思维到屏幕下方寻找返回按钮。事实上，在使用Android手机的时候，我经常这样做。原因是，Android不同机型的返回按钮位置不一样。以至于在更换机型后我常常找不到返回按钮，需要一段时间的适应期。而滑动关闭就可以有效地避免这个问题，目前已经有很多类型的Android应用开始支持滑动关闭，比如你熟悉的微信、快手等都已经支持了滑动返回效果。使用 [Snake](https://github.com/yuanhoujun/Android_Slide_To_Close) 框架你只需要两行代码就可以搞定滑动关闭集成...\n\n如果你还不知道Snake是什么，请关注简书下面的文章：\n* [Snake 让你轻松实现类似iOS滑动关闭功能](https://www.jianshu.com/p/3619d65739b4)\n* [Snake版本升级到0.0.5啦](https://www.jianshu.com/p/f7d5e422fa79)\n* [将滑动关闭进行到底](https://www.jianshu.com/p/7cf6864c9bde)\n* [Snake版本再升级，支持类iPhone X上滑退出到桌面功能](https://www.jianshu.com/p/71c27a671500)\n\n![Snake](http://upload-images.jianshu.io/upload_images/703764-44c47eb5362b573c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 初体验\n如果你需要在Activity中实现滑动关闭效果，使用如下两个步骤即可：\n* 在你的Application中对Snake进行初始化：`Snake.init(this)`\n* 在你的Activity类的onCreate方法中对其进行托管：`Snake.host(this)`\n\n以上两个方法已经完成了Activity滑动关闭集成，为了开启滑动关闭功能，你还需要在Activity类顶部添加`@EnableDragToClose`注解\n\n## Snake设计思路\n为了保证Snake框架尽可能灵活，我使用了注解实现单页固定滑动参数配置。而全局配置则使用单独的**snake.xml**文件进行配置。同时，为了支持动态关闭和开启，在Snake类中提供了相关API用于动态控制滑动关闭和开启。\n\n## 设计目标\n看过Snake官方文档的同学会发现，Snake并不提供左滑关闭或者其它方向关闭页面的设置，Snake也没有提供不同的关闭效果设置。没有这样设计的原因很简单，因为这种关闭效果并不常见，这样的设计不过是哗众取宠，浪费时间，且增加使用难度。\n\n我的目标是：尽可能简化Snake设计，仅提供必要API，且专注于滑动关闭效果实现。\n\n## 新版本来了\n这是本篇文章的重点，昨天，[Snake 0.3.0](https://github.com/yuanhoujun/Android_Slide_To_Close/blob/develop/docs/update_log_0.3.0.md) 版本已经发布了。\n\n0.3.0版本主要针对Fragment提供了继承方式集成：\n##### 使用方法\n按照下面的对应关系，改变你的Fragment父类就可以完成滑动关闭集成:\n* `android.app.Fragment` => `com.youngfeng.snake.app.Fragment`\n* `android.support.v4.app.Fragment` => `com.youngfeng.snake.support.v4.app.Fragment`\n\n**注意：使用继承方式集成的情况下，原来的API完全可以通用。你可以选择使用Snake的API进行滑动控制，也可以使用父类中的方法进行滑动控制，这取决于你自己。甚至实例创建你依然可以交给newProxy/newProxySupport接口。**\n\n详细信息，请查看官方文档：[https://github.com/yuanhoujun/Android_Slide_To_Close](https://github.com/yuanhoujun/Android_Slide_To_Close)\n\n## 交流群\nQQ群：288177681\n如果你在使用Snake的过程中，遇到任何问题，请使用QQ群联系我。\n\n---\n我是 [欧阳锋](https://www.jianshu.com/p/0c5d14fbaf1a)，开源的道路上，我与你同行。\n","source":"_posts/open source/Android两行代码实现仿微信滑动返回效果.md","raw":"title: Android两行代码实现仿微信滑动返回效果\ndate: 2018/3/6 09:57\ncomments: true\ntags:\n- Android\n- 滑动返回\n- 开源\ncategories:\n- 开源\n---\n\n![](http://upload-images.jianshu.io/upload_images/703764-017d5942c296de5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>iPhone滑动关闭页面是一个非常讨喜的设计。滑动关闭可以让你聚焦屏幕内容，而不需要因为返回突然切换思维到屏幕下方寻找返回按钮。事实上，在使用Android手机的时候，我经常这样做。原因是，Android不同机型的返回按钮位置不一样。以至于在更换机型后我常常找不到返回按钮，需要一段时间的适应期。而滑动关闭就可以有效地避免这个问题，目前已经有很多类型的Android应用开始支持滑动关闭，比如你熟悉的微信、快手等都已经支持了滑动返回效果。使用 [Snake](https://github.com/yuanhoujun/Android_Slide_To_Close) 框架你只需要两行代码就可以搞定滑动关闭集成...\n\n如果你还不知道Snake是什么，请关注简书下面的文章：\n* [Snake 让你轻松实现类似iOS滑动关闭功能](https://www.jianshu.com/p/3619d65739b4)\n* [Snake版本升级到0.0.5啦](https://www.jianshu.com/p/f7d5e422fa79)\n* [将滑动关闭进行到底](https://www.jianshu.com/p/7cf6864c9bde)\n* [Snake版本再升级，支持类iPhone X上滑退出到桌面功能](https://www.jianshu.com/p/71c27a671500)\n\n![Snake](http://upload-images.jianshu.io/upload_images/703764-44c47eb5362b573c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 初体验\n如果你需要在Activity中实现滑动关闭效果，使用如下两个步骤即可：\n* 在你的Application中对Snake进行初始化：`Snake.init(this)`\n* 在你的Activity类的onCreate方法中对其进行托管：`Snake.host(this)`\n\n以上两个方法已经完成了Activity滑动关闭集成，为了开启滑动关闭功能，你还需要在Activity类顶部添加`@EnableDragToClose`注解\n\n## Snake设计思路\n为了保证Snake框架尽可能灵活，我使用了注解实现单页固定滑动参数配置。而全局配置则使用单独的**snake.xml**文件进行配置。同时，为了支持动态关闭和开启，在Snake类中提供了相关API用于动态控制滑动关闭和开启。\n\n## 设计目标\n看过Snake官方文档的同学会发现，Snake并不提供左滑关闭或者其它方向关闭页面的设置，Snake也没有提供不同的关闭效果设置。没有这样设计的原因很简单，因为这种关闭效果并不常见，这样的设计不过是哗众取宠，浪费时间，且增加使用难度。\n\n我的目标是：尽可能简化Snake设计，仅提供必要API，且专注于滑动关闭效果实现。\n\n## 新版本来了\n这是本篇文章的重点，昨天，[Snake 0.3.0](https://github.com/yuanhoujun/Android_Slide_To_Close/blob/develop/docs/update_log_0.3.0.md) 版本已经发布了。\n\n0.3.0版本主要针对Fragment提供了继承方式集成：\n##### 使用方法\n按照下面的对应关系，改变你的Fragment父类就可以完成滑动关闭集成:\n* `android.app.Fragment` => `com.youngfeng.snake.app.Fragment`\n* `android.support.v4.app.Fragment` => `com.youngfeng.snake.support.v4.app.Fragment`\n\n**注意：使用继承方式集成的情况下，原来的API完全可以通用。你可以选择使用Snake的API进行滑动控制，也可以使用父类中的方法进行滑动控制，这取决于你自己。甚至实例创建你依然可以交给newProxy/newProxySupport接口。**\n\n详细信息，请查看官方文档：[https://github.com/yuanhoujun/Android_Slide_To_Close](https://github.com/yuanhoujun/Android_Slide_To_Close)\n\n## 交流群\nQQ群：288177681\n如果你在使用Snake的过程中，遇到任何问题，请使用QQ群联系我。\n\n---\n我是 [欧阳锋](https://www.jianshu.com/p/0c5d14fbaf1a)，开源的道路上，我与你同行。\n","slug":"open source/Android两行代码实现仿微信滑动返回效果","published":1,"updated":"2019-04-28T12:39:23.527Z","_id":"cjv0x7ui80042bkb49gc1byly","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-017d5942c296de5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>iPhone滑动关闭页面是一个非常讨喜的设计。滑动关闭可以让你聚焦屏幕内容，而不需要因为返回突然切换思维到屏幕下方寻找返回按钮。事实上，在使用Android手机的时候，我经常这样做。原因是，Android不同机型的返回按钮位置不一样。以至于在更换机型后我常常找不到返回按钮，需要一段时间的适应期。而滑动关闭就可以有效地避免这个问题，目前已经有很多类型的Android应用开始支持滑动关闭，比如你熟悉的微信、快手等都已经支持了滑动返回效果。使用 <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Snake</a> 框架你只需要两行代码就可以搞定滑动关闭集成…</p>\n</blockquote>\n<p>如果你还不知道Snake是什么，请关注简书下面的文章：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/3619d65739b4\" target=\"_blank\" rel=\"noopener\">Snake 让你轻松实现类似iOS滑动关闭功能</a></li>\n<li><a href=\"https://www.jianshu.com/p/f7d5e422fa79\" target=\"_blank\" rel=\"noopener\">Snake版本升级到0.0.5啦</a></li>\n<li><a href=\"https://www.jianshu.com/p/7cf6864c9bde\" target=\"_blank\" rel=\"noopener\">将滑动关闭进行到底</a></li>\n<li><a href=\"https://www.jianshu.com/p/71c27a671500\" target=\"_blank\" rel=\"noopener\">Snake版本再升级，支持类iPhone X上滑退出到桌面功能</a></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-44c47eb5362b573c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Snake\"></p>\n<h2 id=\"初体验\"><a href=\"#初体验\" class=\"headerlink\" title=\"初体验\"></a>初体验</h2><p>如果你需要在Activity中实现滑动关闭效果，使用如下两个步骤即可：</p>\n<ul>\n<li>在你的Application中对Snake进行初始化：<code>Snake.init(this)</code></li>\n<li>在你的Activity类的onCreate方法中对其进行托管：<code>Snake.host(this)</code></li>\n</ul>\n<p>以上两个方法已经完成了Activity滑动关闭集成，为了开启滑动关闭功能，你还需要在Activity类顶部添加<code>@EnableDragToClose</code>注解</p>\n<h2 id=\"Snake设计思路\"><a href=\"#Snake设计思路\" class=\"headerlink\" title=\"Snake设计思路\"></a>Snake设计思路</h2><p>为了保证Snake框架尽可能灵活，我使用了注解实现单页固定滑动参数配置。而全局配置则使用单独的<strong>snake.xml</strong>文件进行配置。同时，为了支持动态关闭和开启，在Snake类中提供了相关API用于动态控制滑动关闭和开启。</p>\n<h2 id=\"设计目标\"><a href=\"#设计目标\" class=\"headerlink\" title=\"设计目标\"></a>设计目标</h2><p>看过Snake官方文档的同学会发现，Snake并不提供左滑关闭或者其它方向关闭页面的设置，Snake也没有提供不同的关闭效果设置。没有这样设计的原因很简单，因为这种关闭效果并不常见，这样的设计不过是哗众取宠，浪费时间，且增加使用难度。</p>\n<p>我的目标是：尽可能简化Snake设计，仅提供必要API，且专注于滑动关闭效果实现。</p>\n<h2 id=\"新版本来了\"><a href=\"#新版本来了\" class=\"headerlink\" title=\"新版本来了\"></a>新版本来了</h2><p>这是本篇文章的重点，昨天，<a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close/blob/develop/docs/update_log_0.3.0.md\" target=\"_blank\" rel=\"noopener\">Snake 0.3.0</a> 版本已经发布了。</p>\n<p>0.3.0版本主要针对Fragment提供了继承方式集成：</p>\n<h5 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><p>按照下面的对应关系，改变你的Fragment父类就可以完成滑动关闭集成:</p>\n<ul>\n<li><code>android.app.Fragment</code> =&gt; <code>com.youngfeng.snake.app.Fragment</code></li>\n<li><code>android.support.v4.app.Fragment</code> =&gt; <code>com.youngfeng.snake.support.v4.app.Fragment</code></li>\n</ul>\n<p><strong>注意：使用继承方式集成的情况下，原来的API完全可以通用。你可以选择使用Snake的API进行滑动控制，也可以使用父类中的方法进行滑动控制，这取决于你自己。甚至实例创建你依然可以交给newProxy/newProxySupport接口。</strong></p>\n<p>详细信息，请查看官方文档：<a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/Android_Slide_To_Close</a></p>\n<h2 id=\"交流群\"><a href=\"#交流群\" class=\"headerlink\" title=\"交流群\"></a>交流群</h2><p>QQ群：288177681<br>如果你在使用Snake的过程中，遇到任何问题，请使用QQ群联系我。</p>\n<hr>\n<p>我是 <a href=\"https://www.jianshu.com/p/0c5d14fbaf1a\" target=\"_blank\" rel=\"noopener\">欧阳锋</a>，开源的道路上，我与你同行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-017d5942c296de5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>iPhone滑动关闭页面是一个非常讨喜的设计。滑动关闭可以让你聚焦屏幕内容，而不需要因为返回突然切换思维到屏幕下方寻找返回按钮。事实上，在使用Android手机的时候，我经常这样做。原因是，Android不同机型的返回按钮位置不一样。以至于在更换机型后我常常找不到返回按钮，需要一段时间的适应期。而滑动关闭就可以有效地避免这个问题，目前已经有很多类型的Android应用开始支持滑动关闭，比如你熟悉的微信、快手等都已经支持了滑动返回效果。使用 <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Snake</a> 框架你只需要两行代码就可以搞定滑动关闭集成…</p>\n</blockquote>\n<p>如果你还不知道Snake是什么，请关注简书下面的文章：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/3619d65739b4\" target=\"_blank\" rel=\"noopener\">Snake 让你轻松实现类似iOS滑动关闭功能</a></li>\n<li><a href=\"https://www.jianshu.com/p/f7d5e422fa79\" target=\"_blank\" rel=\"noopener\">Snake版本升级到0.0.5啦</a></li>\n<li><a href=\"https://www.jianshu.com/p/7cf6864c9bde\" target=\"_blank\" rel=\"noopener\">将滑动关闭进行到底</a></li>\n<li><a href=\"https://www.jianshu.com/p/71c27a671500\" target=\"_blank\" rel=\"noopener\">Snake版本再升级，支持类iPhone X上滑退出到桌面功能</a></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-44c47eb5362b573c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Snake\"></p>\n<h2 id=\"初体验\"><a href=\"#初体验\" class=\"headerlink\" title=\"初体验\"></a>初体验</h2><p>如果你需要在Activity中实现滑动关闭效果，使用如下两个步骤即可：</p>\n<ul>\n<li>在你的Application中对Snake进行初始化：<code>Snake.init(this)</code></li>\n<li>在你的Activity类的onCreate方法中对其进行托管：<code>Snake.host(this)</code></li>\n</ul>\n<p>以上两个方法已经完成了Activity滑动关闭集成，为了开启滑动关闭功能，你还需要在Activity类顶部添加<code>@EnableDragToClose</code>注解</p>\n<h2 id=\"Snake设计思路\"><a href=\"#Snake设计思路\" class=\"headerlink\" title=\"Snake设计思路\"></a>Snake设计思路</h2><p>为了保证Snake框架尽可能灵活，我使用了注解实现单页固定滑动参数配置。而全局配置则使用单独的<strong>snake.xml</strong>文件进行配置。同时，为了支持动态关闭和开启，在Snake类中提供了相关API用于动态控制滑动关闭和开启。</p>\n<h2 id=\"设计目标\"><a href=\"#设计目标\" class=\"headerlink\" title=\"设计目标\"></a>设计目标</h2><p>看过Snake官方文档的同学会发现，Snake并不提供左滑关闭或者其它方向关闭页面的设置，Snake也没有提供不同的关闭效果设置。没有这样设计的原因很简单，因为这种关闭效果并不常见，这样的设计不过是哗众取宠，浪费时间，且增加使用难度。</p>\n<p>我的目标是：尽可能简化Snake设计，仅提供必要API，且专注于滑动关闭效果实现。</p>\n<h2 id=\"新版本来了\"><a href=\"#新版本来了\" class=\"headerlink\" title=\"新版本来了\"></a>新版本来了</h2><p>这是本篇文章的重点，昨天，<a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close/blob/develop/docs/update_log_0.3.0.md\" target=\"_blank\" rel=\"noopener\">Snake 0.3.0</a> 版本已经发布了。</p>\n<p>0.3.0版本主要针对Fragment提供了继承方式集成：</p>\n<h5 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><p>按照下面的对应关系，改变你的Fragment父类就可以完成滑动关闭集成:</p>\n<ul>\n<li><code>android.app.Fragment</code> =&gt; <code>com.youngfeng.snake.app.Fragment</code></li>\n<li><code>android.support.v4.app.Fragment</code> =&gt; <code>com.youngfeng.snake.support.v4.app.Fragment</code></li>\n</ul>\n<p><strong>注意：使用继承方式集成的情况下，原来的API完全可以通用。你可以选择使用Snake的API进行滑动控制，也可以使用父类中的方法进行滑动控制，这取决于你自己。甚至实例创建你依然可以交给newProxy/newProxySupport接口。</strong></p>\n<p>详细信息，请查看官方文档：<a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/Android_Slide_To_Close</a></p>\n<h2 id=\"交流群\"><a href=\"#交流群\" class=\"headerlink\" title=\"交流群\"></a>交流群</h2><p>QQ群：288177681<br>如果你在使用Snake的过程中，遇到任何问题，请使用QQ群联系我。</p>\n<hr>\n<p>我是 <a href=\"https://www.jianshu.com/p/0c5d14fbaf1a\" target=\"_blank\" rel=\"noopener\">欧阳锋</a>，开源的道路上，我与你同行。</p>\n"},{"title":"Kotlin语言中的泛型设计哲学","date":"2018-04-17T15:16:00.000Z","comments":1,"_content":"\n![文 | 欧阳锋](https://upload-images.jianshu.io/upload_images/703764-912c5c8fce46d69d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Kotlin语言的泛型设计很有意思，但并不容易看懂。关于这个部分的官方文档，我反复看了好几次，终于弄明白Kotlin语言泛型设计的背后哲学。这篇文章将讲述Kotlin泛型设计的整个思考过程及其背后的哲学思想，希望可以解答你心中的疑问。不过，可以预见地，即使看完，你也未必完全明白这篇文章在说什么，但至少希望你通过这篇文章可以快速掌握Kotlin泛型的用法。\n\n## Kotlin泛型的设计初衷\n我们认为，Kotlin是一门比Java更优秀的JVM编程语言，Kotlin泛型设计的初衷就是为了解决Java泛型设计中一些不合理的问题。这样说可能不够直观，看下面这个例子：\n\n```\n List<String> strs = new ArrayList<>();\n// 这里将导致编译错误，Java语言不允许这样做\n List<Object> objs = strs;\n```\n\n很明显，String和Object之间存在着安全的隐式转换关系。存放字符串的集合应该可以自由转换为对象集合。这很合理，不是吗？\n\n如果你这样认为的话，就错了！继续往下看，我们扩展这个程序：\n\n```\nList<String> strs = new ArrayList<>();\nList<Object> objs = strs;\nobjs.add(1);\n\nString s = strs.get(0);\n```\n\n很明显，这不合理！我们在第一个位置存入了整型数值1，却在取的时候将它当成了字符串。strs本身是一个字符串集合，用字符串接收读取的数据的逻辑是合理的。却因为错误的类型转换导致了不安全写入出现了运行时类型转换问题，因此，Java语言不允许我们这样做。\n\n大多数情况下，这种限制没有问题。可是，在某些情况下，这并不合理。看下面的例子：\n\n```\ninterface List<T> {\n    void addAll(List<T> t);\n}\n\npublic void copy(List<String> from, List<Object> to) {\n   to.addAll(from);\n}\n```\n\n这是一个类型绝对安全的操作，但在Java语言中这依然是不允许的。原因是，泛型是一个编译期特性，一旦指定，运行期类型就已经固定了。换而言之，泛型操作的类型是不可变的。这就意味着，List<String>并不是List<Object>的子类型。\n\n为了允许正确执行上述操作，Java语言增加了神奇的通配符操作魔法。\n\n```\ninterface List<T> {\n  void addAll(List<? extends T> t);\n}\n```\n\n**? extends T**意味着集合中允许添加的类型不仅仅是T还包括T的子类，但这个集合中可以添加的类型在集合参数传入addAll时就已经确定了。因此，这并不影响参数集合中可以存放的数据类型，它带来的一个直接影响就是addAll方法参数中终于可以传入泛型参数是T或者T的子类的集合了，即上面的copy方法将不再报错。\n\n这很有意思，在使用通配符之前我们并不能传入类型参数为子类型的集合。使用通配符之后，居然可以了！这个特性在C#被称之为**协变**（covariant）。\n\n**协变**这个词来源于类型之间的绑定。以集合为例，假设有两个集合L1、L2分别绑定数据类型F、C，并且F、C之间存在着父子关系，即F、C之间存在着一种安全的从**C->F**的隐式转换关系。那么，集合L1和L2之间是否也存在着**L2->L1**的转换关系呢？这就牵扯到了原始类型转换到绑定类型的集合之间的转换映射关系，我们称之为“可变性”。如果原始类型转换和绑定类型之间转换的方向相同，就称之为“协变”。\n\n用一句话总结**协变**：如果绑定对象和原始对象之间存在着相同方向的转换关系，即称之为**协变**。\n\nPS：以上关于**协变**的概念来自笔者的总结，更严谨的概念请参考[C#官方文档](https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/index)。\n\n文章开头我们将不可变泛型通过通配符使其成为了可变泛型参数，现在我们知道这种行为叫做**协变**。很明显，**协变**转换中写入是不安全的。因此，**协变**行为仅仅用于读取。如果需要写入怎么办呢？这就牵扯到了另外一个概念**逆变**（contravariance）。\n\n**逆变**与**协变**恰恰相反，即如果F、C之间存在着父子转换关系，L1、L2之间存在着从**L1->L2**的转换关系。其绑定对象的转换关系与原始对象的转换关系恰好相反。Java语言使用关键字super（？super List）实现**逆变**。\n\n举个例子：假设有一个集合List<? super String>，你将可以安全地使用add(String)或set(Int，String)方法。但你不能通过get(Int)返回String对象，因为你无法确定返回的对象是否是String类型，你最终只能得到Object。\n\n因此，我们认为，**逆变**可以安全地写入数据，但并不能安全地读取，即最终不能获取具体的对象数据类型。\n\n为了简化理解，我们引入官方文档中 [Joshua Bloch](https://baike.baidu.com/item/Josh%20Bloch) 说的一句话：\n>Joshua Bloch calls those objects you only read from Producers, and those you only write to Consumers. He recommends: \"For maximum flexibility, use wildcard types on input parameters that represent producers or consumers\"\n\nJoshua Bloch是Java集合框架的创始人，他把那些只能读取的对象叫做生产者；只能写入的对象叫做消费者。为了保证最大灵活性，他推荐在那些代表了生产者和消费者的输入参数上使用通配符指定泛型。\n\n相对于Java的通配符，Kotlin语言针对**协变**和**逆变**引入两个新的关键词**out**和**in**。\n\n**out**用于**协变**，是只读的，属于生产者，即用在方法的返回值位置。而**in**用于**逆变**，是只写的，属于消费者，即用在方法的参数位置。\n\n用英文简记为：**POCI** = Producer Out , Consumer In。\n\n如果一个类中只有生产者，我们就可以在类头使用out声明该类是对泛型参数T**协变**的：\n\n```\ninterface Link<out T> {\n    fun node(): T\n}\n```\n\n同样地，如果一个类中只有消费者，我们就可以在类头使用in声明该类是对泛型参数T**逆变**的：\n\n```\ninterface Repo<in T> {\n    fun add(t: T)\n}\n```\n\n**out**等价于Java端的**? extends List**通配符，而**in**等价于Java端的**? super List**通配符。因此，类似下面的转换是合理的：\n\n```\ninterface Link<out T> {\n    fun node(): T\n}\n\nfun f1(linkStr: Link<String>) {\n    // 这是一个合理的协变转换\n    val linkAny: Link<Any> = linkStr\n}\n\ninterface Repo<in T> {\n    fun add(t: T)\n}\n\nfun f2(repoAny: Repo<Any>) {\n    // 这是一个合理的逆变转换\n    val repoStr: Repo<String> = repoAny\n}\n```\n\n## 小结：协变和逆变\n**协变**和**逆变**对于Java程序员来说是一个全新的概念，为了便于理解，我用一个表格做一个简单的总结：\n\n-|协变|逆变\n:---:|:---:|:---:\n关键字|out|in\n读写|只读|可写\n位置|返回值|参数\n角色|生产者|消费者\n\n## 类型投影\n在上面的例子中，我们直接在类体声明了泛型参数的协变或逆变类型。在这种情况下，就严格限制了该类中只允许出现该泛型参数的消费者或者生产者。很显然，这种场景并不多见，大多数情况下，一个类中既存在着消费者又存在着生产者。为了适应这种场景，我们可以将协变或逆变声明写在方法参数中。Kotlin官方将这种方式叫做 [类型投影（Type Projection）](https://kotlinlang.org/docs/reference/generics.html#use-site-variance-type-projections)。\n\n这里我们直接使用官方文档的例子：\n\n```\nclass Array<T>(val size: Int) {\n    fun get(index: Int): T { /* ... */ }\n    fun set(index: Int, value: T) { /* ... */ }\n}\n\nfun copy(from: Array<Any>, to: Array<Any>) {\n    assert(from.size == to.size)\n    for (i in from.indices)\n        to[i] = from[i]\n}\n\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3) { \"\" } \n\n// 由于泛型参数的不变性，这里将出现问题\ncopy(ints, any) \n```\n\n很明显，我们希望from参数可以接收元素为Any或其子类的任意元素，但我们并不希望修改from，以防止出现类似文章开头的问题。因此，我们可以在from参数中添加out修饰，使其协变：\n\n```\nfun copy(from: Array<out Any>, to: Array<Any>) {\n}\n```\n\n一旦添加out修饰符，你就会发现，当你尝试调用set方法的时候，编译器将会提示你在out修饰的情况下禁止调用该方法。\n\n注：Java语言在使用”协变“的情况下，from参数依然可以调用set方法。从这里可以看出，Kotlin语言在泛型安全控制上比Java更加精细。\n\n## 星号投影\n除了上述明确的类型投影方式之外，还有一种非常特殊的投影方式，称之为星号投影（star projection）。\n\n在某些情况下，我们并不知道具体的类型参数信息。为了适应这种情况，Java语言中我们会直接忽略掉类型参数：\n\n```\nclass Box<T> {\n     public void unPack(T t) {\n          ...\n     }\n}\n\n// 在不确定类型参数的情况下，我们会这样做\nBox box = new Box();\n```\n\n在Kotlin语言中，我们使用星号对这种情况进行处理。因为，Kotlin针对泛型有严格的读写区分。同样地，使用*号将限制泛型接口的读写操作：\n* `Foo<out T: TUpper>`，这种情况下，T是协变类型参数，上边界是TUpper。Foo<\\*>等价于Foo<out TUpper>，这意味着你可以安全地从Foo<\\*>读取TUpper类型。\n* `Foo<in T>`，在这种情况下，T是逆变类型参数，下边界是T。Foo<\\*>等价于Foo<in Nothing>，这意味着在T未知的情况下，你将无法安全写入Foo<\\*>。\n* `Foo<T: TUpper>`，在这种情况下，T是不可变的。Foo<\\*>等价于你可以使用Foo<out TUpper>安全读取值，写入等价于Foo<in Nothing>，即无法安全写入。\n\n## 泛型约束\n在泛型约束的控制上，Kotlin语言相对于Java也技高一筹。在大多数情况下，泛型约束需要指定一个上边界。这同Java一样，Kotlin使用冒号代替extends：\n\n```\nfun <T: Animal> catch(t: T) {}\n```\n\n在使用Java的时候，经常碰到这样一个需求。我希望泛型参数可以约束必须同时实现两个接口，但遗憾的是Java语言并没有给予支持。令人惊喜的是，Kotlin语言对这种场景给出了自己的实现：\n\n```\nfun <T> swap(first: List<T>, second: List<T>) where T: CharSequence, \n                                                    T: Comparable<T> {\n    \n} \n```\n\n可以看到，Kotlin语言使用where关键字控制泛型约束存在多个上边界的情况，此处应该给Kotlin鼓掌。\n\n## 总结\nKotlin语言使用**协变**和**逆变**来规范可变泛型操作，out关键字用于协变，代表生产者。in关键字用于逆变，代表消费者。out和in同样可以用于方法参数的泛型声明中，这称之为类型投影。在针对泛型类型约束的处理上，Kotlin增加了多个上边界的支持。\n\nKotlin语言最初是希望成为一门编译速度比Scala更快的JVM编程语言！为了更好地设计泛型，我们看到它从C#中引入了**协变**和**逆变**的概念。这一次，我想，它至少同时站在了Scala和C#的肩膀上。\n\n## 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n\n\n","source":"_posts/kotlin/Kotlin语言中的泛型设计哲学.md","raw":"title: Kotlin语言中的泛型设计哲学\ndate: 2018/04/17 23:16\ncomments: true\ntags:\n- Kotlin\n- 泛型\ncategories:\n- Kotlin\n- 基础知识\n---\n\n![文 | 欧阳锋](https://upload-images.jianshu.io/upload_images/703764-912c5c8fce46d69d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Kotlin语言的泛型设计很有意思，但并不容易看懂。关于这个部分的官方文档，我反复看了好几次，终于弄明白Kotlin语言泛型设计的背后哲学。这篇文章将讲述Kotlin泛型设计的整个思考过程及其背后的哲学思想，希望可以解答你心中的疑问。不过，可以预见地，即使看完，你也未必完全明白这篇文章在说什么，但至少希望你通过这篇文章可以快速掌握Kotlin泛型的用法。\n\n## Kotlin泛型的设计初衷\n我们认为，Kotlin是一门比Java更优秀的JVM编程语言，Kotlin泛型设计的初衷就是为了解决Java泛型设计中一些不合理的问题。这样说可能不够直观，看下面这个例子：\n\n```\n List<String> strs = new ArrayList<>();\n// 这里将导致编译错误，Java语言不允许这样做\n List<Object> objs = strs;\n```\n\n很明显，String和Object之间存在着安全的隐式转换关系。存放字符串的集合应该可以自由转换为对象集合。这很合理，不是吗？\n\n如果你这样认为的话，就错了！继续往下看，我们扩展这个程序：\n\n```\nList<String> strs = new ArrayList<>();\nList<Object> objs = strs;\nobjs.add(1);\n\nString s = strs.get(0);\n```\n\n很明显，这不合理！我们在第一个位置存入了整型数值1，却在取的时候将它当成了字符串。strs本身是一个字符串集合，用字符串接收读取的数据的逻辑是合理的。却因为错误的类型转换导致了不安全写入出现了运行时类型转换问题，因此，Java语言不允许我们这样做。\n\n大多数情况下，这种限制没有问题。可是，在某些情况下，这并不合理。看下面的例子：\n\n```\ninterface List<T> {\n    void addAll(List<T> t);\n}\n\npublic void copy(List<String> from, List<Object> to) {\n   to.addAll(from);\n}\n```\n\n这是一个类型绝对安全的操作，但在Java语言中这依然是不允许的。原因是，泛型是一个编译期特性，一旦指定，运行期类型就已经固定了。换而言之，泛型操作的类型是不可变的。这就意味着，List<String>并不是List<Object>的子类型。\n\n为了允许正确执行上述操作，Java语言增加了神奇的通配符操作魔法。\n\n```\ninterface List<T> {\n  void addAll(List<? extends T> t);\n}\n```\n\n**? extends T**意味着集合中允许添加的类型不仅仅是T还包括T的子类，但这个集合中可以添加的类型在集合参数传入addAll时就已经确定了。因此，这并不影响参数集合中可以存放的数据类型，它带来的一个直接影响就是addAll方法参数中终于可以传入泛型参数是T或者T的子类的集合了，即上面的copy方法将不再报错。\n\n这很有意思，在使用通配符之前我们并不能传入类型参数为子类型的集合。使用通配符之后，居然可以了！这个特性在C#被称之为**协变**（covariant）。\n\n**协变**这个词来源于类型之间的绑定。以集合为例，假设有两个集合L1、L2分别绑定数据类型F、C，并且F、C之间存在着父子关系，即F、C之间存在着一种安全的从**C->F**的隐式转换关系。那么，集合L1和L2之间是否也存在着**L2->L1**的转换关系呢？这就牵扯到了原始类型转换到绑定类型的集合之间的转换映射关系，我们称之为“可变性”。如果原始类型转换和绑定类型之间转换的方向相同，就称之为“协变”。\n\n用一句话总结**协变**：如果绑定对象和原始对象之间存在着相同方向的转换关系，即称之为**协变**。\n\nPS：以上关于**协变**的概念来自笔者的总结，更严谨的概念请参考[C#官方文档](https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/index)。\n\n文章开头我们将不可变泛型通过通配符使其成为了可变泛型参数，现在我们知道这种行为叫做**协变**。很明显，**协变**转换中写入是不安全的。因此，**协变**行为仅仅用于读取。如果需要写入怎么办呢？这就牵扯到了另外一个概念**逆变**（contravariance）。\n\n**逆变**与**协变**恰恰相反，即如果F、C之间存在着父子转换关系，L1、L2之间存在着从**L1->L2**的转换关系。其绑定对象的转换关系与原始对象的转换关系恰好相反。Java语言使用关键字super（？super List）实现**逆变**。\n\n举个例子：假设有一个集合List<? super String>，你将可以安全地使用add(String)或set(Int，String)方法。但你不能通过get(Int)返回String对象，因为你无法确定返回的对象是否是String类型，你最终只能得到Object。\n\n因此，我们认为，**逆变**可以安全地写入数据，但并不能安全地读取，即最终不能获取具体的对象数据类型。\n\n为了简化理解，我们引入官方文档中 [Joshua Bloch](https://baike.baidu.com/item/Josh%20Bloch) 说的一句话：\n>Joshua Bloch calls those objects you only read from Producers, and those you only write to Consumers. He recommends: \"For maximum flexibility, use wildcard types on input parameters that represent producers or consumers\"\n\nJoshua Bloch是Java集合框架的创始人，他把那些只能读取的对象叫做生产者；只能写入的对象叫做消费者。为了保证最大灵活性，他推荐在那些代表了生产者和消费者的输入参数上使用通配符指定泛型。\n\n相对于Java的通配符，Kotlin语言针对**协变**和**逆变**引入两个新的关键词**out**和**in**。\n\n**out**用于**协变**，是只读的，属于生产者，即用在方法的返回值位置。而**in**用于**逆变**，是只写的，属于消费者，即用在方法的参数位置。\n\n用英文简记为：**POCI** = Producer Out , Consumer In。\n\n如果一个类中只有生产者，我们就可以在类头使用out声明该类是对泛型参数T**协变**的：\n\n```\ninterface Link<out T> {\n    fun node(): T\n}\n```\n\n同样地，如果一个类中只有消费者，我们就可以在类头使用in声明该类是对泛型参数T**逆变**的：\n\n```\ninterface Repo<in T> {\n    fun add(t: T)\n}\n```\n\n**out**等价于Java端的**? extends List**通配符，而**in**等价于Java端的**? super List**通配符。因此，类似下面的转换是合理的：\n\n```\ninterface Link<out T> {\n    fun node(): T\n}\n\nfun f1(linkStr: Link<String>) {\n    // 这是一个合理的协变转换\n    val linkAny: Link<Any> = linkStr\n}\n\ninterface Repo<in T> {\n    fun add(t: T)\n}\n\nfun f2(repoAny: Repo<Any>) {\n    // 这是一个合理的逆变转换\n    val repoStr: Repo<String> = repoAny\n}\n```\n\n## 小结：协变和逆变\n**协变**和**逆变**对于Java程序员来说是一个全新的概念，为了便于理解，我用一个表格做一个简单的总结：\n\n-|协变|逆变\n:---:|:---:|:---:\n关键字|out|in\n读写|只读|可写\n位置|返回值|参数\n角色|生产者|消费者\n\n## 类型投影\n在上面的例子中，我们直接在类体声明了泛型参数的协变或逆变类型。在这种情况下，就严格限制了该类中只允许出现该泛型参数的消费者或者生产者。很显然，这种场景并不多见，大多数情况下，一个类中既存在着消费者又存在着生产者。为了适应这种场景，我们可以将协变或逆变声明写在方法参数中。Kotlin官方将这种方式叫做 [类型投影（Type Projection）](https://kotlinlang.org/docs/reference/generics.html#use-site-variance-type-projections)。\n\n这里我们直接使用官方文档的例子：\n\n```\nclass Array<T>(val size: Int) {\n    fun get(index: Int): T { /* ... */ }\n    fun set(index: Int, value: T) { /* ... */ }\n}\n\nfun copy(from: Array<Any>, to: Array<Any>) {\n    assert(from.size == to.size)\n    for (i in from.indices)\n        to[i] = from[i]\n}\n\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3) { \"\" } \n\n// 由于泛型参数的不变性，这里将出现问题\ncopy(ints, any) \n```\n\n很明显，我们希望from参数可以接收元素为Any或其子类的任意元素，但我们并不希望修改from，以防止出现类似文章开头的问题。因此，我们可以在from参数中添加out修饰，使其协变：\n\n```\nfun copy(from: Array<out Any>, to: Array<Any>) {\n}\n```\n\n一旦添加out修饰符，你就会发现，当你尝试调用set方法的时候，编译器将会提示你在out修饰的情况下禁止调用该方法。\n\n注：Java语言在使用”协变“的情况下，from参数依然可以调用set方法。从这里可以看出，Kotlin语言在泛型安全控制上比Java更加精细。\n\n## 星号投影\n除了上述明确的类型投影方式之外，还有一种非常特殊的投影方式，称之为星号投影（star projection）。\n\n在某些情况下，我们并不知道具体的类型参数信息。为了适应这种情况，Java语言中我们会直接忽略掉类型参数：\n\n```\nclass Box<T> {\n     public void unPack(T t) {\n          ...\n     }\n}\n\n// 在不确定类型参数的情况下，我们会这样做\nBox box = new Box();\n```\n\n在Kotlin语言中，我们使用星号对这种情况进行处理。因为，Kotlin针对泛型有严格的读写区分。同样地，使用*号将限制泛型接口的读写操作：\n* `Foo<out T: TUpper>`，这种情况下，T是协变类型参数，上边界是TUpper。Foo<\\*>等价于Foo<out TUpper>，这意味着你可以安全地从Foo<\\*>读取TUpper类型。\n* `Foo<in T>`，在这种情况下，T是逆变类型参数，下边界是T。Foo<\\*>等价于Foo<in Nothing>，这意味着在T未知的情况下，你将无法安全写入Foo<\\*>。\n* `Foo<T: TUpper>`，在这种情况下，T是不可变的。Foo<\\*>等价于你可以使用Foo<out TUpper>安全读取值，写入等价于Foo<in Nothing>，即无法安全写入。\n\n## 泛型约束\n在泛型约束的控制上，Kotlin语言相对于Java也技高一筹。在大多数情况下，泛型约束需要指定一个上边界。这同Java一样，Kotlin使用冒号代替extends：\n\n```\nfun <T: Animal> catch(t: T) {}\n```\n\n在使用Java的时候，经常碰到这样一个需求。我希望泛型参数可以约束必须同时实现两个接口，但遗憾的是Java语言并没有给予支持。令人惊喜的是，Kotlin语言对这种场景给出了自己的实现：\n\n```\nfun <T> swap(first: List<T>, second: List<T>) where T: CharSequence, \n                                                    T: Comparable<T> {\n    \n} \n```\n\n可以看到，Kotlin语言使用where关键字控制泛型约束存在多个上边界的情况，此处应该给Kotlin鼓掌。\n\n## 总结\nKotlin语言使用**协变**和**逆变**来规范可变泛型操作，out关键字用于协变，代表生产者。in关键字用于逆变，代表消费者。out和in同样可以用于方法参数的泛型声明中，这称之为类型投影。在针对泛型类型约束的处理上，Kotlin增加了多个上边界的支持。\n\nKotlin语言最初是希望成为一门编译速度比Scala更快的JVM编程语言！为了更好地设计泛型，我们看到它从C#中引入了**协变**和**逆变**的概念。这一次，我想，它至少同时站在了Scala和C#的肩膀上。\n\n## 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n\n\n","slug":"kotlin/Kotlin语言中的泛型设计哲学","published":1,"updated":"2019-04-28T12:39:23.524Z","_id":"cjv0x7uiy004sbkb4fgkdqfih","layout":"post","photos":[],"link":"","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-912c5c8fce46d69d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>Kotlin语言的泛型设计很有意思，但并不容易看懂。关于这个部分的官方文档，我反复看了好几次，终于弄明白Kotlin语言泛型设计的背后哲学。这篇文章将讲述Kotlin泛型设计的整个思考过程及其背后的哲学思想，希望可以解答你心中的疑问。不过，可以预见地，即使看完，你也未必完全明白这篇文章在说什么，但至少希望你通过这篇文章可以快速掌握Kotlin泛型的用法。</p>\n</blockquote>\n<h2 id=\"Kotlin泛型的设计初衷\"><a href=\"#Kotlin泛型的设计初衷\" class=\"headerlink\" title=\"Kotlin泛型的设计初衷\"></a>Kotlin泛型的设计初衷</h2><p>我们认为，Kotlin是一门比Java更优秀的JVM编程语言，Kotlin泛型设计的初衷就是为了解决Java泛型设计中一些不合理的问题。这样说可能不够直观，看下面这个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br><span class=\"line\">// 这里将导致编译错误，Java语言不允许这样做</span><br><span class=\"line\"> List&lt;Object&gt; objs = strs;</span><br></pre></td></tr></table></figure>\n<p>很明显，String和Object之间存在着安全的隐式转换关系。存放字符串的集合应该可以自由转换为对象集合。这很合理，不是吗？</p>\n<p>如果你这样认为的话，就错了！继续往下看，我们扩展这个程序：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br><span class=\"line\">List&lt;Object&gt; objs = strs;</span><br><span class=\"line\">objs.add(1);</span><br><span class=\"line\"></span><br><span class=\"line\">String s = strs.get(0);</span><br></pre></td></tr></table></figure>\n<p>很明显，这不合理！我们在第一个位置存入了整型数值1，却在取的时候将它当成了字符串。strs本身是一个字符串集合，用字符串接收读取的数据的逻辑是合理的。却因为错误的类型转换导致了不安全写入出现了运行时类型转换问题，因此，Java语言不允许我们这样做。</p>\n<p>大多数情况下，这种限制没有问题。可是，在某些情况下，这并不合理。看下面的例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface List&lt;T&gt; &#123;</span><br><span class=\"line\">    void addAll(List&lt;T&gt; t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void copy(List&lt;String&gt; from, List&lt;Object&gt; to) &#123;</span><br><span class=\"line\">   to.addAll(from);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个类型绝对安全的操作，但在Java语言中这依然是不允许的。原因是，泛型是一个编译期特性，一旦指定，运行期类型就已经固定了。换而言之，泛型操作的类型是不可变的。这就意味着，List<string>并不是List<object>的子类型。</object></string></p>\n<p>为了允许正确执行上述操作，Java语言增加了神奇的通配符操作魔法。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface List&lt;T&gt; &#123;</span><br><span class=\"line\">  void addAll(List&lt;? extends T&gt; t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>? extends T</strong>意味着集合中允许添加的类型不仅仅是T还包括T的子类，但这个集合中可以添加的类型在集合参数传入addAll时就已经确定了。因此，这并不影响参数集合中可以存放的数据类型，它带来的一个直接影响就是addAll方法参数中终于可以传入泛型参数是T或者T的子类的集合了，即上面的copy方法将不再报错。</p>\n<p>这很有意思，在使用通配符之前我们并不能传入类型参数为子类型的集合。使用通配符之后，居然可以了！这个特性在C#被称之为<strong>协变</strong>（covariant）。</p>\n<p><strong>协变</strong>这个词来源于类型之间的绑定。以集合为例，假设有两个集合L1、L2分别绑定数据类型F、C，并且F、C之间存在着父子关系，即F、C之间存在着一种安全的从<strong>C-&gt;F</strong>的隐式转换关系。那么，集合L1和L2之间是否也存在着<strong>L2-&gt;L1</strong>的转换关系呢？这就牵扯到了原始类型转换到绑定类型的集合之间的转换映射关系，我们称之为“可变性”。如果原始类型转换和绑定类型之间转换的方向相同，就称之为“协变”。</p>\n<p>用一句话总结<strong>协变</strong>：如果绑定对象和原始对象之间存在着相同方向的转换关系，即称之为<strong>协变</strong>。</p>\n<p>PS：以上关于<strong>协变</strong>的概念来自笔者的总结，更严谨的概念请参考<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/index\" target=\"_blank\" rel=\"noopener\">C#官方文档</a>。</p>\n<p>文章开头我们将不可变泛型通过通配符使其成为了可变泛型参数，现在我们知道这种行为叫做<strong>协变</strong>。很明显，<strong>协变</strong>转换中写入是不安全的。因此，<strong>协变</strong>行为仅仅用于读取。如果需要写入怎么办呢？这就牵扯到了另外一个概念<strong>逆变</strong>（contravariance）。</p>\n<p><strong>逆变</strong>与<strong>协变</strong>恰恰相反，即如果F、C之间存在着父子转换关系，L1、L2之间存在着从<strong>L1-&gt;L2</strong>的转换关系。其绑定对象的转换关系与原始对象的转换关系恰好相反。Java语言使用关键字super（？super List）实现<strong>逆变</strong>。</p>\n<p>举个例子：假设有一个集合List&lt;? super String&gt;，你将可以安全地使用add(String)或set(Int，String)方法。但你不能通过get(Int)返回String对象，因为你无法确定返回的对象是否是String类型，你最终只能得到Object。</p>\n<p>因此，我们认为，<strong>逆变</strong>可以安全地写入数据，但并不能安全地读取，即最终不能获取具体的对象数据类型。</p>\n<p>为了简化理解，我们引入官方文档中 <a href=\"https://baike.baidu.com/item/Josh%20Bloch\" target=\"_blank\" rel=\"noopener\">Joshua Bloch</a> 说的一句话：</p>\n<blockquote>\n<p>Joshua Bloch calls those objects you only read from Producers, and those you only write to Consumers. He recommends: “For maximum flexibility, use wildcard types on input parameters that represent producers or consumers”</p>\n</blockquote>\n<p>Joshua Bloch是Java集合框架的创始人，他把那些只能读取的对象叫做生产者；只能写入的对象叫做消费者。为了保证最大灵活性，他推荐在那些代表了生产者和消费者的输入参数上使用通配符指定泛型。</p>\n<p>相对于Java的通配符，Kotlin语言针对<strong>协变</strong>和<strong>逆变</strong>引入两个新的关键词<strong>out</strong>和<strong>in</strong>。</p>\n<p><strong>out</strong>用于<strong>协变</strong>，是只读的，属于生产者，即用在方法的返回值位置。而<strong>in</strong>用于<strong>逆变</strong>，是只写的，属于消费者，即用在方法的参数位置。</p>\n<p>用英文简记为：<strong>POCI</strong> = Producer Out , Consumer In。</p>\n<p>如果一个类中只有生产者，我们就可以在类头使用out声明该类是对泛型参数T<strong>协变</strong>的：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Link&lt;out T&gt; &#123;</span><br><span class=\"line\">    fun node(): T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样地，如果一个类中只有消费者，我们就可以在类头使用in声明该类是对泛型参数T<strong>逆变</strong>的：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Repo&lt;in T&gt; &#123;</span><br><span class=\"line\">    fun add(t: T)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>out</strong>等价于Java端的<strong>? extends List</strong>通配符，而<strong>in</strong>等价于Java端的<strong>? super List</strong>通配符。因此，类似下面的转换是合理的：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Link&lt;out T&gt; &#123;</span><br><span class=\"line\">    fun node(): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun f1(linkStr: Link&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 这是一个合理的协变转换</span><br><span class=\"line\">    val linkAny: Link&lt;Any&gt; = linkStr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Repo&lt;in T&gt; &#123;</span><br><span class=\"line\">    fun add(t: T)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun f2(repoAny: Repo&lt;Any&gt;) &#123;</span><br><span class=\"line\">    // 这是一个合理的逆变转换</span><br><span class=\"line\">    val repoStr: Repo&lt;String&gt; = repoAny</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结：协变和逆变\"><a href=\"#小结：协变和逆变\" class=\"headerlink\" title=\"小结：协变和逆变\"></a>小结：协变和逆变</h2><p><strong>协变</strong>和<strong>逆变</strong>对于Java程序员来说是一个全新的概念，为了便于理解，我用一个表格做一个简单的总结：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">协变</th>\n<th style=\"text-align:center\">逆变</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">关键字</td>\n<td style=\"text-align:center\">out</td>\n<td style=\"text-align:center\">in</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">读写</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">位置</td>\n<td style=\"text-align:center\">返回值</td>\n<td style=\"text-align:center\">参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">角色</td>\n<td style=\"text-align:center\">生产者</td>\n<td style=\"text-align:center\">消费者</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"类型投影\"><a href=\"#类型投影\" class=\"headerlink\" title=\"类型投影\"></a>类型投影</h2><p>在上面的例子中，我们直接在类体声明了泛型参数的协变或逆变类型。在这种情况下，就严格限制了该类中只允许出现该泛型参数的消费者或者生产者。很显然，这种场景并不多见，大多数情况下，一个类中既存在着消费者又存在着生产者。为了适应这种场景，我们可以将协变或逆变声明写在方法参数中。Kotlin官方将这种方式叫做 <a href=\"https://kotlinlang.org/docs/reference/generics.html#use-site-variance-type-projections\" target=\"_blank\" rel=\"noopener\">类型投影（Type Projection）</a>。</p>\n<p>这里我们直接使用官方文档的例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Array&lt;T&gt;(val size: Int) &#123;</span><br><span class=\"line\">    fun get(index: Int): T &#123; /* ... */ &#125;</span><br><span class=\"line\">    fun set(index: Int, value: T) &#123; /* ... */ &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun copy(from: Array&lt;Any&gt;, to: Array&lt;Any&gt;) &#123;</span><br><span class=\"line\">    assert(from.size == to.size)</span><br><span class=\"line\">    for (i in from.indices)</span><br><span class=\"line\">        to[i] = from[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">val ints: Array&lt;Int&gt; = arrayOf(1, 2, 3)</span><br><span class=\"line\">val any = Array&lt;Any&gt;(3) &#123; &quot;&quot; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// 由于泛型参数的不变性，这里将出现问题</span><br><span class=\"line\">copy(ints, any)</span><br></pre></td></tr></table></figure>\n<p>很明显，我们希望from参数可以接收元素为Any或其子类的任意元素，但我们并不希望修改from，以防止出现类似文章开头的问题。因此，我们可以在from参数中添加out修饰，使其协变：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun copy(from: Array&lt;out Any&gt;, to: Array&lt;Any&gt;) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一旦添加out修饰符，你就会发现，当你尝试调用set方法的时候，编译器将会提示你在out修饰的情况下禁止调用该方法。</p>\n<p>注：Java语言在使用”协变“的情况下，from参数依然可以调用set方法。从这里可以看出，Kotlin语言在泛型安全控制上比Java更加精细。</p>\n<h2 id=\"星号投影\"><a href=\"#星号投影\" class=\"headerlink\" title=\"星号投影\"></a>星号投影</h2><p>除了上述明确的类型投影方式之外，还有一种非常特殊的投影方式，称之为星号投影（star projection）。</p>\n<p>在某些情况下，我们并不知道具体的类型参数信息。为了适应这种情况，Java语言中我们会直接忽略掉类型参数：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Box&lt;T&gt; &#123;</span><br><span class=\"line\">     public void unPack(T t) &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在不确定类型参数的情况下，我们会这样做</span><br><span class=\"line\">Box box = new Box();</span><br></pre></td></tr></table></figure>\n<p>在Kotlin语言中，我们使用星号对这种情况进行处理。因为，Kotlin针对泛型有严格的读写区分。同样地，使用*号将限制泛型接口的读写操作：</p>\n<ul>\n<li><code>Foo&lt;out T: TUpper&gt;</code>，这种情况下，T是协变类型参数，上边界是TUpper。Foo&lt;*&gt;等价于Foo<out tupper=\"\">，这意味着你可以安全地从Foo&lt;*&gt;读取TUpper类型。</out></li>\n<li><code>Foo&lt;in T&gt;</code>，在这种情况下，T是逆变类型参数，下边界是T。Foo&lt;*&gt;等价于Foo<in nothing=\"\">，这意味着在T未知的情况下，你将无法安全写入Foo&lt;*&gt;。</in></li>\n<li><code>Foo&lt;T: TUpper&gt;</code>，在这种情况下，T是不可变的。Foo&lt;*&gt;等价于你可以使用Foo<out tupper=\"\">安全读取值，写入等价于Foo<in nothing=\"\">，即无法安全写入。</in></out></li>\n</ul>\n<h2 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h2><p>在泛型约束的控制上，Kotlin语言相对于Java也技高一筹。在大多数情况下，泛型约束需要指定一个上边界。这同Java一样，Kotlin使用冒号代替extends：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T: Animal&gt; catch(t: T) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用Java的时候，经常碰到这样一个需求。我希望泛型参数可以约束必须同时实现两个接口，但遗憾的是Java语言并没有给予支持。令人惊喜的是，Kotlin语言对这种场景给出了自己的实现：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; swap(first: List&lt;T&gt;, second: List&lt;T&gt;) where T: CharSequence, </span><br><span class=\"line\">                                                    T: Comparable&lt;T&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，Kotlin语言使用where关键字控制泛型约束存在多个上边界的情况，此处应该给Kotlin鼓掌。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Kotlin语言使用<strong>协变</strong>和<strong>逆变</strong>来规范可变泛型操作，out关键字用于协变，代表生产者。in关键字用于逆变，代表消费者。out和in同样可以用于方法参数的泛型声明中，这称之为类型投影。在针对泛型类型约束的处理上，Kotlin增加了多个上边界的支持。</p>\n<p>Kotlin语言最初是希望成为一门编译速度比Scala更快的JVM编程语言！为了更好地设计泛型，我们看到它从C#中引入了<strong>协变</strong>和<strong>逆变</strong>的概念。这一次，我想，它至少同时站在了Scala和C#的肩膀上。</p>\n<h2 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h2><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-912c5c8fce46d69d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>Kotlin语言的泛型设计很有意思，但并不容易看懂。关于这个部分的官方文档，我反复看了好几次，终于弄明白Kotlin语言泛型设计的背后哲学。这篇文章将讲述Kotlin泛型设计的整个思考过程及其背后的哲学思想，希望可以解答你心中的疑问。不过，可以预见地，即使看完，你也未必完全明白这篇文章在说什么，但至少希望你通过这篇文章可以快速掌握Kotlin泛型的用法。</p>\n</blockquote>\n<h2 id=\"Kotlin泛型的设计初衷\"><a href=\"#Kotlin泛型的设计初衷\" class=\"headerlink\" title=\"Kotlin泛型的设计初衷\"></a>Kotlin泛型的设计初衷</h2><p>我们认为，Kotlin是一门比Java更优秀的JVM编程语言，Kotlin泛型设计的初衷就是为了解决Java泛型设计中一些不合理的问题。这样说可能不够直观，看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br><span class=\"line\">// 这里将导致编译错误，Java语言不允许这样做</span><br><span class=\"line\"> List&lt;Object&gt; objs = strs;</span><br></pre></td></tr></table></figure>\n<p>很明显，String和Object之间存在着安全的隐式转换关系。存放字符串的集合应该可以自由转换为对象集合。这很合理，不是吗？</p>\n<p>如果你这样认为的话，就错了！继续往下看，我们扩展这个程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br><span class=\"line\">List&lt;Object&gt; objs = strs;</span><br><span class=\"line\">objs.add(1);</span><br><span class=\"line\"></span><br><span class=\"line\">String s = strs.get(0);</span><br></pre></td></tr></table></figure>\n<p>很明显，这不合理！我们在第一个位置存入了整型数值1，却在取的时候将它当成了字符串。strs本身是一个字符串集合，用字符串接收读取的数据的逻辑是合理的。却因为错误的类型转换导致了不安全写入出现了运行时类型转换问题，因此，Java语言不允许我们这样做。</p>\n<p>大多数情况下，这种限制没有问题。可是，在某些情况下，这并不合理。看下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface List&lt;T&gt; &#123;</span><br><span class=\"line\">    void addAll(List&lt;T&gt; t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void copy(List&lt;String&gt; from, List&lt;Object&gt; to) &#123;</span><br><span class=\"line\">   to.addAll(from);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个类型绝对安全的操作，但在Java语言中这依然是不允许的。原因是，泛型是一个编译期特性，一旦指定，运行期类型就已经固定了。换而言之，泛型操作的类型是不可变的。这就意味着，List<string>并不是List<object>的子类型。</object></string></p>\n<p>为了允许正确执行上述操作，Java语言增加了神奇的通配符操作魔法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface List&lt;T&gt; &#123;</span><br><span class=\"line\">  void addAll(List&lt;? extends T&gt; t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>? extends T</strong>意味着集合中允许添加的类型不仅仅是T还包括T的子类，但这个集合中可以添加的类型在集合参数传入addAll时就已经确定了。因此，这并不影响参数集合中可以存放的数据类型，它带来的一个直接影响就是addAll方法参数中终于可以传入泛型参数是T或者T的子类的集合了，即上面的copy方法将不再报错。</p>\n<p>这很有意思，在使用通配符之前我们并不能传入类型参数为子类型的集合。使用通配符之后，居然可以了！这个特性在C#被称之为<strong>协变</strong>（covariant）。</p>\n<p><strong>协变</strong>这个词来源于类型之间的绑定。以集合为例，假设有两个集合L1、L2分别绑定数据类型F、C，并且F、C之间存在着父子关系，即F、C之间存在着一种安全的从<strong>C-&gt;F</strong>的隐式转换关系。那么，集合L1和L2之间是否也存在着<strong>L2-&gt;L1</strong>的转换关系呢？这就牵扯到了原始类型转换到绑定类型的集合之间的转换映射关系，我们称之为“可变性”。如果原始类型转换和绑定类型之间转换的方向相同，就称之为“协变”。</p>\n<p>用一句话总结<strong>协变</strong>：如果绑定对象和原始对象之间存在着相同方向的转换关系，即称之为<strong>协变</strong>。</p>\n<p>PS：以上关于<strong>协变</strong>的概念来自笔者的总结，更严谨的概念请参考<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/index\" target=\"_blank\" rel=\"noopener\">C#官方文档</a>。</p>\n<p>文章开头我们将不可变泛型通过通配符使其成为了可变泛型参数，现在我们知道这种行为叫做<strong>协变</strong>。很明显，<strong>协变</strong>转换中写入是不安全的。因此，<strong>协变</strong>行为仅仅用于读取。如果需要写入怎么办呢？这就牵扯到了另外一个概念<strong>逆变</strong>（contravariance）。</p>\n<p><strong>逆变</strong>与<strong>协变</strong>恰恰相反，即如果F、C之间存在着父子转换关系，L1、L2之间存在着从<strong>L1-&gt;L2</strong>的转换关系。其绑定对象的转换关系与原始对象的转换关系恰好相反。Java语言使用关键字super（？super List）实现<strong>逆变</strong>。</p>\n<p>举个例子：假设有一个集合List&lt;? super String&gt;，你将可以安全地使用add(String)或set(Int，String)方法。但你不能通过get(Int)返回String对象，因为你无法确定返回的对象是否是String类型，你最终只能得到Object。</p>\n<p>因此，我们认为，<strong>逆变</strong>可以安全地写入数据，但并不能安全地读取，即最终不能获取具体的对象数据类型。</p>\n<p>为了简化理解，我们引入官方文档中 <a href=\"https://baike.baidu.com/item/Josh%20Bloch\" target=\"_blank\" rel=\"noopener\">Joshua Bloch</a> 说的一句话：</p>\n<blockquote>\n<p>Joshua Bloch calls those objects you only read from Producers, and those you only write to Consumers. He recommends: “For maximum flexibility, use wildcard types on input parameters that represent producers or consumers”</p>\n</blockquote>\n<p>Joshua Bloch是Java集合框架的创始人，他把那些只能读取的对象叫做生产者；只能写入的对象叫做消费者。为了保证最大灵活性，他推荐在那些代表了生产者和消费者的输入参数上使用通配符指定泛型。</p>\n<p>相对于Java的通配符，Kotlin语言针对<strong>协变</strong>和<strong>逆变</strong>引入两个新的关键词<strong>out</strong>和<strong>in</strong>。</p>\n<p><strong>out</strong>用于<strong>协变</strong>，是只读的，属于生产者，即用在方法的返回值位置。而<strong>in</strong>用于<strong>逆变</strong>，是只写的，属于消费者，即用在方法的参数位置。</p>\n<p>用英文简记为：<strong>POCI</strong> = Producer Out , Consumer In。</p>\n<p>如果一个类中只有生产者，我们就可以在类头使用out声明该类是对泛型参数T<strong>协变</strong>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Link&lt;out T&gt; &#123;</span><br><span class=\"line\">    fun node(): T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样地，如果一个类中只有消费者，我们就可以在类头使用in声明该类是对泛型参数T<strong>逆变</strong>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Repo&lt;in T&gt; &#123;</span><br><span class=\"line\">    fun add(t: T)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>out</strong>等价于Java端的<strong>? extends List</strong>通配符，而<strong>in</strong>等价于Java端的<strong>? super List</strong>通配符。因此，类似下面的转换是合理的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Link&lt;out T&gt; &#123;</span><br><span class=\"line\">    fun node(): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun f1(linkStr: Link&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 这是一个合理的协变转换</span><br><span class=\"line\">    val linkAny: Link&lt;Any&gt; = linkStr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Repo&lt;in T&gt; &#123;</span><br><span class=\"line\">    fun add(t: T)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun f2(repoAny: Repo&lt;Any&gt;) &#123;</span><br><span class=\"line\">    // 这是一个合理的逆变转换</span><br><span class=\"line\">    val repoStr: Repo&lt;String&gt; = repoAny</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结：协变和逆变\"><a href=\"#小结：协变和逆变\" class=\"headerlink\" title=\"小结：协变和逆变\"></a>小结：协变和逆变</h2><p><strong>协变</strong>和<strong>逆变</strong>对于Java程序员来说是一个全新的概念，为了便于理解，我用一个表格做一个简单的总结：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">协变</th>\n<th style=\"text-align:center\">逆变</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">关键字</td>\n<td style=\"text-align:center\">out</td>\n<td style=\"text-align:center\">in</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">读写</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">位置</td>\n<td style=\"text-align:center\">返回值</td>\n<td style=\"text-align:center\">参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">角色</td>\n<td style=\"text-align:center\">生产者</td>\n<td style=\"text-align:center\">消费者</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"类型投影\"><a href=\"#类型投影\" class=\"headerlink\" title=\"类型投影\"></a>类型投影</h2><p>在上面的例子中，我们直接在类体声明了泛型参数的协变或逆变类型。在这种情况下，就严格限制了该类中只允许出现该泛型参数的消费者或者生产者。很显然，这种场景并不多见，大多数情况下，一个类中既存在着消费者又存在着生产者。为了适应这种场景，我们可以将协变或逆变声明写在方法参数中。Kotlin官方将这种方式叫做 <a href=\"https://kotlinlang.org/docs/reference/generics.html#use-site-variance-type-projections\" target=\"_blank\" rel=\"noopener\">类型投影（Type Projection）</a>。</p>\n<p>这里我们直接使用官方文档的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Array&lt;T&gt;(val size: Int) &#123;</span><br><span class=\"line\">    fun get(index: Int): T &#123; /* ... */ &#125;</span><br><span class=\"line\">    fun set(index: Int, value: T) &#123; /* ... */ &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun copy(from: Array&lt;Any&gt;, to: Array&lt;Any&gt;) &#123;</span><br><span class=\"line\">    assert(from.size == to.size)</span><br><span class=\"line\">    for (i in from.indices)</span><br><span class=\"line\">        to[i] = from[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">val ints: Array&lt;Int&gt; = arrayOf(1, 2, 3)</span><br><span class=\"line\">val any = Array&lt;Any&gt;(3) &#123; &quot;&quot; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// 由于泛型参数的不变性，这里将出现问题</span><br><span class=\"line\">copy(ints, any)</span><br></pre></td></tr></table></figure>\n<p>很明显，我们希望from参数可以接收元素为Any或其子类的任意元素，但我们并不希望修改from，以防止出现类似文章开头的问题。因此，我们可以在from参数中添加out修饰，使其协变：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun copy(from: Array&lt;out Any&gt;, to: Array&lt;Any&gt;) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一旦添加out修饰符，你就会发现，当你尝试调用set方法的时候，编译器将会提示你在out修饰的情况下禁止调用该方法。</p>\n<p>注：Java语言在使用”协变“的情况下，from参数依然可以调用set方法。从这里可以看出，Kotlin语言在泛型安全控制上比Java更加精细。</p>\n<h2 id=\"星号投影\"><a href=\"#星号投影\" class=\"headerlink\" title=\"星号投影\"></a>星号投影</h2><p>除了上述明确的类型投影方式之外，还有一种非常特殊的投影方式，称之为星号投影（star projection）。</p>\n<p>在某些情况下，我们并不知道具体的类型参数信息。为了适应这种情况，Java语言中我们会直接忽略掉类型参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Box&lt;T&gt; &#123;</span><br><span class=\"line\">     public void unPack(T t) &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在不确定类型参数的情况下，我们会这样做</span><br><span class=\"line\">Box box = new Box();</span><br></pre></td></tr></table></figure>\n<p>在Kotlin语言中，我们使用星号对这种情况进行处理。因为，Kotlin针对泛型有严格的读写区分。同样地，使用*号将限制泛型接口的读写操作：</p>\n<ul>\n<li><code>Foo&lt;out T: TUpper&gt;</code>，这种情况下，T是协变类型参数，上边界是TUpper。Foo&lt;*&gt;等价于Foo<out tupper=\"\">，这意味着你可以安全地从Foo&lt;*&gt;读取TUpper类型。</out></li>\n<li><code>Foo&lt;in T&gt;</code>，在这种情况下，T是逆变类型参数，下边界是T。Foo&lt;*&gt;等价于Foo<in nothing=\"\">，这意味着在T未知的情况下，你将无法安全写入Foo&lt;*&gt;。</in></li>\n<li><code>Foo&lt;T: TUpper&gt;</code>，在这种情况下，T是不可变的。Foo&lt;*&gt;等价于你可以使用Foo<out tupper=\"\">安全读取值，写入等价于Foo<in nothing=\"\">，即无法安全写入。</in></out></li>\n</ul>\n<h2 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h2><p>在泛型约束的控制上，Kotlin语言相对于Java也技高一筹。在大多数情况下，泛型约束需要指定一个上边界。这同Java一样，Kotlin使用冒号代替extends：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T: Animal&gt; catch(t: T) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用Java的时候，经常碰到这样一个需求。我希望泛型参数可以约束必须同时实现两个接口，但遗憾的是Java语言并没有给予支持。令人惊喜的是，Kotlin语言对这种场景给出了自己的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; swap(first: List&lt;T&gt;, second: List&lt;T&gt;) where T: CharSequence, </span><br><span class=\"line\">                                                    T: Comparable&lt;T&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，Kotlin语言使用where关键字控制泛型约束存在多个上边界的情况，此处应该给Kotlin鼓掌。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Kotlin语言使用<strong>协变</strong>和<strong>逆变</strong>来规范可变泛型操作，out关键字用于协变，代表生产者。in关键字用于逆变，代表消费者。out和in同样可以用于方法参数的泛型声明中，这称之为类型投影。在针对泛型类型约束的处理上，Kotlin增加了多个上边界的支持。</p>\n<p>Kotlin语言最初是希望成为一门编译速度比Scala更快的JVM编程语言！为了更好地设计泛型，我们看到它从C#中引入了<strong>协变</strong>和<strong>逆变</strong>的概念。这一次，我想，它至少同时站在了Scala和C#的肩膀上。</p>\n<h2 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h2><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"Kotlin 代理模式","date":"2016-08-21T16:25:00.000Z","comments":1,"_content":"\n代理模式是23种经典设计模式之一，代理模式被认为是继承的更好替代解决方案；因为代理比继承更加灵活，在Java语言中，通过反射可以实现动态代理，动态代理可以实现**AOP**编程，即：可以动态地往已有类中添加逻辑；比如：实现事务的自动提交，异常的自动捕获，热修复等等; \n\n在Kotlin语言中，代理模式是默认支持的，不需要任何额外的代码，你只需要记住一个关键字**by**。我们不妨来试一下:\n\n```\ninterface Base {\n    fun sayHi()\n}\n\nclass BaseImpl : Base {\n    override fun sayHi() {\n        println(\"BaseImpl->sayHi\")\n    }\n}\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>) {\n    val b = BaseImpl()\n    val derived = Derived(b)\n    derived.sayHi()\n}\n```\n\n这里Derived作为BaseImpl的代理类，拥有BaseImpl类中的所有方法，Derived将代理BaseImpl类执行BaseImpl类中的所有方法，就像继承自BaseImpl类一样。这样说起来有点抽象，来看一下Kotlin编译器具体为我们做了一些什么。但是，怎么看呢？教大家一个方法！\n大家都知道，Kotlin和Java均是JVM语言，最终均转换到同样的Java字节码，这样我们就可以先将Kotlin编译为.class文件，再反编译为.java文件，看看对应的Java代码，我们就可以看到更多的细节。下面是最终反编译生成的Java代码:\n\n```\npublic final class Derived implements Base {\n  public Derived(@NotNull Base b) {\n    this.$$delegate_0 = b;\n  }\n  public void sayHi() {\n    this.$$delegate_0.sayHi();\n  }\n}\n```\n\n这里，我们可以清楚地看到，Kotlin编译器为我们动态添加了一个成员变量$$delegate_0，这个成员变量代表被代理的对象，这里对应的是BaseImpl对象，Derived里面的sayHi方法最终调用是代理对象的sayHi方法，即Kotlin编译器帮我们提供了一个非常漂亮的代理模式实现。\n\n# 代理属性\n在一些情况下，我们可能希望某些属性延迟加载，即在我们正在需要的时候才对它赋值；亦或者我们希望可以随时监听属性值的变化；在上述这些场景中，代理属性就可以发挥作用了。\n\n代理属性的语法格式如下：\n\n```\nclass DelegateProperty {\n\tval d: String by Delegate()\n}\nclass Delegate {\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): String {\n        return \"Invoke getValue() , thisRef = $thisRef , property name = ${property.name}\"\n    }\n    operator fun setValue(thisRef: Any? , property: KProperty<*> , value: String) {\n        println(\"Invoke setValue() , thisRef = $thisRef , property name = ${property.name} , value = $value\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val dp = DelegatedProperty()\n    dp.d = \"Value0\" // Invoke setValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d , value = Value0\n   \n    println(dp.d) // Invoke getValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d\n}\n```\n\n这里的代理是如何实现的呢？我们知道，Kotlin的属性值会自动生成set/get方法，而代理类通过代理set/get方法生成相应的代理方法，这里的方法对应关系如下：\n\n```\n// thisRef对应代理对象的引用，property对应代理属性的反射属性封装\n// 注意这里的代理方法一定要添加operator关键字，operator关键字是重载操作符关键字，后续的文章中会讲到，敬请期待\nget() -> operator fun getValue(thisRef: Any? , property: KProperty<*>)\nset() -> operator fun setValue(thisRef: Any? , property: KProperty<*> , value: T)\n```\n\nKotlin标准库提供了一些常用代理的方法实现，即上文提到的几种代理，先来看第一种：延迟加载。\n### 延迟加载\nKotlin提供了一个lazy方法用于实现延迟加载，lazy方法有一个lambda表达式参数，用于对属性进行初始化赋值，而一旦完成赋值，该lambda表达式将不会再次调用。lambda表达式调用发生在第一次使用该属性的时候，即实现了属性赋值的延迟加载。来看一个简单的例子:\n\n```\n// 使用标准库实现的lazy函数，实现属性的延迟加载\nprivate val lazyValue: String by lazy {\n    println(\"调用该初始赋值表达式完成赋值\")\n    // 这里是实际赋值\n    \"Hello, world\"\n}\nfun main(args: Array<String>) {\n    // 仅在第一次会调用lazy方法的lambda表达式\n    println(lazyValue) // 打印：调用该初始赋值表达式完成赋值\n    println(lazyValue) // 打印： Hello, world, 再次调用将不再调用lambda表达式\n}\n```\n\nlazy方法是一个线程安全的延迟加载方法，为了加深大家的理解，根据上面的原理，我们尝试自己来实现一个非线程安全的延迟加载方法，看具体实现：\n\n```\nprivate object UNINITIALIZE_VALUE\n\nclass MyLazy<T>(initialize: ()->T) {\n    private var value: Any? = UNINITIALIZE_VALUE\n    private val initialize = initialize\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): T {\n        if(value == UNINITIALIZE_VALUE) {\n            value = initialize()\n        }\n        return value as T\n    }\n    operator fun setValue(thisRef: Any? , property: KProperty<*> , value: T) {\n        this.value = value\n    }\n}\n// 为了和标准库区分，使用__lazy命名\nfun <T>  __lazy(initialize: () -> T): MyLazy<T> = MyLazy(initialize)\n\nvar lazyValue1 by __lazy {\n    println(\"自定义lazy初始化赋值表达式被调用\")\n    \"Hello , world\"\n}\n\nfun main(args: Array<String>) {\n    // 自定义延迟加载函数__lazy\n    println(lazyValue1)\n    lazyValue1 = \"Other value\"\n    println(lazyValue1)\n}\n```\n\n由此可见，实现一个延迟加载接口并不复杂，最重要的是要理解延迟加载的过程以及实现原理。总结实现延迟加载接口，需要注意三个地方：\n\n* 需要提供初始化lambda表达式参数，用于初始赋值\n* 需要实现代理属性对象的setValue/getValue方法，如果是val则只需要实现getValue即可\n* 需要严格确保属性不会被多次初始化 \n\n### Observable属性\nKotlin标准库还提供了一个可观察属性，这个属性使用观察者模式实现，如果属性值发生变化则会调用相应的回调lambda接口通知使用者，先看一个具体的例子:\n\n```\nvar observableValue by Delegates.observable(\"Initial value\") {  prop , old , new ->\n    println(\"$old -> $new\")\n}\n\nfun main(args: Array<String>) {\n    println(observableValue)    // 打印：Initial value\n    observableValue = \"Hello\"   // 打印: Initial value -> Hello\n    println(observableValue)    // 打印：Hello\n}\n```\n\n这里的具体实现，感兴趣的同学请参看文章开头的方法进行追踪！\n\n### Storing Properties in a Map\n这也是Kotlin标准库提供的一个非常有用的特性，它主要用于JSON数据的解析。看官方的例子：\n\n```\nclass User(val map: Map<String, Any?>) {\n\tval name: String by map\n\tval age: Int by map\n}\n\nval user = User(mapOf(\n\t\"name\" to \"John Doe\",\n\t\"age\" to 25\n))\n```\n\n该方法比较简单，这里就不再赘述了！\n\n# 总结\n至此，关于代理的介绍可以暂时告一段落了！\n代理模式是一个非常经典设计模式，在解决某些问题中可以发挥事半功倍的效果。幸运的是，Kotlin语言原生支持代理模式，实现代理模式如同声明一个属性一样简单。而且，代理模式的设计也非常漂亮，仅仅使用一个关键字by极尽简约之美。在日常编码中，一定要灵活运用代理模式，比如实现延迟加载，实现属性观察等等。[KotterKnife](https://github.com/JakeWharton/kotterknife) 是一个非常经典的代理模式的实现例子，有兴趣的同学可以clone该仓库，查看源码，领会代理模式的优美。\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n\n# 文章源码地址\nKotliner: [https://github.com/yuanhoujun/Kotliner](https://github.com/yuanhoujun/Kotliner),\n别忘了点击仓库右上方的star哦！\n","source":"_posts/kotlin/delegation.md","raw":"title: Kotlin 代理模式\ndate: 2016/08/22 00:25\ncomments: true\ntags:\n- Android\n- Kotlin\n- 代理模式\n- 代理属性\n- 延迟加载\ncategories:\n- Kotlin\n- 基础知识\n---\n\n代理模式是23种经典设计模式之一，代理模式被认为是继承的更好替代解决方案；因为代理比继承更加灵活，在Java语言中，通过反射可以实现动态代理，动态代理可以实现**AOP**编程，即：可以动态地往已有类中添加逻辑；比如：实现事务的自动提交，异常的自动捕获，热修复等等; \n\n在Kotlin语言中，代理模式是默认支持的，不需要任何额外的代码，你只需要记住一个关键字**by**。我们不妨来试一下:\n\n```\ninterface Base {\n    fun sayHi()\n}\n\nclass BaseImpl : Base {\n    override fun sayHi() {\n        println(\"BaseImpl->sayHi\")\n    }\n}\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>) {\n    val b = BaseImpl()\n    val derived = Derived(b)\n    derived.sayHi()\n}\n```\n\n这里Derived作为BaseImpl的代理类，拥有BaseImpl类中的所有方法，Derived将代理BaseImpl类执行BaseImpl类中的所有方法，就像继承自BaseImpl类一样。这样说起来有点抽象，来看一下Kotlin编译器具体为我们做了一些什么。但是，怎么看呢？教大家一个方法！\n大家都知道，Kotlin和Java均是JVM语言，最终均转换到同样的Java字节码，这样我们就可以先将Kotlin编译为.class文件，再反编译为.java文件，看看对应的Java代码，我们就可以看到更多的细节。下面是最终反编译生成的Java代码:\n\n```\npublic final class Derived implements Base {\n  public Derived(@NotNull Base b) {\n    this.$$delegate_0 = b;\n  }\n  public void sayHi() {\n    this.$$delegate_0.sayHi();\n  }\n}\n```\n\n这里，我们可以清楚地看到，Kotlin编译器为我们动态添加了一个成员变量$$delegate_0，这个成员变量代表被代理的对象，这里对应的是BaseImpl对象，Derived里面的sayHi方法最终调用是代理对象的sayHi方法，即Kotlin编译器帮我们提供了一个非常漂亮的代理模式实现。\n\n# 代理属性\n在一些情况下，我们可能希望某些属性延迟加载，即在我们正在需要的时候才对它赋值；亦或者我们希望可以随时监听属性值的变化；在上述这些场景中，代理属性就可以发挥作用了。\n\n代理属性的语法格式如下：\n\n```\nclass DelegateProperty {\n\tval d: String by Delegate()\n}\nclass Delegate {\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): String {\n        return \"Invoke getValue() , thisRef = $thisRef , property name = ${property.name}\"\n    }\n    operator fun setValue(thisRef: Any? , property: KProperty<*> , value: String) {\n        println(\"Invoke setValue() , thisRef = $thisRef , property name = ${property.name} , value = $value\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val dp = DelegatedProperty()\n    dp.d = \"Value0\" // Invoke setValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d , value = Value0\n   \n    println(dp.d) // Invoke getValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d\n}\n```\n\n这里的代理是如何实现的呢？我们知道，Kotlin的属性值会自动生成set/get方法，而代理类通过代理set/get方法生成相应的代理方法，这里的方法对应关系如下：\n\n```\n// thisRef对应代理对象的引用，property对应代理属性的反射属性封装\n// 注意这里的代理方法一定要添加operator关键字，operator关键字是重载操作符关键字，后续的文章中会讲到，敬请期待\nget() -> operator fun getValue(thisRef: Any? , property: KProperty<*>)\nset() -> operator fun setValue(thisRef: Any? , property: KProperty<*> , value: T)\n```\n\nKotlin标准库提供了一些常用代理的方法实现，即上文提到的几种代理，先来看第一种：延迟加载。\n### 延迟加载\nKotlin提供了一个lazy方法用于实现延迟加载，lazy方法有一个lambda表达式参数，用于对属性进行初始化赋值，而一旦完成赋值，该lambda表达式将不会再次调用。lambda表达式调用发生在第一次使用该属性的时候，即实现了属性赋值的延迟加载。来看一个简单的例子:\n\n```\n// 使用标准库实现的lazy函数，实现属性的延迟加载\nprivate val lazyValue: String by lazy {\n    println(\"调用该初始赋值表达式完成赋值\")\n    // 这里是实际赋值\n    \"Hello, world\"\n}\nfun main(args: Array<String>) {\n    // 仅在第一次会调用lazy方法的lambda表达式\n    println(lazyValue) // 打印：调用该初始赋值表达式完成赋值\n    println(lazyValue) // 打印： Hello, world, 再次调用将不再调用lambda表达式\n}\n```\n\nlazy方法是一个线程安全的延迟加载方法，为了加深大家的理解，根据上面的原理，我们尝试自己来实现一个非线程安全的延迟加载方法，看具体实现：\n\n```\nprivate object UNINITIALIZE_VALUE\n\nclass MyLazy<T>(initialize: ()->T) {\n    private var value: Any? = UNINITIALIZE_VALUE\n    private val initialize = initialize\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): T {\n        if(value == UNINITIALIZE_VALUE) {\n            value = initialize()\n        }\n        return value as T\n    }\n    operator fun setValue(thisRef: Any? , property: KProperty<*> , value: T) {\n        this.value = value\n    }\n}\n// 为了和标准库区分，使用__lazy命名\nfun <T>  __lazy(initialize: () -> T): MyLazy<T> = MyLazy(initialize)\n\nvar lazyValue1 by __lazy {\n    println(\"自定义lazy初始化赋值表达式被调用\")\n    \"Hello , world\"\n}\n\nfun main(args: Array<String>) {\n    // 自定义延迟加载函数__lazy\n    println(lazyValue1)\n    lazyValue1 = \"Other value\"\n    println(lazyValue1)\n}\n```\n\n由此可见，实现一个延迟加载接口并不复杂，最重要的是要理解延迟加载的过程以及实现原理。总结实现延迟加载接口，需要注意三个地方：\n\n* 需要提供初始化lambda表达式参数，用于初始赋值\n* 需要实现代理属性对象的setValue/getValue方法，如果是val则只需要实现getValue即可\n* 需要严格确保属性不会被多次初始化 \n\n### Observable属性\nKotlin标准库还提供了一个可观察属性，这个属性使用观察者模式实现，如果属性值发生变化则会调用相应的回调lambda接口通知使用者，先看一个具体的例子:\n\n```\nvar observableValue by Delegates.observable(\"Initial value\") {  prop , old , new ->\n    println(\"$old -> $new\")\n}\n\nfun main(args: Array<String>) {\n    println(observableValue)    // 打印：Initial value\n    observableValue = \"Hello\"   // 打印: Initial value -> Hello\n    println(observableValue)    // 打印：Hello\n}\n```\n\n这里的具体实现，感兴趣的同学请参看文章开头的方法进行追踪！\n\n### Storing Properties in a Map\n这也是Kotlin标准库提供的一个非常有用的特性，它主要用于JSON数据的解析。看官方的例子：\n\n```\nclass User(val map: Map<String, Any?>) {\n\tval name: String by map\n\tval age: Int by map\n}\n\nval user = User(mapOf(\n\t\"name\" to \"John Doe\",\n\t\"age\" to 25\n))\n```\n\n该方法比较简单，这里就不再赘述了！\n\n# 总结\n至此，关于代理的介绍可以暂时告一段落了！\n代理模式是一个非常经典设计模式，在解决某些问题中可以发挥事半功倍的效果。幸运的是，Kotlin语言原生支持代理模式，实现代理模式如同声明一个属性一样简单。而且，代理模式的设计也非常漂亮，仅仅使用一个关键字by极尽简约之美。在日常编码中，一定要灵活运用代理模式，比如实现延迟加载，实现属性观察等等。[KotterKnife](https://github.com/JakeWharton/kotterknife) 是一个非常经典的代理模式的实现例子，有兴趣的同学可以clone该仓库，查看源码，领会代理模式的优美。\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n\n# 文章源码地址\nKotliner: [https://github.com/yuanhoujun/Kotliner](https://github.com/yuanhoujun/Kotliner),\n别忘了点击仓库右上方的star哦！\n","slug":"kotlin/delegation","published":1,"updated":"2019-04-28T12:39:23.524Z","_id":"cjv0x7uj0004tbkb4kvlhp0oa","layout":"post","photos":[],"link":"","content":"<p>代理模式是23种经典设计模式之一，代理模式被认为是继承的更好替代解决方案；因为代理比继承更加灵活，在Java语言中，通过反射可以实现动态代理，动态代理可以实现<strong>AOP</strong>编程，即：可以动态地往已有类中添加逻辑；比如：实现事务的自动提交，异常的自动捕获，热修复等等; </p>\n<p>在Kotlin语言中，代理模式是默认支持的，不需要任何额外的代码，你只需要记住一个关键字<strong>by</strong>。我们不妨来试一下:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Base &#123;</span><br><span class=\"line\">    fun sayHi()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseImpl : Base &#123;</span><br><span class=\"line\">    override fun sayHi() &#123;</span><br><span class=\"line\">        println(&quot;BaseImpl-&gt;sayHi&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Derived(b: Base) : Base by b</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val b = BaseImpl()</span><br><span class=\"line\">    val derived = Derived(b)</span><br><span class=\"line\">    derived.sayHi()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里Derived作为BaseImpl的代理类，拥有BaseImpl类中的所有方法，Derived将代理BaseImpl类执行BaseImpl类中的所有方法，就像继承自BaseImpl类一样。这样说起来有点抽象，来看一下Kotlin编译器具体为我们做了一些什么。但是，怎么看呢？教大家一个方法！<br>大家都知道，Kotlin和Java均是JVM语言，最终均转换到同样的Java字节码，这样我们就可以先将Kotlin编译为.class文件，再反编译为.java文件，看看对应的Java代码，我们就可以看到更多的细节。下面是最终反编译生成的Java代码:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Derived implements Base &#123;</span><br><span class=\"line\">  public Derived(@NotNull Base b) &#123;</span><br><span class=\"line\">    this.$$delegate_0 = b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void sayHi() &#123;</span><br><span class=\"line\">    this.$$delegate_0.sayHi();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，我们可以清楚地看到，Kotlin编译器为我们动态添加了一个成员变量$$delegate_0，这个成员变量代表被代理的对象，这里对应的是BaseImpl对象，Derived里面的sayHi方法最终调用是代理对象的sayHi方法，即Kotlin编译器帮我们提供了一个非常漂亮的代理模式实现。</p>\n<h1 id=\"代理属性\"><a href=\"#代理属性\" class=\"headerlink\" title=\"代理属性\"></a>代理属性</h1><p>在一些情况下，我们可能希望某些属性延迟加载，即在我们正在需要的时候才对它赋值；亦或者我们希望可以随时监听属性值的变化；在上述这些场景中，代理属性就可以发挥作用了。</p>\n<p>代理属性的语法格式如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DelegateProperty &#123;</span><br><span class=\"line\">\tval d: String by Delegate()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Delegate &#123;</span><br><span class=\"line\">    operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;): String &#123;</span><br><span class=\"line\">        return &quot;Invoke getValue() , thisRef = $thisRef , property name = $&#123;property.name&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: String) &#123;</span><br><span class=\"line\">        println(&quot;Invoke setValue() , thisRef = $thisRef , property name = $&#123;property.name&#125; , value = $value&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val dp = DelegatedProperty()</span><br><span class=\"line\">    dp.d = &quot;Value0&quot; // Invoke setValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d , value = Value0</span><br><span class=\"line\">   </span><br><span class=\"line\">    println(dp.d) // Invoke getValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的代理是如何实现的呢？我们知道，Kotlin的属性值会自动生成set/get方法，而代理类通过代理set/get方法生成相应的代理方法，这里的方法对应关系如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// thisRef对应代理对象的引用，property对应代理属性的反射属性封装</span><br><span class=\"line\">// 注意这里的代理方法一定要添加operator关键字，operator关键字是重载操作符关键字，后续的文章中会讲到，敬请期待</span><br><span class=\"line\">get() -&gt; operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;)</span><br><span class=\"line\">set() -&gt; operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: T)</span><br></pre></td></tr></table></figure>\n<p>Kotlin标准库提供了一些常用代理的方法实现，即上文提到的几种代理，先来看第一种：延迟加载。</p>\n<h3 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h3><p>Kotlin提供了一个lazy方法用于实现延迟加载，lazy方法有一个lambda表达式参数，用于对属性进行初始化赋值，而一旦完成赋值，该lambda表达式将不会再次调用。lambda表达式调用发生在第一次使用该属性的时候，即实现了属性赋值的延迟加载。来看一个简单的例子:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用标准库实现的lazy函数，实现属性的延迟加载</span><br><span class=\"line\">private val lazyValue: String by lazy &#123;</span><br><span class=\"line\">    println(&quot;调用该初始赋值表达式完成赋值&quot;)</span><br><span class=\"line\">    // 这里是实际赋值</span><br><span class=\"line\">    &quot;Hello, world&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 仅在第一次会调用lazy方法的lambda表达式</span><br><span class=\"line\">    println(lazyValue) // 打印：调用该初始赋值表达式完成赋值</span><br><span class=\"line\">    println(lazyValue) // 打印： Hello, world, 再次调用将不再调用lambda表达式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lazy方法是一个线程安全的延迟加载方法，为了加深大家的理解，根据上面的原理，我们尝试自己来实现一个非线程安全的延迟加载方法，看具体实现：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private object UNINITIALIZE_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">class MyLazy&lt;T&gt;(initialize: ()-&gt;T) &#123;</span><br><span class=\"line\">    private var value: Any? = UNINITIALIZE_VALUE</span><br><span class=\"line\">    private val initialize = initialize</span><br><span class=\"line\">    operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;): T &#123;</span><br><span class=\"line\">        if(value == UNINITIALIZE_VALUE) &#123;</span><br><span class=\"line\">            value = initialize()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return value as T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: T) &#123;</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为了和标准库区分，使用__lazy命名</span><br><span class=\"line\">fun &lt;T&gt;  __lazy(initialize: () -&gt; T): MyLazy&lt;T&gt; = MyLazy(initialize)</span><br><span class=\"line\"></span><br><span class=\"line\">var lazyValue1 by __lazy &#123;</span><br><span class=\"line\">    println(&quot;自定义lazy初始化赋值表达式被调用&quot;)</span><br><span class=\"line\">    &quot;Hello , world&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 自定义延迟加载函数__lazy</span><br><span class=\"line\">    println(lazyValue1)</span><br><span class=\"line\">    lazyValue1 = &quot;Other value&quot;</span><br><span class=\"line\">    println(lazyValue1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见，实现一个延迟加载接口并不复杂，最重要的是要理解延迟加载的过程以及实现原理。总结实现延迟加载接口，需要注意三个地方：</p>\n<ul>\n<li>需要提供初始化lambda表达式参数，用于初始赋值</li>\n<li>需要实现代理属性对象的setValue/getValue方法，如果是val则只需要实现getValue即可</li>\n<li>需要严格确保属性不会被多次初始化 </li>\n</ul>\n<h3 id=\"Observable属性\"><a href=\"#Observable属性\" class=\"headerlink\" title=\"Observable属性\"></a>Observable属性</h3><p>Kotlin标准库还提供了一个可观察属性，这个属性使用观察者模式实现，如果属性值发生变化则会调用相应的回调lambda接口通知使用者，先看一个具体的例子:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observableValue by Delegates.observable(&quot;Initial value&quot;) &#123;  prop , old , new -&gt;</span><br><span class=\"line\">    println(&quot;$old -&gt; $new&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    println(observableValue)    // 打印：Initial value</span><br><span class=\"line\">    observableValue = &quot;Hello&quot;   // 打印: Initial value -&gt; Hello</span><br><span class=\"line\">    println(observableValue)    // 打印：Hello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的具体实现，感兴趣的同学请参看文章开头的方法进行追踪！</p>\n<h3 id=\"Storing-Properties-in-a-Map\"><a href=\"#Storing-Properties-in-a-Map\" class=\"headerlink\" title=\"Storing Properties in a Map\"></a>Storing Properties in a Map</h3><p>这也是Kotlin标准库提供的一个非常有用的特性，它主要用于JSON数据的解析。看官方的例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(val map: Map&lt;String, Any?&gt;) &#123;</span><br><span class=\"line\">\tval name: String by map</span><br><span class=\"line\">\tval age: Int by map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">val user = User(mapOf(</span><br><span class=\"line\">\t&quot;name&quot; to &quot;John Doe&quot;,</span><br><span class=\"line\">\t&quot;age&quot; to 25</span><br><span class=\"line\">))</span><br></pre></td></tr></table></figure>\n<p>该方法比较简单，这里就不再赘述了！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，关于代理的介绍可以暂时告一段落了！<br>代理模式是一个非常经典设计模式，在解决某些问题中可以发挥事半功倍的效果。幸运的是，Kotlin语言原生支持代理模式，实现代理模式如同声明一个属性一样简单。而且，代理模式的设计也非常漂亮，仅仅使用一个关键字by极尽简约之美。在日常编码中，一定要灵活运用代理模式，比如实现延迟加载，实现属性观察等等。<a href=\"https://github.com/JakeWharton/kotterknife\" target=\"_blank\" rel=\"noopener\">KotterKnife</a> 是一个非常经典的代理模式的实现例子，有兴趣的同学可以clone该仓库，查看源码，领会代理模式的优美。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n<h1 id=\"文章源码地址\"><a href=\"#文章源码地址\" class=\"headerlink\" title=\"文章源码地址\"></a>文章源码地址</h1><p>Kotliner: <a href=\"https://github.com/yuanhoujun/Kotliner\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/Kotliner</a>,<br>别忘了点击仓库右上方的star哦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>代理模式是23种经典设计模式之一，代理模式被认为是继承的更好替代解决方案；因为代理比继承更加灵活，在Java语言中，通过反射可以实现动态代理，动态代理可以实现<strong>AOP</strong>编程，即：可以动态地往已有类中添加逻辑；比如：实现事务的自动提交，异常的自动捕获，热修复等等; </p>\n<p>在Kotlin语言中，代理模式是默认支持的，不需要任何额外的代码，你只需要记住一个关键字<strong>by</strong>。我们不妨来试一下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Base &#123;</span><br><span class=\"line\">    fun sayHi()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseImpl : Base &#123;</span><br><span class=\"line\">    override fun sayHi() &#123;</span><br><span class=\"line\">        println(&quot;BaseImpl-&gt;sayHi&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Derived(b: Base) : Base by b</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val b = BaseImpl()</span><br><span class=\"line\">    val derived = Derived(b)</span><br><span class=\"line\">    derived.sayHi()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里Derived作为BaseImpl的代理类，拥有BaseImpl类中的所有方法，Derived将代理BaseImpl类执行BaseImpl类中的所有方法，就像继承自BaseImpl类一样。这样说起来有点抽象，来看一下Kotlin编译器具体为我们做了一些什么。但是，怎么看呢？教大家一个方法！<br>大家都知道，Kotlin和Java均是JVM语言，最终均转换到同样的Java字节码，这样我们就可以先将Kotlin编译为.class文件，再反编译为.java文件，看看对应的Java代码，我们就可以看到更多的细节。下面是最终反编译生成的Java代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Derived implements Base &#123;</span><br><span class=\"line\">  public Derived(@NotNull Base b) &#123;</span><br><span class=\"line\">    this.$$delegate_0 = b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void sayHi() &#123;</span><br><span class=\"line\">    this.$$delegate_0.sayHi();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，我们可以清楚地看到，Kotlin编译器为我们动态添加了一个成员变量$$delegate_0，这个成员变量代表被代理的对象，这里对应的是BaseImpl对象，Derived里面的sayHi方法最终调用是代理对象的sayHi方法，即Kotlin编译器帮我们提供了一个非常漂亮的代理模式实现。</p>\n<h1 id=\"代理属性\"><a href=\"#代理属性\" class=\"headerlink\" title=\"代理属性\"></a>代理属性</h1><p>在一些情况下，我们可能希望某些属性延迟加载，即在我们正在需要的时候才对它赋值；亦或者我们希望可以随时监听属性值的变化；在上述这些场景中，代理属性就可以发挥作用了。</p>\n<p>代理属性的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DelegateProperty &#123;</span><br><span class=\"line\">\tval d: String by Delegate()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Delegate &#123;</span><br><span class=\"line\">    operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;): String &#123;</span><br><span class=\"line\">        return &quot;Invoke getValue() , thisRef = $thisRef , property name = $&#123;property.name&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: String) &#123;</span><br><span class=\"line\">        println(&quot;Invoke setValue() , thisRef = $thisRef , property name = $&#123;property.name&#125; , value = $value&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val dp = DelegatedProperty()</span><br><span class=\"line\">    dp.d = &quot;Value0&quot; // Invoke setValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d , value = Value0</span><br><span class=\"line\">   </span><br><span class=\"line\">    println(dp.d) // Invoke getValue() , thisRef = DelegatedProperty@2ef1e4fa , property name = d</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的代理是如何实现的呢？我们知道，Kotlin的属性值会自动生成set/get方法，而代理类通过代理set/get方法生成相应的代理方法，这里的方法对应关系如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// thisRef对应代理对象的引用，property对应代理属性的反射属性封装</span><br><span class=\"line\">// 注意这里的代理方法一定要添加operator关键字，operator关键字是重载操作符关键字，后续的文章中会讲到，敬请期待</span><br><span class=\"line\">get() -&gt; operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;)</span><br><span class=\"line\">set() -&gt; operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: T)</span><br></pre></td></tr></table></figure>\n<p>Kotlin标准库提供了一些常用代理的方法实现，即上文提到的几种代理，先来看第一种：延迟加载。</p>\n<h3 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h3><p>Kotlin提供了一个lazy方法用于实现延迟加载，lazy方法有一个lambda表达式参数，用于对属性进行初始化赋值，而一旦完成赋值，该lambda表达式将不会再次调用。lambda表达式调用发生在第一次使用该属性的时候，即实现了属性赋值的延迟加载。来看一个简单的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用标准库实现的lazy函数，实现属性的延迟加载</span><br><span class=\"line\">private val lazyValue: String by lazy &#123;</span><br><span class=\"line\">    println(&quot;调用该初始赋值表达式完成赋值&quot;)</span><br><span class=\"line\">    // 这里是实际赋值</span><br><span class=\"line\">    &quot;Hello, world&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 仅在第一次会调用lazy方法的lambda表达式</span><br><span class=\"line\">    println(lazyValue) // 打印：调用该初始赋值表达式完成赋值</span><br><span class=\"line\">    println(lazyValue) // 打印： Hello, world, 再次调用将不再调用lambda表达式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lazy方法是一个线程安全的延迟加载方法，为了加深大家的理解，根据上面的原理，我们尝试自己来实现一个非线程安全的延迟加载方法，看具体实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private object UNINITIALIZE_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">class MyLazy&lt;T&gt;(initialize: ()-&gt;T) &#123;</span><br><span class=\"line\">    private var value: Any? = UNINITIALIZE_VALUE</span><br><span class=\"line\">    private val initialize = initialize</span><br><span class=\"line\">    operator fun getValue(thisRef: Any? , property: KProperty&lt;*&gt;): T &#123;</span><br><span class=\"line\">        if(value == UNINITIALIZE_VALUE) &#123;</span><br><span class=\"line\">            value = initialize()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return value as T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    operator fun setValue(thisRef: Any? , property: KProperty&lt;*&gt; , value: T) &#123;</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为了和标准库区分，使用__lazy命名</span><br><span class=\"line\">fun &lt;T&gt;  __lazy(initialize: () -&gt; T): MyLazy&lt;T&gt; = MyLazy(initialize)</span><br><span class=\"line\"></span><br><span class=\"line\">var lazyValue1 by __lazy &#123;</span><br><span class=\"line\">    println(&quot;自定义lazy初始化赋值表达式被调用&quot;)</span><br><span class=\"line\">    &quot;Hello , world&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    // 自定义延迟加载函数__lazy</span><br><span class=\"line\">    println(lazyValue1)</span><br><span class=\"line\">    lazyValue1 = &quot;Other value&quot;</span><br><span class=\"line\">    println(lazyValue1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见，实现一个延迟加载接口并不复杂，最重要的是要理解延迟加载的过程以及实现原理。总结实现延迟加载接口，需要注意三个地方：</p>\n<ul>\n<li>需要提供初始化lambda表达式参数，用于初始赋值</li>\n<li>需要实现代理属性对象的setValue/getValue方法，如果是val则只需要实现getValue即可</li>\n<li>需要严格确保属性不会被多次初始化 </li>\n</ul>\n<h3 id=\"Observable属性\"><a href=\"#Observable属性\" class=\"headerlink\" title=\"Observable属性\"></a>Observable属性</h3><p>Kotlin标准库还提供了一个可观察属性，这个属性使用观察者模式实现，如果属性值发生变化则会调用相应的回调lambda接口通知使用者，先看一个具体的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observableValue by Delegates.observable(&quot;Initial value&quot;) &#123;  prop , old , new -&gt;</span><br><span class=\"line\">    println(&quot;$old -&gt; $new&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    println(observableValue)    // 打印：Initial value</span><br><span class=\"line\">    observableValue = &quot;Hello&quot;   // 打印: Initial value -&gt; Hello</span><br><span class=\"line\">    println(observableValue)    // 打印：Hello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的具体实现，感兴趣的同学请参看文章开头的方法进行追踪！</p>\n<h3 id=\"Storing-Properties-in-a-Map\"><a href=\"#Storing-Properties-in-a-Map\" class=\"headerlink\" title=\"Storing Properties in a Map\"></a>Storing Properties in a Map</h3><p>这也是Kotlin标准库提供的一个非常有用的特性，它主要用于JSON数据的解析。看官方的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(val map: Map&lt;String, Any?&gt;) &#123;</span><br><span class=\"line\">\tval name: String by map</span><br><span class=\"line\">\tval age: Int by map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">val user = User(mapOf(</span><br><span class=\"line\">\t&quot;name&quot; to &quot;John Doe&quot;,</span><br><span class=\"line\">\t&quot;age&quot; to 25</span><br><span class=\"line\">))</span><br></pre></td></tr></table></figure>\n<p>该方法比较简单，这里就不再赘述了！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，关于代理的介绍可以暂时告一段落了！<br>代理模式是一个非常经典设计模式，在解决某些问题中可以发挥事半功倍的效果。幸运的是，Kotlin语言原生支持代理模式，实现代理模式如同声明一个属性一样简单。而且，代理模式的设计也非常漂亮，仅仅使用一个关键字by极尽简约之美。在日常编码中，一定要灵活运用代理模式，比如实现延迟加载，实现属性观察等等。<a href=\"https://github.com/JakeWharton/kotterknife\" target=\"_blank\" rel=\"noopener\">KotterKnife</a> 是一个非常经典的代理模式的实现例子，有兴趣的同学可以clone该仓库，查看源码，领会代理模式的优美。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n<h1 id=\"文章源码地址\"><a href=\"#文章源码地址\" class=\"headerlink\" title=\"文章源码地址\"></a>文章源码地址</h1><p>Kotliner: <a href=\"https://github.com/yuanhoujun/Kotliner\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/Kotliner</a>,<br>别忘了点击仓库右上方的star哦！</p>\n"},{"title":"也许你应该试试用Kotlin写Gradle脚本","date":"2018-01-26T02:48:00.000Z","comments":1,"_content":"\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-1ba63891256d9db2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Android应用开发中，离不开Gradle脚本的构建。大部分Android开发同学忽视了脚本的力量，甚至有很大一部分同学不知道Gradle脚本是什么，用什么语言编写的；当然，也有相当一部分同学知道Gradle脚本是使用Groovy语言编写的，但对于Groovy语言却一窍不通，只是勉强可以看懂Gradle脚本。正所谓，知其然，但并不知其所以然...\n\n换个角度看问题，熟练掌握Gradle脚本还需要精通Groovy语言，这对Android开发同学来说的确是一个不小的挑战。这种Java + Groovy的开发套餐对于普通的Android开发者来说的确存在一定的知识断层，显而易见的是，部分同学写的Gradle脚本简直“不堪入目”。时间回到去年5月份，Google IO大会上宣布了一个重磅消息，Android官方开始支持使用Kotlin语言进行应用开发。其实，在这个时间节点上，我已经在生产环境使用Kotlin开发Android将近一年。对于我来说，这无疑是一个让人欣喜若狂的消息。但，惊喜还远远不止这些，过了一段时间，我又看到了这篇文章 [Kotlin Meets Gradle](https://blog.gradle.org/kotlin-meets-gradle)。很有诗意的标题：当Gradle邂逅Kotlin，文章的核心意思是：**Gradle团队正在尝试使用Kotlin语言作为Gradle脚本的官方开发语言。**\n\n>我想，也许，Android开发者的春天就要到了！\n\n# Why use Kotlin ?\n在写Gradle脚本的时候，最痛苦的莫过于没有任何提示，唯一的调试手段就是使用**print**方法打印调试日志。正如 [Kotlin Meets Gradle](https://blog.gradle.org/kotlin-meets-gradle) 文中所说，当你使用Kotlin语言编写Gradle脚本的时候，你会发现一切都变得有趣起来。突然：\n* 脚本代码可以自动补全了\n* 源码之间可以互相跳转了\n* 插件源码更容易看懂了\n* 重构（Refactoring）也可以支持了\n...\n\n当然，惊喜还不止这些，当你开始决定使用Kotlin语言的时候，仿佛一切都变得美好了起来！\n\n# Let's start\n好了，废话不多说，接下来我们开始尝试用Kotlin语言编写Gradle脚本。由于当前 [kotlin-dsl](https://github.com/gradle/kotlin-dsl) 正处于预发布状态（**kotlin-dsl**的最新版本是0.14.2，对应Gradle插件版本4.5），IDE的支持也不完善，为了更好的体验该功能，推荐大家使用如下配置：\n\n### 实验室配置\n**操作系统：**macOS 10.13.2\n**Android Studio：** 3.1 Canary 9\n**Gradle Wrapper：** 4.5\n**Gradle Plugin：** 3.1.0-alpha9\n**Kotlin**：1.2.21\n\n# 操作步骤\n首先，按照以往步骤创建一个Android工程：\n![](http://upload-images.jianshu.io/upload_images/703764-58f93d293addaba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来，改造开始，Gradle Script Kotlin脚本以`.gradle.kts`后缀结尾。因此，我们先将工程根目录`settings.gradle`更名为`settings.gradle.kts`。\n![](http://upload-images.jianshu.io/upload_images/703764-429cf07b4fcaf7bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这个地方的错误有两个原因：\n* Kotlin语言中，单引号只能包裹字符，不能包裹字符串\n* Kotlin语言中，方法调用使用括号。仅在使用`infix`修饰的方法中可以省略括号。这里显然是一个正常调用方法。因此，我们修改为：\n```\ninclude(\"app\")\n```\n接下来，修改根目录的`build.gradle`脚本，用同样的方式修改后缀，方法修改为括号调用，修改后的内容如下：\n```\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        // 这里修改为括号调用即可\n        classpath(\"com.android.tools.build:gradle:3.0.1\")\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n> 注意：在修改后缀名称的时候IDE会出现警告提示，这里可以忽略，选择**continue**即可。\n\n由于我们手动修改了`build.gradle`脚本，为了保证工程可以使用这个脚本，需要在`settings.gradle.kts`中添加一行代码，让Gradle知道使用`build.gradle.kts`脚本构建。因此，最后的`settings.gradle.kts`代码如下：\n```\ninclude(\"app\")\nrootProject.buildFileName = \"build.gradle.kts\"\n```\n\n最后一步，修改app模块`build.gradle`文件，这也是最复杂的一步，修改完后缀名后，你会看到整个脚本全部被红色标识错误：\n![](http://upload-images.jianshu.io/upload_images/703764-fcca2611413c7e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n别慌！还是一样的方式，这里我们先将这里的所有代码注释掉。在最上方逐一对应修改，`apply plugin`部分修改为:\n```\nplugins {\n    id(\"com.android.application\")\n}\n```\n\n接下来，修改`android {}`闭包部分。这里有两个小技巧，由于目前IDE的支持不是很完善，在输入的时候稍微等待一段时间，IDE会给出相应的提示。另外，如果没有提示，例如`android {}`闭包就没有任何提示，输入完成后展开右侧gradle面板，选择`gradle/buid setup/init`，双击执行：\n![](http://upload-images.jianshu.io/upload_images/703764-4710f3eea9bac093.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在底部面板可以看到任务执行是否成功。注意，即使任务执行成功，脚本依然可能被红色标识，这是IDE支持不完善导致的，可以忽略。\n\n修改完成后的内容如下：\n```\nandroid {\n    compileSdkVersion(27)\n    buildToolsVersion(\"27.0.2\")\n\n    defaultConfig {\n        applicationId = \"com.youngfeng.kotlindsl\"\n        minSdkVersion(15)\n        targetSdkVersion(27)\n        versionCode = 1\n        versionName = \"1.0\"\n        testInstrumentationRunner = \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = true\n            proguardFiles(getDefaultProguardFile(\"proguard-android.txt\"), \"proguard-rules.pro\")\n        }\n    }\n}\n```\n\n注意：你在使用的过程中，依然可能会遇到无论如何都不生效的问题。这个时候别着急，使用`./gradlew assembleDebug`命令调试，查看终端找到错误原因。Windows用户去掉`./`执行即可。\n![](http://upload-images.jianshu.io/upload_images/703764-1e9abe6a47044d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最后的依赖部分，同样地，全部修改为括号调用即可。这里就不赘述了，文章的最后部分会提供操作视频，在使用过程中有任何问题可以打开操作视频参考，如果依然不能解决，可以在文章下方给我留言，我会在第一时间给你答复。修改后的内容如下：\n```\ndependencies {\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\"))))\n    implementation(\"com.android.support:appcompat-v7:26.1.0\")\n    implementation(\"com.android.support.constraint:constraint-layout:1.0.2\")\n    testImplementation(\"junit:junit:4.12\")\n    androidTestImplementation(\"com.android.support.test:runner:1.0.1\")\n    androidTestImplementation(\"com.android.support.test.espresso:espresso-core:3.0.1\")\n}\n```\n\n通过上面的步骤，从Groovy转换到Kotlin的步骤已经全部完成，你可以在终端输入`./gradlew assembleDebug`测试是否可以正常构建了：\n![](http://upload-images.jianshu.io/upload_images/703764-2ec3894242b02f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 统一依赖管理\n上面的步骤虽然完成了脚本的转换，但依赖的管理依然是混乱的，为了实现类似\n [Snake](https://github.com/yuanhoujun/Android_Slide_To_Close) 工程的统一依赖管理，我们还需要做一些工作。\n\nGradle官方提供了使用 [buildSrc](https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_sources) 目录实现自定义任务和插件逻辑，这里我们可以使用它完成依赖的统一处理，一个完整的buildSrc目录结构如下：\n![](http://upload-images.jianshu.io/upload_images/703764-a000e0ab037ab1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDeps类中，可以这样定义依赖结构：\n```\nobject deps {\n    object plugin {\n        val gradle = \"com.android.tools.build:gradle:3.1.0-alpha09\"\n        val kotlin = \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.21\"\n    }\n\n    object kotlin {\n        val stdlibJre7 = \"org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.21\"\n    }\n\n    object android {\n        object support {\n            val compat = \"com.android.support:appcompat-v7:27.0.2\"\n            val constraintLayout = \"com.android.support.constraint:constraint-layout:1.0.2\"\n        }\n\n        object test {\n            val junit = \"junit:junit:4.12\"\n            val runner = \"com.android.support.test:runner:1.0.1\"\n            val espressoCore = \"com.android.support.test.espresso:espresso-core:3.0.1\"\n        }\n    }\n}\n```\n\n定义之后，我们就可以在脚本中直接引用了：\n```\ndependencies {\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\"))))\n    implementation(deps.kotlin.stdlibJre7)\n    implementation(deps.android.support.compat)\n    implementation(deps.android.support.constraintLayout)\n    testImplementation(deps.android.test.junit)\n    androidTestImplementation(deps.android.test.runner)\n    androidTestImplementation(deps.android.test.espressoCore)\n}\n```\n是不是漂亮了许多？\n\n至此，整个转换过程就顺利完成了，为了保证转换的成功率，我推荐使用文章开头的实验室配置。如果版本过低，不保证可以转换成功。最新版本的**kotlin-dsl**会跟随最新版本的Gradle插件发布，因此一定要使用最新版本。另外，目前IDE对kts的支持依然不完善，即使正确的写法也会报错，这个一定要注意，不要被IDE欺骗了。\n\n### 更详细的操作，请看视频教程\n腾讯视频：[用Kotlin写Android Gradle脚本](https://v.qq.com/x/page/x0539lvfmm2.html)\n\n#### 一些建议\n虽然使用Kotlin语言写脚本是一件非常美妙的事情，但目前依然存在一些问题：\n* IDE支持不完善\n*  [kotlin-dsl](https://github.com/gradle/kotlin-dsl) 正在快速开发中，语法变动较大\n* 缺少官方文档\n* 互联网上缺少相关资料，遇到问题很难追踪\n\n因此，目前我并不推荐你在生产环境中使用，但可以作为日常学习练手之用。预计1.0版本的发布在今年6月份左右，正式版本发布后，我推荐你立即将Gradle脚本转换到Kotlin语言。\n\n#### 遇到问题，看这里 ==>\n在使用的过程中，按照文章同样的步骤，你依然可能会遇到很多问题。因此，我为你整理了目前互联网上可以参考的资料，你可以收藏这篇文章。遇到问题别慌，来这里查找答案。\n\n关于**kotlin-dsl**的开发路线图，请看这篇文章：[https://blog.gradle.org/kotlin-scripting-update](https://blog.gradle.org/kotlin-scripting-update)\n\n如果你在使用过程中，遇到了任何问题，并且确定是 **kotlin-dsl** 的bug，请点这里：[https://github.com/gradle/kotlin-dsl](https://github.com/gradle/kotlin-dsl) 并推送 **issue**\n\n如果你遇到了知识盲点，并且在Google找不到答案。可以来 [Slack](https://kotlinlang.slack.com/)#gradle频道反馈，我在 [Slack](https://kotlinlang.slack.com/) 的昵称是**Scott Smith**，也欢迎你给我发送私信消息。\n![](http://upload-images.jianshu.io/upload_images/703764-995957884721bca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n本篇文章例子完整代码，请点击这里：[https://github.com/yuanhoujun/gradle-script-kotlin-example](https://github.com/yuanhoujun/gradle-script-kotlin-example)\n\nkts文档正在编写当中，具体进度，请点这里：[https://github.com/gradle/kotlin-dsl-docs](https://github.com/gradle/kotlin-dsl-docs)\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n","source":"_posts/kotlin/用Kotlin写Android-Gradle脚本.md","raw":"title: 也许你应该试试用Kotlin写Gradle脚本\ndate: 2018/01/26 10:48\ncomments: true\ntags:\n- Kotlin\n- Groovy\n- Gradle\n- 脚本\ncategories:\n- Kotlin\n- 杂谈\n---\n\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-1ba63891256d9db2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Android应用开发中，离不开Gradle脚本的构建。大部分Android开发同学忽视了脚本的力量，甚至有很大一部分同学不知道Gradle脚本是什么，用什么语言编写的；当然，也有相当一部分同学知道Gradle脚本是使用Groovy语言编写的，但对于Groovy语言却一窍不通，只是勉强可以看懂Gradle脚本。正所谓，知其然，但并不知其所以然...\n\n换个角度看问题，熟练掌握Gradle脚本还需要精通Groovy语言，这对Android开发同学来说的确是一个不小的挑战。这种Java + Groovy的开发套餐对于普通的Android开发者来说的确存在一定的知识断层，显而易见的是，部分同学写的Gradle脚本简直“不堪入目”。时间回到去年5月份，Google IO大会上宣布了一个重磅消息，Android官方开始支持使用Kotlin语言进行应用开发。其实，在这个时间节点上，我已经在生产环境使用Kotlin开发Android将近一年。对于我来说，这无疑是一个让人欣喜若狂的消息。但，惊喜还远远不止这些，过了一段时间，我又看到了这篇文章 [Kotlin Meets Gradle](https://blog.gradle.org/kotlin-meets-gradle)。很有诗意的标题：当Gradle邂逅Kotlin，文章的核心意思是：**Gradle团队正在尝试使用Kotlin语言作为Gradle脚本的官方开发语言。**\n\n>我想，也许，Android开发者的春天就要到了！\n\n# Why use Kotlin ?\n在写Gradle脚本的时候，最痛苦的莫过于没有任何提示，唯一的调试手段就是使用**print**方法打印调试日志。正如 [Kotlin Meets Gradle](https://blog.gradle.org/kotlin-meets-gradle) 文中所说，当你使用Kotlin语言编写Gradle脚本的时候，你会发现一切都变得有趣起来。突然：\n* 脚本代码可以自动补全了\n* 源码之间可以互相跳转了\n* 插件源码更容易看懂了\n* 重构（Refactoring）也可以支持了\n...\n\n当然，惊喜还不止这些，当你开始决定使用Kotlin语言的时候，仿佛一切都变得美好了起来！\n\n# Let's start\n好了，废话不多说，接下来我们开始尝试用Kotlin语言编写Gradle脚本。由于当前 [kotlin-dsl](https://github.com/gradle/kotlin-dsl) 正处于预发布状态（**kotlin-dsl**的最新版本是0.14.2，对应Gradle插件版本4.5），IDE的支持也不完善，为了更好的体验该功能，推荐大家使用如下配置：\n\n### 实验室配置\n**操作系统：**macOS 10.13.2\n**Android Studio：** 3.1 Canary 9\n**Gradle Wrapper：** 4.5\n**Gradle Plugin：** 3.1.0-alpha9\n**Kotlin**：1.2.21\n\n# 操作步骤\n首先，按照以往步骤创建一个Android工程：\n![](http://upload-images.jianshu.io/upload_images/703764-58f93d293addaba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来，改造开始，Gradle Script Kotlin脚本以`.gradle.kts`后缀结尾。因此，我们先将工程根目录`settings.gradle`更名为`settings.gradle.kts`。\n![](http://upload-images.jianshu.io/upload_images/703764-429cf07b4fcaf7bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这个地方的错误有两个原因：\n* Kotlin语言中，单引号只能包裹字符，不能包裹字符串\n* Kotlin语言中，方法调用使用括号。仅在使用`infix`修饰的方法中可以省略括号。这里显然是一个正常调用方法。因此，我们修改为：\n```\ninclude(\"app\")\n```\n接下来，修改根目录的`build.gradle`脚本，用同样的方式修改后缀，方法修改为括号调用，修改后的内容如下：\n```\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        // 这里修改为括号调用即可\n        classpath(\"com.android.tools.build:gradle:3.0.1\")\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n> 注意：在修改后缀名称的时候IDE会出现警告提示，这里可以忽略，选择**continue**即可。\n\n由于我们手动修改了`build.gradle`脚本，为了保证工程可以使用这个脚本，需要在`settings.gradle.kts`中添加一行代码，让Gradle知道使用`build.gradle.kts`脚本构建。因此，最后的`settings.gradle.kts`代码如下：\n```\ninclude(\"app\")\nrootProject.buildFileName = \"build.gradle.kts\"\n```\n\n最后一步，修改app模块`build.gradle`文件，这也是最复杂的一步，修改完后缀名后，你会看到整个脚本全部被红色标识错误：\n![](http://upload-images.jianshu.io/upload_images/703764-fcca2611413c7e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n别慌！还是一样的方式，这里我们先将这里的所有代码注释掉。在最上方逐一对应修改，`apply plugin`部分修改为:\n```\nplugins {\n    id(\"com.android.application\")\n}\n```\n\n接下来，修改`android {}`闭包部分。这里有两个小技巧，由于目前IDE的支持不是很完善，在输入的时候稍微等待一段时间，IDE会给出相应的提示。另外，如果没有提示，例如`android {}`闭包就没有任何提示，输入完成后展开右侧gradle面板，选择`gradle/buid setup/init`，双击执行：\n![](http://upload-images.jianshu.io/upload_images/703764-4710f3eea9bac093.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在底部面板可以看到任务执行是否成功。注意，即使任务执行成功，脚本依然可能被红色标识，这是IDE支持不完善导致的，可以忽略。\n\n修改完成后的内容如下：\n```\nandroid {\n    compileSdkVersion(27)\n    buildToolsVersion(\"27.0.2\")\n\n    defaultConfig {\n        applicationId = \"com.youngfeng.kotlindsl\"\n        minSdkVersion(15)\n        targetSdkVersion(27)\n        versionCode = 1\n        versionName = \"1.0\"\n        testInstrumentationRunner = \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = true\n            proguardFiles(getDefaultProguardFile(\"proguard-android.txt\"), \"proguard-rules.pro\")\n        }\n    }\n}\n```\n\n注意：你在使用的过程中，依然可能会遇到无论如何都不生效的问题。这个时候别着急，使用`./gradlew assembleDebug`命令调试，查看终端找到错误原因。Windows用户去掉`./`执行即可。\n![](http://upload-images.jianshu.io/upload_images/703764-1e9abe6a47044d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最后的依赖部分，同样地，全部修改为括号调用即可。这里就不赘述了，文章的最后部分会提供操作视频，在使用过程中有任何问题可以打开操作视频参考，如果依然不能解决，可以在文章下方给我留言，我会在第一时间给你答复。修改后的内容如下：\n```\ndependencies {\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\"))))\n    implementation(\"com.android.support:appcompat-v7:26.1.0\")\n    implementation(\"com.android.support.constraint:constraint-layout:1.0.2\")\n    testImplementation(\"junit:junit:4.12\")\n    androidTestImplementation(\"com.android.support.test:runner:1.0.1\")\n    androidTestImplementation(\"com.android.support.test.espresso:espresso-core:3.0.1\")\n}\n```\n\n通过上面的步骤，从Groovy转换到Kotlin的步骤已经全部完成，你可以在终端输入`./gradlew assembleDebug`测试是否可以正常构建了：\n![](http://upload-images.jianshu.io/upload_images/703764-2ec3894242b02f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 统一依赖管理\n上面的步骤虽然完成了脚本的转换，但依赖的管理依然是混乱的，为了实现类似\n [Snake](https://github.com/yuanhoujun/Android_Slide_To_Close) 工程的统一依赖管理，我们还需要做一些工作。\n\nGradle官方提供了使用 [buildSrc](https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_sources) 目录实现自定义任务和插件逻辑，这里我们可以使用它完成依赖的统一处理，一个完整的buildSrc目录结构如下：\n![](http://upload-images.jianshu.io/upload_images/703764-a000e0ab037ab1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDeps类中，可以这样定义依赖结构：\n```\nobject deps {\n    object plugin {\n        val gradle = \"com.android.tools.build:gradle:3.1.0-alpha09\"\n        val kotlin = \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.21\"\n    }\n\n    object kotlin {\n        val stdlibJre7 = \"org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.21\"\n    }\n\n    object android {\n        object support {\n            val compat = \"com.android.support:appcompat-v7:27.0.2\"\n            val constraintLayout = \"com.android.support.constraint:constraint-layout:1.0.2\"\n        }\n\n        object test {\n            val junit = \"junit:junit:4.12\"\n            val runner = \"com.android.support.test:runner:1.0.1\"\n            val espressoCore = \"com.android.support.test.espresso:espresso-core:3.0.1\"\n        }\n    }\n}\n```\n\n定义之后，我们就可以在脚本中直接引用了：\n```\ndependencies {\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\"))))\n    implementation(deps.kotlin.stdlibJre7)\n    implementation(deps.android.support.compat)\n    implementation(deps.android.support.constraintLayout)\n    testImplementation(deps.android.test.junit)\n    androidTestImplementation(deps.android.test.runner)\n    androidTestImplementation(deps.android.test.espressoCore)\n}\n```\n是不是漂亮了许多？\n\n至此，整个转换过程就顺利完成了，为了保证转换的成功率，我推荐使用文章开头的实验室配置。如果版本过低，不保证可以转换成功。最新版本的**kotlin-dsl**会跟随最新版本的Gradle插件发布，因此一定要使用最新版本。另外，目前IDE对kts的支持依然不完善，即使正确的写法也会报错，这个一定要注意，不要被IDE欺骗了。\n\n### 更详细的操作，请看视频教程\n腾讯视频：[用Kotlin写Android Gradle脚本](https://v.qq.com/x/page/x0539lvfmm2.html)\n\n#### 一些建议\n虽然使用Kotlin语言写脚本是一件非常美妙的事情，但目前依然存在一些问题：\n* IDE支持不完善\n*  [kotlin-dsl](https://github.com/gradle/kotlin-dsl) 正在快速开发中，语法变动较大\n* 缺少官方文档\n* 互联网上缺少相关资料，遇到问题很难追踪\n\n因此，目前我并不推荐你在生产环境中使用，但可以作为日常学习练手之用。预计1.0版本的发布在今年6月份左右，正式版本发布后，我推荐你立即将Gradle脚本转换到Kotlin语言。\n\n#### 遇到问题，看这里 ==>\n在使用的过程中，按照文章同样的步骤，你依然可能会遇到很多问题。因此，我为你整理了目前互联网上可以参考的资料，你可以收藏这篇文章。遇到问题别慌，来这里查找答案。\n\n关于**kotlin-dsl**的开发路线图，请看这篇文章：[https://blog.gradle.org/kotlin-scripting-update](https://blog.gradle.org/kotlin-scripting-update)\n\n如果你在使用过程中，遇到了任何问题，并且确定是 **kotlin-dsl** 的bug，请点这里：[https://github.com/gradle/kotlin-dsl](https://github.com/gradle/kotlin-dsl) 并推送 **issue**\n\n如果你遇到了知识盲点，并且在Google找不到答案。可以来 [Slack](https://kotlinlang.slack.com/)#gradle频道反馈，我在 [Slack](https://kotlinlang.slack.com/) 的昵称是**Scott Smith**，也欢迎你给我发送私信消息。\n![](http://upload-images.jianshu.io/upload_images/703764-995957884721bca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n本篇文章例子完整代码，请点击这里：[https://github.com/yuanhoujun/gradle-script-kotlin-example](https://github.com/yuanhoujun/gradle-script-kotlin-example)\n\nkts文档正在编写当中，具体进度，请点这里：[https://github.com/gradle/kotlin-dsl-docs](https://github.com/gradle/kotlin-dsl-docs)\n\n# 欢迎加入Kotlin交流群\n如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。\n","slug":"kotlin/用Kotlin写Android-Gradle脚本","published":1,"updated":"2019-04-28T12:39:23.526Z","_id":"cjv0x7uj4004vbkb4yaonq9h3","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-1ba63891256d9db2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>Android应用开发中，离不开Gradle脚本的构建。大部分Android开发同学忽视了脚本的力量，甚至有很大一部分同学不知道Gradle脚本是什么，用什么语言编写的；当然，也有相当一部分同学知道Gradle脚本是使用Groovy语言编写的，但对于Groovy语言却一窍不通，只是勉强可以看懂Gradle脚本。正所谓，知其然，但并不知其所以然…</p>\n</blockquote>\n<p>换个角度看问题，熟练掌握Gradle脚本还需要精通Groovy语言，这对Android开发同学来说的确是一个不小的挑战。这种Java + Groovy的开发套餐对于普通的Android开发者来说的确存在一定的知识断层，显而易见的是，部分同学写的Gradle脚本简直“不堪入目”。时间回到去年5月份，Google IO大会上宣布了一个重磅消息，Android官方开始支持使用Kotlin语言进行应用开发。其实，在这个时间节点上，我已经在生产环境使用Kotlin开发Android将近一年。对于我来说，这无疑是一个让人欣喜若狂的消息。但，惊喜还远远不止这些，过了一段时间，我又看到了这篇文章 <a href=\"https://blog.gradle.org/kotlin-meets-gradle\" target=\"_blank\" rel=\"noopener\">Kotlin Meets Gradle</a>。很有诗意的标题：当Gradle邂逅Kotlin，文章的核心意思是：<strong>Gradle团队正在尝试使用Kotlin语言作为Gradle脚本的官方开发语言。</strong></p>\n<blockquote>\n<p>我想，也许，Android开发者的春天就要到了！</p>\n</blockquote>\n<h1 id=\"Why-use-Kotlin\"><a href=\"#Why-use-Kotlin\" class=\"headerlink\" title=\"Why use Kotlin ?\"></a>Why use Kotlin ?</h1><p>在写Gradle脚本的时候，最痛苦的莫过于没有任何提示，唯一的调试手段就是使用<strong>print</strong>方法打印调试日志。正如 <a href=\"https://blog.gradle.org/kotlin-meets-gradle\" target=\"_blank\" rel=\"noopener\">Kotlin Meets Gradle</a> 文中所说，当你使用Kotlin语言编写Gradle脚本的时候，你会发现一切都变得有趣起来。突然：</p>\n<ul>\n<li>脚本代码可以自动补全了</li>\n<li>源码之间可以互相跳转了</li>\n<li>插件源码更容易看懂了</li>\n<li>重构（Refactoring）也可以支持了<br>…</li>\n</ul>\n<p>当然，惊喜还不止这些，当你开始决定使用Kotlin语言的时候，仿佛一切都变得美好了起来！</p>\n<h1 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\"></a>Let’s start</h1><p>好了，废话不多说，接下来我们开始尝试用Kotlin语言编写Gradle脚本。由于当前 <a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">kotlin-dsl</a> 正处于预发布状态（<strong>kotlin-dsl</strong>的最新版本是0.14.2，对应Gradle插件版本4.5），IDE的支持也不完善，为了更好的体验该功能，推荐大家使用如下配置：</p>\n<h3 id=\"实验室配置\"><a href=\"#实验室配置\" class=\"headerlink\" title=\"实验室配置\"></a>实验室配置</h3><p><strong>操作系统：</strong>macOS 10.13.2<br><strong>Android Studio：</strong> 3.1 Canary 9<br><strong>Gradle Wrapper：</strong> 4.5<br><strong>Gradle Plugin：</strong> 3.1.0-alpha9<br><strong>Kotlin</strong>：1.2.21</p>\n<h1 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h1><p>首先，按照以往步骤创建一个Android工程：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-58f93d293addaba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接下来，改造开始，Gradle Script Kotlin脚本以<code>.gradle.kts</code>后缀结尾。因此，我们先将工程根目录<code>settings.gradle</code>更名为<code>settings.gradle.kts</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-429cf07b4fcaf7bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这个地方的错误有两个原因：</p>\n<ul>\n<li>Kotlin语言中，单引号只能包裹字符，不能包裹字符串</li>\n<li>Kotlin语言中，方法调用使用括号。仅在使用<code>infix</code>修饰的方法中可以省略括号。这里显然是一个正常调用方法。因此，我们修改为：<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;app&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来，修改根目录的<code>build.gradle</code>脚本，用同样的方式修改后缀，方法修改为括号调用，修改后的内容如下：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        // 这里修改为括号调用即可</span><br><span class=\"line\">        classpath(&quot;com.android.tools.build:gradle:3.0.1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：在修改后缀名称的时候IDE会出现警告提示，这里可以忽略，选择<strong>continue</strong>即可。</p>\n</blockquote>\n<p>由于我们手动修改了<code>build.gradle</code>脚本，为了保证工程可以使用这个脚本，需要在<code>settings.gradle.kts</code>中添加一行代码，让Gradle知道使用<code>build.gradle.kts</code>脚本构建。因此，最后的<code>settings.gradle.kts</code>代码如下：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;app&quot;)</span><br><span class=\"line\">rootProject.buildFileName = &quot;build.gradle.kts&quot;</span><br></pre></td></tr></table></figure></p>\n<p>最后一步，修改app模块<code>build.gradle</code>文件，这也是最复杂的一步，修改完后缀名后，你会看到整个脚本全部被红色标识错误：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-fcca2611413c7e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>别慌！还是一样的方式，这里我们先将这里的所有代码注释掉。在最上方逐一对应修改，<code>apply plugin</code>部分修改为:<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id(&quot;com.android.application&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，修改<code>android {}</code>闭包部分。这里有两个小技巧，由于目前IDE的支持不是很完善，在输入的时候稍微等待一段时间，IDE会给出相应的提示。另外，如果没有提示，例如<code>android {}</code>闭包就没有任何提示，输入完成后展开右侧gradle面板，选择<code>gradle/buid setup/init</code>，双击执行：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4710f3eea9bac093.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在底部面板可以看到任务执行是否成功。注意，即使任务执行成功，脚本依然可能被红色标识，这是IDE支持不完善导致的，可以忽略。</p>\n<p>修改完成后的内容如下：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion(27)</span><br><span class=\"line\">    buildToolsVersion(&quot;27.0.2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId = &quot;com.youngfeng.kotlindsl&quot;</span><br><span class=\"line\">        minSdkVersion(15)</span><br><span class=\"line\">        targetSdkVersion(27)</span><br><span class=\"line\">        versionCode = 1</span><br><span class=\"line\">        versionName = &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner = &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        getByName(&quot;release&quot;) &#123;</span><br><span class=\"line\">            isMinifyEnabled = true</span><br><span class=\"line\">            proguardFiles(getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：你在使用的过程中，依然可能会遇到无论如何都不生效的问题。这个时候别着急，使用<code>./gradlew assembleDebug</code>命令调试，查看终端找到错误原因。Windows用户去掉<code>./</code>执行即可。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-1e9abe6a47044d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后的依赖部分，同样地，全部修改为括号调用即可。这里就不赘述了，文章的最后部分会提供操作视频，在使用过程中有任何问题可以打开操作视频参考，如果依然不能解决，可以在文章下方给我留言，我会在第一时间给你答复。修改后的内容如下：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(fileTree(mapOf(&quot;dir&quot; to &quot;libs&quot;, &quot;include&quot; to listOf(&quot;*.jar&quot;))))</span><br><span class=\"line\">    implementation(&quot;com.android.support:appcompat-v7:26.1.0&quot;)</span><br><span class=\"line\">    implementation(&quot;com.android.support.constraint:constraint-layout:1.0.2&quot;)</span><br><span class=\"line\">    testImplementation(&quot;junit:junit:4.12&quot;)</span><br><span class=\"line\">    androidTestImplementation(&quot;com.android.support.test:runner:1.0.1&quot;)</span><br><span class=\"line\">    androidTestImplementation(&quot;com.android.support.test.espresso:espresso-core:3.0.1&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的步骤，从Groovy转换到Kotlin的步骤已经全部完成，你可以在终端输入<code>./gradlew assembleDebug</code>测试是否可以正常构建了：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2ec3894242b02f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"统一依赖管理\"><a href=\"#统一依赖管理\" class=\"headerlink\" title=\"统一依赖管理\"></a>统一依赖管理</h1><p>上面的步骤虽然完成了脚本的转换，但依赖的管理依然是混乱的，为了实现类似<br> <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Snake</a> 工程的统一依赖管理，我们还需要做一些工作。</p>\n<p>Gradle官方提供了使用 <a href=\"https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_sources\" target=\"_blank\" rel=\"noopener\">buildSrc</a> 目录实现自定义任务和插件逻辑，这里我们可以使用它完成依赖的统一处理，一个完整的buildSrc目录结构如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-a000e0ab037ab1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>Deps类中，可以这样定义依赖结构：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object deps &#123;</span><br><span class=\"line\">    object plugin &#123;</span><br><span class=\"line\">        val gradle = &quot;com.android.tools.build:gradle:3.1.0-alpha09&quot;</span><br><span class=\"line\">        val kotlin = &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.21&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    object kotlin &#123;</span><br><span class=\"line\">        val stdlibJre7 = &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.21&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    object android &#123;</span><br><span class=\"line\">        object support &#123;</span><br><span class=\"line\">            val compat = &quot;com.android.support:appcompat-v7:27.0.2&quot;</span><br><span class=\"line\">            val constraintLayout = &quot;com.android.support.constraint:constraint-layout:1.0.2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        object test &#123;</span><br><span class=\"line\">            val junit = &quot;junit:junit:4.12&quot;</span><br><span class=\"line\">            val runner = &quot;com.android.support.test:runner:1.0.1&quot;</span><br><span class=\"line\">            val espressoCore = &quot;com.android.support.test.espresso:espresso-core:3.0.1&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义之后，我们就可以在脚本中直接引用了：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(fileTree(mapOf(&quot;dir&quot; to &quot;libs&quot;, &quot;include&quot; to listOf(&quot;*.jar&quot;))))</span><br><span class=\"line\">    implementation(deps.kotlin.stdlibJre7)</span><br><span class=\"line\">    implementation(deps.android.support.compat)</span><br><span class=\"line\">    implementation(deps.android.support.constraintLayout)</span><br><span class=\"line\">    testImplementation(deps.android.test.junit)</span><br><span class=\"line\">    androidTestImplementation(deps.android.test.runner)</span><br><span class=\"line\">    androidTestImplementation(deps.android.test.espressoCore)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是漂亮了许多？</p>\n<p>至此，整个转换过程就顺利完成了，为了保证转换的成功率，我推荐使用文章开头的实验室配置。如果版本过低，不保证可以转换成功。最新版本的<strong>kotlin-dsl</strong>会跟随最新版本的Gradle插件发布，因此一定要使用最新版本。另外，目前IDE对kts的支持依然不完善，即使正确的写法也会报错，这个一定要注意，不要被IDE欺骗了。</p>\n<h3 id=\"更详细的操作，请看视频教程\"><a href=\"#更详细的操作，请看视频教程\" class=\"headerlink\" title=\"更详细的操作，请看视频教程\"></a>更详细的操作，请看视频教程</h3><p>腾讯视频：<a href=\"https://v.qq.com/x/page/x0539lvfmm2.html\" target=\"_blank\" rel=\"noopener\">用Kotlin写Android Gradle脚本</a></p>\n<h4 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h4><p>虽然使用Kotlin语言写脚本是一件非常美妙的事情，但目前依然存在一些问题：</p>\n<ul>\n<li>IDE支持不完善</li>\n<li><a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">kotlin-dsl</a> 正在快速开发中，语法变动较大</li>\n<li>缺少官方文档</li>\n<li>互联网上缺少相关资料，遇到问题很难追踪</li>\n</ul>\n<p>因此，目前我并不推荐你在生产环境中使用，但可以作为日常学习练手之用。预计1.0版本的发布在今年6月份左右，正式版本发布后，我推荐你立即将Gradle脚本转换到Kotlin语言。</p>\n<h4 id=\"遇到问题，看这里-gt\"><a href=\"#遇到问题，看这里-gt\" class=\"headerlink\" title=\"遇到问题，看这里 ==&gt;\"></a>遇到问题，看这里 ==&gt;</h4><p>在使用的过程中，按照文章同样的步骤，你依然可能会遇到很多问题。因此，我为你整理了目前互联网上可以参考的资料，你可以收藏这篇文章。遇到问题别慌，来这里查找答案。</p>\n<p>关于<strong>kotlin-dsl</strong>的开发路线图，请看这篇文章：<a href=\"https://blog.gradle.org/kotlin-scripting-update\" target=\"_blank\" rel=\"noopener\">https://blog.gradle.org/kotlin-scripting-update</a></p>\n<p>如果你在使用过程中，遇到了任何问题，并且确定是 <strong>kotlin-dsl</strong> 的bug，请点这里：<a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">https://github.com/gradle/kotlin-dsl</a> 并推送 <strong>issue</strong></p>\n<p>如果你遇到了知识盲点，并且在Google找不到答案。可以来 <a href=\"https://kotlinlang.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a>#gradle频道反馈，我在 <a href=\"https://kotlinlang.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a> 的昵称是<strong>Scott Smith</strong>，也欢迎你给我发送私信消息。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-995957884721bca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>本篇文章例子完整代码，请点击这里：<a href=\"https://github.com/yuanhoujun/gradle-script-kotlin-example\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/gradle-script-kotlin-example</a></p>\n<p>kts文档正在编写当中，具体进度，请点这里：<a href=\"https://github.com/gradle/kotlin-dsl-docs\" target=\"_blank\" rel=\"noopener\">https://github.com/gradle/kotlin-dsl-docs</a></p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-1ba63891256d9db2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>Android应用开发中，离不开Gradle脚本的构建。大部分Android开发同学忽视了脚本的力量，甚至有很大一部分同学不知道Gradle脚本是什么，用什么语言编写的；当然，也有相当一部分同学知道Gradle脚本是使用Groovy语言编写的，但对于Groovy语言却一窍不通，只是勉强可以看懂Gradle脚本。正所谓，知其然，但并不知其所以然…</p>\n</blockquote>\n<p>换个角度看问题，熟练掌握Gradle脚本还需要精通Groovy语言，这对Android开发同学来说的确是一个不小的挑战。这种Java + Groovy的开发套餐对于普通的Android开发者来说的确存在一定的知识断层，显而易见的是，部分同学写的Gradle脚本简直“不堪入目”。时间回到去年5月份，Google IO大会上宣布了一个重磅消息，Android官方开始支持使用Kotlin语言进行应用开发。其实，在这个时间节点上，我已经在生产环境使用Kotlin开发Android将近一年。对于我来说，这无疑是一个让人欣喜若狂的消息。但，惊喜还远远不止这些，过了一段时间，我又看到了这篇文章 <a href=\"https://blog.gradle.org/kotlin-meets-gradle\" target=\"_blank\" rel=\"noopener\">Kotlin Meets Gradle</a>。很有诗意的标题：当Gradle邂逅Kotlin，文章的核心意思是：<strong>Gradle团队正在尝试使用Kotlin语言作为Gradle脚本的官方开发语言。</strong></p>\n<blockquote>\n<p>我想，也许，Android开发者的春天就要到了！</p>\n</blockquote>\n<h1 id=\"Why-use-Kotlin\"><a href=\"#Why-use-Kotlin\" class=\"headerlink\" title=\"Why use Kotlin ?\"></a>Why use Kotlin ?</h1><p>在写Gradle脚本的时候，最痛苦的莫过于没有任何提示，唯一的调试手段就是使用<strong>print</strong>方法打印调试日志。正如 <a href=\"https://blog.gradle.org/kotlin-meets-gradle\" target=\"_blank\" rel=\"noopener\">Kotlin Meets Gradle</a> 文中所说，当你使用Kotlin语言编写Gradle脚本的时候，你会发现一切都变得有趣起来。突然：</p>\n<ul>\n<li>脚本代码可以自动补全了</li>\n<li>源码之间可以互相跳转了</li>\n<li>插件源码更容易看懂了</li>\n<li>重构（Refactoring）也可以支持了<br>…</li>\n</ul>\n<p>当然，惊喜还不止这些，当你开始决定使用Kotlin语言的时候，仿佛一切都变得美好了起来！</p>\n<h1 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\"></a>Let’s start</h1><p>好了，废话不多说，接下来我们开始尝试用Kotlin语言编写Gradle脚本。由于当前 <a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">kotlin-dsl</a> 正处于预发布状态（<strong>kotlin-dsl</strong>的最新版本是0.14.2，对应Gradle插件版本4.5），IDE的支持也不完善，为了更好的体验该功能，推荐大家使用如下配置：</p>\n<h3 id=\"实验室配置\"><a href=\"#实验室配置\" class=\"headerlink\" title=\"实验室配置\"></a>实验室配置</h3><p><strong>操作系统：</strong>macOS 10.13.2<br><strong>Android Studio：</strong> 3.1 Canary 9<br><strong>Gradle Wrapper：</strong> 4.5<br><strong>Gradle Plugin：</strong> 3.1.0-alpha9<br><strong>Kotlin</strong>：1.2.21</p>\n<h1 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h1><p>首先，按照以往步骤创建一个Android工程：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-58f93d293addaba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接下来，改造开始，Gradle Script Kotlin脚本以<code>.gradle.kts</code>后缀结尾。因此，我们先将工程根目录<code>settings.gradle</code>更名为<code>settings.gradle.kts</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-429cf07b4fcaf7bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这个地方的错误有两个原因：</p>\n<ul>\n<li>Kotlin语言中，单引号只能包裹字符，不能包裹字符串</li>\n<li>Kotlin语言中，方法调用使用括号。仅在使用<code>infix</code>修饰的方法中可以省略括号。这里显然是一个正常调用方法。因此，我们修改为：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;app&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来，修改根目录的<code>build.gradle</code>脚本，用同样的方式修改后缀，方法修改为括号调用，修改后的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        // 这里修改为括号调用即可</span><br><span class=\"line\">        classpath(&quot;com.android.tools.build:gradle:3.0.1&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：在修改后缀名称的时候IDE会出现警告提示，这里可以忽略，选择<strong>continue</strong>即可。</p>\n</blockquote>\n<p>由于我们手动修改了<code>build.gradle</code>脚本，为了保证工程可以使用这个脚本，需要在<code>settings.gradle.kts</code>中添加一行代码，让Gradle知道使用<code>build.gradle.kts</code>脚本构建。因此，最后的<code>settings.gradle.kts</code>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;app&quot;)</span><br><span class=\"line\">rootProject.buildFileName = &quot;build.gradle.kts&quot;</span><br></pre></td></tr></table></figure></p>\n<p>最后一步，修改app模块<code>build.gradle</code>文件，这也是最复杂的一步，修改完后缀名后，你会看到整个脚本全部被红色标识错误：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-fcca2611413c7e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>别慌！还是一样的方式，这里我们先将这里的所有代码注释掉。在最上方逐一对应修改，<code>apply plugin</code>部分修改为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id(&quot;com.android.application&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，修改<code>android {}</code>闭包部分。这里有两个小技巧，由于目前IDE的支持不是很完善，在输入的时候稍微等待一段时间，IDE会给出相应的提示。另外，如果没有提示，例如<code>android {}</code>闭包就没有任何提示，输入完成后展开右侧gradle面板，选择<code>gradle/buid setup/init</code>，双击执行：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4710f3eea9bac093.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在底部面板可以看到任务执行是否成功。注意，即使任务执行成功，脚本依然可能被红色标识，这是IDE支持不完善导致的，可以忽略。</p>\n<p>修改完成后的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion(27)</span><br><span class=\"line\">    buildToolsVersion(&quot;27.0.2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId = &quot;com.youngfeng.kotlindsl&quot;</span><br><span class=\"line\">        minSdkVersion(15)</span><br><span class=\"line\">        targetSdkVersion(27)</span><br><span class=\"line\">        versionCode = 1</span><br><span class=\"line\">        versionName = &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner = &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        getByName(&quot;release&quot;) &#123;</span><br><span class=\"line\">            isMinifyEnabled = true</span><br><span class=\"line\">            proguardFiles(getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：你在使用的过程中，依然可能会遇到无论如何都不生效的问题。这个时候别着急，使用<code>./gradlew assembleDebug</code>命令调试，查看终端找到错误原因。Windows用户去掉<code>./</code>执行即可。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-1e9abe6a47044d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后的依赖部分，同样地，全部修改为括号调用即可。这里就不赘述了，文章的最后部分会提供操作视频，在使用过程中有任何问题可以打开操作视频参考，如果依然不能解决，可以在文章下方给我留言，我会在第一时间给你答复。修改后的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(fileTree(mapOf(&quot;dir&quot; to &quot;libs&quot;, &quot;include&quot; to listOf(&quot;*.jar&quot;))))</span><br><span class=\"line\">    implementation(&quot;com.android.support:appcompat-v7:26.1.0&quot;)</span><br><span class=\"line\">    implementation(&quot;com.android.support.constraint:constraint-layout:1.0.2&quot;)</span><br><span class=\"line\">    testImplementation(&quot;junit:junit:4.12&quot;)</span><br><span class=\"line\">    androidTestImplementation(&quot;com.android.support.test:runner:1.0.1&quot;)</span><br><span class=\"line\">    androidTestImplementation(&quot;com.android.support.test.espresso:espresso-core:3.0.1&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的步骤，从Groovy转换到Kotlin的步骤已经全部完成，你可以在终端输入<code>./gradlew assembleDebug</code>测试是否可以正常构建了：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2ec3894242b02f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"统一依赖管理\"><a href=\"#统一依赖管理\" class=\"headerlink\" title=\"统一依赖管理\"></a>统一依赖管理</h1><p>上面的步骤虽然完成了脚本的转换，但依赖的管理依然是混乱的，为了实现类似<br> <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Snake</a> 工程的统一依赖管理，我们还需要做一些工作。</p>\n<p>Gradle官方提供了使用 <a href=\"https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_sources\" target=\"_blank\" rel=\"noopener\">buildSrc</a> 目录实现自定义任务和插件逻辑，这里我们可以使用它完成依赖的统一处理，一个完整的buildSrc目录结构如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-a000e0ab037ab1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>Deps类中，可以这样定义依赖结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object deps &#123;</span><br><span class=\"line\">    object plugin &#123;</span><br><span class=\"line\">        val gradle = &quot;com.android.tools.build:gradle:3.1.0-alpha09&quot;</span><br><span class=\"line\">        val kotlin = &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.21&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    object kotlin &#123;</span><br><span class=\"line\">        val stdlibJre7 = &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.21&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    object android &#123;</span><br><span class=\"line\">        object support &#123;</span><br><span class=\"line\">            val compat = &quot;com.android.support:appcompat-v7:27.0.2&quot;</span><br><span class=\"line\">            val constraintLayout = &quot;com.android.support.constraint:constraint-layout:1.0.2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        object test &#123;</span><br><span class=\"line\">            val junit = &quot;junit:junit:4.12&quot;</span><br><span class=\"line\">            val runner = &quot;com.android.support.test:runner:1.0.1&quot;</span><br><span class=\"line\">            val espressoCore = &quot;com.android.support.test.espresso:espresso-core:3.0.1&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义之后，我们就可以在脚本中直接引用了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(fileTree(mapOf(&quot;dir&quot; to &quot;libs&quot;, &quot;include&quot; to listOf(&quot;*.jar&quot;))))</span><br><span class=\"line\">    implementation(deps.kotlin.stdlibJre7)</span><br><span class=\"line\">    implementation(deps.android.support.compat)</span><br><span class=\"line\">    implementation(deps.android.support.constraintLayout)</span><br><span class=\"line\">    testImplementation(deps.android.test.junit)</span><br><span class=\"line\">    androidTestImplementation(deps.android.test.runner)</span><br><span class=\"line\">    androidTestImplementation(deps.android.test.espressoCore)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是漂亮了许多？</p>\n<p>至此，整个转换过程就顺利完成了，为了保证转换的成功率，我推荐使用文章开头的实验室配置。如果版本过低，不保证可以转换成功。最新版本的<strong>kotlin-dsl</strong>会跟随最新版本的Gradle插件发布，因此一定要使用最新版本。另外，目前IDE对kts的支持依然不完善，即使正确的写法也会报错，这个一定要注意，不要被IDE欺骗了。</p>\n<h3 id=\"更详细的操作，请看视频教程\"><a href=\"#更详细的操作，请看视频教程\" class=\"headerlink\" title=\"更详细的操作，请看视频教程\"></a>更详细的操作，请看视频教程</h3><p>腾讯视频：<a href=\"https://v.qq.com/x/page/x0539lvfmm2.html\" target=\"_blank\" rel=\"noopener\">用Kotlin写Android Gradle脚本</a></p>\n<h4 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h4><p>虽然使用Kotlin语言写脚本是一件非常美妙的事情，但目前依然存在一些问题：</p>\n<ul>\n<li>IDE支持不完善</li>\n<li><a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">kotlin-dsl</a> 正在快速开发中，语法变动较大</li>\n<li>缺少官方文档</li>\n<li>互联网上缺少相关资料，遇到问题很难追踪</li>\n</ul>\n<p>因此，目前我并不推荐你在生产环境中使用，但可以作为日常学习练手之用。预计1.0版本的发布在今年6月份左右，正式版本发布后，我推荐你立即将Gradle脚本转换到Kotlin语言。</p>\n<h4 id=\"遇到问题，看这里-gt\"><a href=\"#遇到问题，看这里-gt\" class=\"headerlink\" title=\"遇到问题，看这里 ==&gt;\"></a>遇到问题，看这里 ==&gt;</h4><p>在使用的过程中，按照文章同样的步骤，你依然可能会遇到很多问题。因此，我为你整理了目前互联网上可以参考的资料，你可以收藏这篇文章。遇到问题别慌，来这里查找答案。</p>\n<p>关于<strong>kotlin-dsl</strong>的开发路线图，请看这篇文章：<a href=\"https://blog.gradle.org/kotlin-scripting-update\" target=\"_blank\" rel=\"noopener\">https://blog.gradle.org/kotlin-scripting-update</a></p>\n<p>如果你在使用过程中，遇到了任何问题，并且确定是 <strong>kotlin-dsl</strong> 的bug，请点这里：<a href=\"https://github.com/gradle/kotlin-dsl\" target=\"_blank\" rel=\"noopener\">https://github.com/gradle/kotlin-dsl</a> 并推送 <strong>issue</strong></p>\n<p>如果你遇到了知识盲点，并且在Google找不到答案。可以来 <a href=\"https://kotlinlang.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a>#gradle频道反馈，我在 <a href=\"https://kotlinlang.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a> 的昵称是<strong>Scott Smith</strong>，也欢迎你给我发送私信消息。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-995957884721bca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>本篇文章例子完整代码，请点击这里：<a href=\"https://github.com/yuanhoujun/gradle-script-kotlin-example\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/gradle-script-kotlin-example</a></p>\n<p>kts文档正在编写当中，具体进度，请点这里：<a href=\"https://github.com/gradle/kotlin-dsl-docs\" target=\"_blank\" rel=\"noopener\">https://github.com/gradle/kotlin-dsl-docs</a></p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>如果你也喜欢Kotlin语言，欢迎加入我的Kotlin交流群： 329673958 ，一起来参与Kotlin语言的推广工作。</p>\n"},{"title":"那些年，我们看不懂的那些Kotlin标准函数","date":"2018-04-27T07:21:00.000Z","comments":1,"_content":"\n\n> Kotlin标准库中提供了一套用于常用操作的函数。最近，在我的Kotlin交流群中有人再次问到了关于这些函数的用法。今天，让我们花一点时间，一起看一下这些函数的用法。\n\n# Ready go >>>\n**注：这里所说的标准函数主要来自于标准库中在文件Standard.kt中的所有函数。**\n\n### run#1\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\ncontract部分主要用于编译器上下文推断，这里我们忽略掉这部分代码。\n\n观察源码发现，run方法仅仅是执行传入的block表达式并返回执行结果而已（block是一个lambda表达式）。\n\n**因此，如果你仅仅需要执行一个代码块，可以使用该函数**\n\n看一个例子：\n\n```\nval x = run {\n           println(\"Hello, world\")\n           return@run 1\n        }\nprintln(x)\n\n// 执行结果\nHello，world\n1\n```\n\n### run#2\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n这个函数跟上面的函数功能是完全一样的。不同的是，block的receiver是当前调用对象，即在block中可以使用当前对象的上下文。\n\n**因此，如果你需要在执行的lambda表达式中使用当前对象的上下文的话，可以使用该函数。除此之外，两者没有任何差别**\n\n看一个例子：\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n}\n\nclass B {\n\n}\n\nfun main(args: Array<String>) {\n    val a = A()\n    val b = a.run {\n        // 这里你可以使用A的上下文\n        a.sayHi(\"Scott Smith\")\n        return@run B()\n    }\n    println(b)\n}\n\n// 执行结果\nHello，Scott Smith\nb@2314\n```\n\n从例子中，我们可以看到，这个函数还可以用于对数据类型进行转换。\n\n### with \n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n这个函数其实和run函数也是做了一样的事情。不同的是，这里可以指定block的接收者。\n\n**因此，如果你在执行lambda表达式的时候，希望指定不同的接收者的话，可以使用该方法**\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n}\n\n\nfun main(args: Array<String>) {\n    val a = A()\n    with(a) {\n        // 这里的接收者是对象a，因此可以调用a实例的所有方法\n        sayHi(\"Scott Smith\")\n    }\n}\n\n```\n\n### apply\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n可以看到，这个方法是针对泛型参数的扩展方法，即所有对象都将拥有该扩展方法。相对于run#2方法，apply不仅执行了block，同时还返回了receiver本身。\n\n**这在链式编程中很常用，如果你希望执行lambda表达式的同时而不破坏链式编程，可以使用该方法**\n\n看一个例子：\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n    \n    fun other() {\n        println(\"Other function...\")\n    }\n}\n\n\nfun main(args: Array<String>) {\n    val a = A()\n    a.apply { \n        println(\"This is a block\")\n        sayHi(\"Scott Smith\")\n    }.other()\n}\n\n// 执行结果\nThis is a block\nHello, Scott Smith\nOther function...\n```\n\n### also\n\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n这个函数跟with又很像，不同的是，block带有一个当前receiver类型的参数。在block中，你可以使用该参数对当前实例进行操作。\n\n**这个函数和with完全可以互相通用，with函数可以直接在当前实例上下文中对其进行操作，而also函数要通过block参数获取当前类实例。因为用法完全一致，这里就不举例了**\n\n### let\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n如果你使用过RxJava，可能会感到似曾相识，这其实就是RxJava的map函数。这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展函数。\n\n**如果你希望对当前数据类型进行一定的转换，可以使用该方法。该方法的block中同样可以使用当前receiver的上下文**\n\n看一个例子：\n\n```\nclass Triangle {}\n\nclass Rectangle {}\n\nfun main(args: Array<String>) {\n    val tr = Triangle()\n    val rect = tr.let { it ->\n        println(\"It is $it\")\n        return@let Rectangle()\n    }\n    println(rect)\n}\n\n// 执行结果\nIt is Triangle@78308db1\nRectangle@27c170f0\n```\n\n从例子中可以看到，我们成功地将三角形转换成了矩形，这就是let函数的作用。\n\n### takeIf\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n```\n\n这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展。这个函数使用了一个预言函数作为参数，主要用于判断当前对象是否符合条件。\n这个条件函数由你指定。如果条件符合，将返回当前对象。否则返回空值。\n\n**因此，如果你希望筛选集合中某个数据是否符合要求，可以使用这个函数**\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    val arr = listOf(1, 2, 3)\n    arr.forEach {\n        println(\"$it % 2 == 0 => ${it.takeIf { it % 2 == 0 }}\")\n    }\n}\n\n// 执行结果\n1 % 2 == 0 => null\n2 % 2 == 0 => 2\n3 % 2 == 0 => null\n```\n\n### takeUnless\n\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n```\n\n这个函数刚好与takeIf筛选逻辑恰好相反。即：如果符合条件返回null，不符合条件返回对象本身。\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    val arr = listOf(1, 2, 3)\n    arr.forEach {\n        println(\"$it % 2 == 0 => ${it.takeUnless { it % 2 == 0 }}\")\n    }\n}\n\n// 执行结果\n1 % 2 == 0 => 1\n2 % 2 == 0 => null\n3 % 2 == 0 => 3\n```\n\n看到了吗？这里的执行结果和takeIf恰好相反。\n\n### repeat\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n```\n\n这个函数意思很明显，就是将一个动作重复指定的次数。动作对应一个lambda表达式，表达式中持有一个参数表示当前正在执行的次数索引。\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    repeat(3) {\n        println(\"Just repeat, index: $it\")\n    }\n}\n\nJust repeat, index: 0\nJust repeat, index: 1\nJust repeat, index: 2\n```\n\n# 简单总结\n最后，我们用一个表格简单总结一下这些函数的用法：\n函数|用途|特点|形式\n:---:|:---:|:---:|:---:\nrun#1|执行block，并返回执行结果|block中无法获取接收者上下文|全局函数\nrun#2|执行block，并返回执行结果|block中可以获取接收者上下文|扩展函数\nwith|指定接收者，通过接收者执行block|block中可以获取接收者的上下文，可以对接收者数据类型做一定转换|全局函数\napply|执行block，并返回接收者实例本身|block中可以获取接收者的上下文，可用于链式编程|扩展\nalso|执行block，并返回接收者实例本身|block中有一个参数代表接收者实例，可用于链式编程|扩展\nlet|执行block，并返回执行结果|block中有一个参数代表接收者实例，可以对接收者数据类型做一定转换|扩展\ntakeIf|根据条件predicate判断当前实例是否符合要求|如果符合要求，返回当前实例本身；否则返回null|扩展函数\ntakeUnless|根据条件predicate判断当前实例是否不符合要求|如果不符合要求，返回当前实例本身；否则返回null|扩展\n\n# 搞定Receiver\n理解上面这几个函数，最重要的一点是要理解Receiver。遗憾的是，Kotlin官方文档中并没有针对Receiver的详细讲解。关于这部分的讲解，请扫描下方二维码关注**欧阳锋工作室**，回复**搞定Receiver**查看文章。\n\n# 欢迎加入Kotlin交流群\n关于Kotlin，如果你有任何问题，欢迎加入我的Kotlin交流群： 329673958。当前群交流活跃，问题解答速度很快，期待你的加入。","source":"_posts/kotlin/那些年，我们看不懂的那些Kotlin标准函数.md","raw":"title: 那些年，我们看不懂的那些Kotlin标准函数\ndate: 2018/04/27 15:21\ncomments: true\ntags:\n- Kotlin\n- 编程语言\ncategories:\n- Kotlin\n- 基础知识\n---\n\n\n> Kotlin标准库中提供了一套用于常用操作的函数。最近，在我的Kotlin交流群中有人再次问到了关于这些函数的用法。今天，让我们花一点时间，一起看一下这些函数的用法。\n\n# Ready go >>>\n**注：这里所说的标准函数主要来自于标准库中在文件Standard.kt中的所有函数。**\n\n### run#1\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\ncontract部分主要用于编译器上下文推断，这里我们忽略掉这部分代码。\n\n观察源码发现，run方法仅仅是执行传入的block表达式并返回执行结果而已（block是一个lambda表达式）。\n\n**因此，如果你仅仅需要执行一个代码块，可以使用该函数**\n\n看一个例子：\n\n```\nval x = run {\n           println(\"Hello, world\")\n           return@run 1\n        }\nprintln(x)\n\n// 执行结果\nHello，world\n1\n```\n\n### run#2\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n```\n\n这个函数跟上面的函数功能是完全一样的。不同的是，block的receiver是当前调用对象，即在block中可以使用当前对象的上下文。\n\n**因此，如果你需要在执行的lambda表达式中使用当前对象的上下文的话，可以使用该函数。除此之外，两者没有任何差别**\n\n看一个例子：\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n}\n\nclass B {\n\n}\n\nfun main(args: Array<String>) {\n    val a = A()\n    val b = a.run {\n        // 这里你可以使用A的上下文\n        a.sayHi(\"Scott Smith\")\n        return@run B()\n    }\n    println(b)\n}\n\n// 执行结果\nHello，Scott Smith\nb@2314\n```\n\n从例子中，我们可以看到，这个函数还可以用于对数据类型进行转换。\n\n### with \n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n```\n\n这个函数其实和run函数也是做了一样的事情。不同的是，这里可以指定block的接收者。\n\n**因此，如果你在执行lambda表达式的时候，希望指定不同的接收者的话，可以使用该方法**\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n}\n\n\nfun main(args: Array<String>) {\n    val a = A()\n    with(a) {\n        // 这里的接收者是对象a，因此可以调用a实例的所有方法\n        sayHi(\"Scott Smith\")\n    }\n}\n\n```\n\n### apply\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n```\n\n可以看到，这个方法是针对泛型参数的扩展方法，即所有对象都将拥有该扩展方法。相对于run#2方法，apply不仅执行了block，同时还返回了receiver本身。\n\n**这在链式编程中很常用，如果你希望执行lambda表达式的同时而不破坏链式编程，可以使用该方法**\n\n看一个例子：\n\n```\nclass A {\n    fun sayHi(name: String) {\n        println(\"Hello, $name\")\n    }\n    \n    fun other() {\n        println(\"Other function...\")\n    }\n}\n\n\nfun main(args: Array<String>) {\n    val a = A()\n    a.apply { \n        println(\"This is a block\")\n        sayHi(\"Scott Smith\")\n    }.other()\n}\n\n// 执行结果\nThis is a block\nHello, Scott Smith\nOther function...\n```\n\n### also\n\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n```\n\n这个函数跟with又很像，不同的是，block带有一个当前receiver类型的参数。在block中，你可以使用该参数对当前实例进行操作。\n\n**这个函数和with完全可以互相通用，with函数可以直接在当前实例上下文中对其进行操作，而also函数要通过block参数获取当前类实例。因为用法完全一致，这里就不举例了**\n\n### let\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n```\n\n如果你使用过RxJava，可能会感到似曾相识，这其实就是RxJava的map函数。这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展函数。\n\n**如果你希望对当前数据类型进行一定的转换，可以使用该方法。该方法的block中同样可以使用当前receiver的上下文**\n\n看一个例子：\n\n```\nclass Triangle {}\n\nclass Rectangle {}\n\nfun main(args: Array<String>) {\n    val tr = Triangle()\n    val rect = tr.let { it ->\n        println(\"It is $it\")\n        return@let Rectangle()\n    }\n    println(rect)\n}\n\n// 执行结果\nIt is Triangle@78308db1\nRectangle@27c170f0\n```\n\n从例子中可以看到，我们成功地将三角形转换成了矩形，这就是let函数的作用。\n\n### takeIf\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n```\n\n这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展。这个函数使用了一个预言函数作为参数，主要用于判断当前对象是否符合条件。\n这个条件函数由你指定。如果条件符合，将返回当前对象。否则返回空值。\n\n**因此，如果你希望筛选集合中某个数据是否符合要求，可以使用这个函数**\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    val arr = listOf(1, 2, 3)\n    arr.forEach {\n        println(\"$it % 2 == 0 => ${it.takeIf { it % 2 == 0 }}\")\n    }\n}\n\n// 执行结果\n1 % 2 == 0 => null\n2 % 2 == 0 => 2\n3 % 2 == 0 => null\n```\n\n### takeUnless\n\n```\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n```\n\n这个函数刚好与takeIf筛选逻辑恰好相反。即：如果符合条件返回null，不符合条件返回对象本身。\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    val arr = listOf(1, 2, 3)\n    arr.forEach {\n        println(\"$it % 2 == 0 => ${it.takeUnless { it % 2 == 0 }}\")\n    }\n}\n\n// 执行结果\n1 % 2 == 0 => 1\n2 % 2 == 0 => null\n3 % 2 == 0 => 3\n```\n\n看到了吗？这里的执行结果和takeIf恰好相反。\n\n### repeat\n\n```\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n```\n\n这个函数意思很明显，就是将一个动作重复指定的次数。动作对应一个lambda表达式，表达式中持有一个参数表示当前正在执行的次数索引。\n\n看一个例子：\n\n```\nfun main(args: Array<String>) {\n    repeat(3) {\n        println(\"Just repeat, index: $it\")\n    }\n}\n\nJust repeat, index: 0\nJust repeat, index: 1\nJust repeat, index: 2\n```\n\n# 简单总结\n最后，我们用一个表格简单总结一下这些函数的用法：\n函数|用途|特点|形式\n:---:|:---:|:---:|:---:\nrun#1|执行block，并返回执行结果|block中无法获取接收者上下文|全局函数\nrun#2|执行block，并返回执行结果|block中可以获取接收者上下文|扩展函数\nwith|指定接收者，通过接收者执行block|block中可以获取接收者的上下文，可以对接收者数据类型做一定转换|全局函数\napply|执行block，并返回接收者实例本身|block中可以获取接收者的上下文，可用于链式编程|扩展\nalso|执行block，并返回接收者实例本身|block中有一个参数代表接收者实例，可用于链式编程|扩展\nlet|执行block，并返回执行结果|block中有一个参数代表接收者实例，可以对接收者数据类型做一定转换|扩展\ntakeIf|根据条件predicate判断当前实例是否符合要求|如果符合要求，返回当前实例本身；否则返回null|扩展函数\ntakeUnless|根据条件predicate判断当前实例是否不符合要求|如果不符合要求，返回当前实例本身；否则返回null|扩展\n\n# 搞定Receiver\n理解上面这几个函数，最重要的一点是要理解Receiver。遗憾的是，Kotlin官方文档中并没有针对Receiver的详细讲解。关于这部分的讲解，请扫描下方二维码关注**欧阳锋工作室**，回复**搞定Receiver**查看文章。\n\n# 欢迎加入Kotlin交流群\n关于Kotlin，如果你有任何问题，欢迎加入我的Kotlin交流群： 329673958。当前群交流活跃，问题解答速度很快，期待你的加入。","slug":"kotlin/那些年，我们看不懂的那些Kotlin标准函数","published":1,"updated":"2019-04-28T12:39:23.527Z","_id":"cjv0x7uj6004xbkb423rgj9ud","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Kotlin标准库中提供了一套用于常用操作的函数。最近，在我的Kotlin交流群中有人再次问到了关于这些函数的用法。今天，让我们花一点时间，一起看一下这些函数的用法。</p>\n</blockquote>\n<h1 id=\"Ready-go-gt-gt-gt\"><a href=\"#Ready-go-gt-gt-gt\" class=\"headerlink\" title=\"Ready go &gt;&gt;&gt;\"></a>Ready go &gt;&gt;&gt;</h1><p><strong>注：这里所说的标准函数主要来自于标准库中在文件Standard.kt中的所有函数。</strong></p>\n<h3 id=\"run-1\"><a href=\"#run-1\" class=\"headerlink\" title=\"run#1\"></a>run#1</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>contract部分主要用于编译器上下文推断，这里我们忽略掉这部分代码。</p>\n<p>观察源码发现，run方法仅仅是执行传入的block表达式并返回执行结果而已（block是一个lambda表达式）。</p>\n<p><strong>因此，如果你仅仅需要执行一个代码块，可以使用该函数</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val x = run &#123;</span><br><span class=\"line\">           println(&quot;Hello, world&quot;)</span><br><span class=\"line\">           return@run 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">Hello，world</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-2\"><a href=\"#run-2\" class=\"headerlink\" title=\"run#2\"></a>run#2</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数跟上面的函数功能是完全一样的。不同的是，block的receiver是当前调用对象，即在block中可以使用当前对象的上下文。</p>\n<p><strong>因此，如果你需要在执行的lambda表达式中使用当前对象的上下文的话，可以使用该函数。除此之外，两者没有任何差别</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    val b = a.run &#123;</span><br><span class=\"line\">        // 这里你可以使用A的上下文</span><br><span class=\"line\">        a.sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">        return@run B()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">Hello，Scott Smith</span><br><span class=\"line\">b@2314</span><br></pre></td></tr></table></figure>\n<p>从例子中，我们可以看到，这个函数还可以用于对数据类型进行转换。</p>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数其实和run函数也是做了一样的事情。不同的是，这里可以指定block的接收者。</p>\n<p><strong>因此，如果你在执行lambda表达式的时候，希望指定不同的接收者的话，可以使用该方法</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    with(a) &#123;</span><br><span class=\"line\">        // 这里的接收者是对象a，因此可以调用a实例的所有方法</span><br><span class=\"line\">        sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这个方法是针对泛型参数的扩展方法，即所有对象都将拥有该扩展方法。相对于run#2方法，apply不仅执行了block，同时还返回了receiver本身。</p>\n<p><strong>这在链式编程中很常用，如果你希望执行lambda表达式的同时而不破坏链式编程，可以使用该方法</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun other() &#123;</span><br><span class=\"line\">        println(&quot;Other function...&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    a.apply &#123; </span><br><span class=\"line\">        println(&quot;This is a block&quot;)</span><br><span class=\"line\">        sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">    &#125;.other()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">This is a block</span><br><span class=\"line\">Hello, Scott Smith</span><br><span class=\"line\">Other function...</span><br></pre></td></tr></table></figure>\n<h3 id=\"also\"><a href=\"#also\" class=\"headerlink\" title=\"also\"></a>also</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(this)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数跟with又很像，不同的是，block带有一个当前receiver类型的参数。在block中，你可以使用该参数对当前实例进行操作。</p>\n<p><strong>这个函数和with完全可以互相通用，with函数可以直接在当前实例上下文中对其进行操作，而also函数要通过block参数获取当前类实例。因为用法完全一致，这里就不举例了</strong></p>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block(this)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你使用过RxJava，可能会感到似曾相识，这其实就是RxJava的map函数。这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展函数。</p>\n<p><strong>如果你希望对当前数据类型进行一定的转换，可以使用该方法。该方法的block中同样可以使用当前receiver的上下文</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Triangle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Rectangle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val tr = Triangle()</span><br><span class=\"line\">    val rect = tr.let &#123; it -&gt;</span><br><span class=\"line\">        println(&quot;It is $it&quot;)</span><br><span class=\"line\">        return@let Rectangle()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(rect)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">It is Triangle@78308db1</span><br><span class=\"line\">Rectangle@27c170f0</span><br></pre></td></tr></table></figure>\n<p>从例子中可以看到，我们成功地将三角形转换成了矩形，这就是let函数的作用。</p>\n<h3 id=\"takeIf\"><a href=\"#takeIf\" class=\"headerlink\" title=\"takeIf\"></a>takeIf</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.takeIf(predicate: (T) -&gt; Boolean): T? &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return if (predicate(this)) this else null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展。这个函数使用了一个预言函数作为参数，主要用于判断当前对象是否符合条件。<br>这个条件函数由你指定。如果条件符合，将返回当前对象。否则返回空值。</p>\n<p><strong>因此，如果你希望筛选集合中某个数据是否符合要求，可以使用这个函数</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val arr = listOf(1, 2, 3)</span><br><span class=\"line\">    arr.forEach &#123;</span><br><span class=\"line\">        println(&quot;$it % 2 == 0 =&gt; $&#123;it.takeIf &#123; it % 2 == 0 &#125;&#125;&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">1 % 2 == 0 =&gt; null</span><br><span class=\"line\">2 % 2 == 0 =&gt; 2</span><br><span class=\"line\">3 % 2 == 0 =&gt; null</span><br></pre></td></tr></table></figure>\n<h3 id=\"takeUnless\"><a href=\"#takeUnless\" class=\"headerlink\" title=\"takeUnless\"></a>takeUnless</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.takeUnless(predicate: (T) -&gt; Boolean): T? &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return if (!predicate(this)) this else null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数刚好与takeIf筛选逻辑恰好相反。即：如果符合条件返回null，不符合条件返回对象本身。</p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val arr = listOf(1, 2, 3)</span><br><span class=\"line\">    arr.forEach &#123;</span><br><span class=\"line\">        println(&quot;$it % 2 == 0 =&gt; $&#123;it.takeUnless &#123; it % 2 == 0 &#125;&#125;&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">1 % 2 == 0 =&gt; 1</span><br><span class=\"line\">2 % 2 == 0 =&gt; null</span><br><span class=\"line\">3 % 2 == 0 =&gt; 3</span><br></pre></td></tr></table></figure>\n<p>看到了吗？这里的执行结果和takeIf恰好相反。</p>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun repeat(times: Int, action: (Int) -&gt; Unit) &#123;</span><br><span class=\"line\">    contract &#123; callsInPlace(action) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (index in 0 until times) &#123;</span><br><span class=\"line\">        action(index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数意思很明显，就是将一个动作重复指定的次数。动作对应一个lambda表达式，表达式中持有一个参数表示当前正在执行的次数索引。</p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    repeat(3) &#123;</span><br><span class=\"line\">        println(&quot;Just repeat, index: $it&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Just repeat, index: 0</span><br><span class=\"line\">Just repeat, index: 1</span><br><span class=\"line\">Just repeat, index: 2</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h1><p>最后，我们用一个表格简单总结一下这些函数的用法：<br>函数|用途|特点|形式<br>:—:|:—:|:—:|:—:<br>run#1|执行block，并返回执行结果|block中无法获取接收者上下文|全局函数<br>run#2|执行block，并返回执行结果|block中可以获取接收者上下文|扩展函数<br>with|指定接收者，通过接收者执行block|block中可以获取接收者的上下文，可以对接收者数据类型做一定转换|全局函数<br>apply|执行block，并返回接收者实例本身|block中可以获取接收者的上下文，可用于链式编程|扩展<br>also|执行block，并返回接收者实例本身|block中有一个参数代表接收者实例，可用于链式编程|扩展<br>let|执行block，并返回执行结果|block中有一个参数代表接收者实例，可以对接收者数据类型做一定转换|扩展<br>takeIf|根据条件predicate判断当前实例是否符合要求|如果符合要求，返回当前实例本身；否则返回null|扩展函数<br>takeUnless|根据条件predicate判断当前实例是否不符合要求|如果不符合要求，返回当前实例本身；否则返回null|扩展</p>\n<h1 id=\"搞定Receiver\"><a href=\"#搞定Receiver\" class=\"headerlink\" title=\"搞定Receiver\"></a>搞定Receiver</h1><p>理解上面这几个函数，最重要的一点是要理解Receiver。遗憾的是，Kotlin官方文档中并没有针对Receiver的详细讲解。关于这部分的讲解，请扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复<strong>搞定Receiver</strong>查看文章。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>关于Kotlin，如果你有任何问题，欢迎加入我的Kotlin交流群： 329673958。当前群交流活跃，问题解答速度很快，期待你的加入。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Kotlin标准库中提供了一套用于常用操作的函数。最近，在我的Kotlin交流群中有人再次问到了关于这些函数的用法。今天，让我们花一点时间，一起看一下这些函数的用法。</p>\n</blockquote>\n<h1 id=\"Ready-go-gt-gt-gt\"><a href=\"#Ready-go-gt-gt-gt\" class=\"headerlink\" title=\"Ready go &gt;&gt;&gt;\"></a>Ready go &gt;&gt;&gt;</h1><p><strong>注：这里所说的标准函数主要来自于标准库中在文件Standard.kt中的所有函数。</strong></p>\n<h3 id=\"run-1\"><a href=\"#run-1\" class=\"headerlink\" title=\"run#1\"></a>run#1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;R&gt; run(block: () -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>contract部分主要用于编译器上下文推断，这里我们忽略掉这部分代码。</p>\n<p>观察源码发现，run方法仅仅是执行传入的block表达式并返回执行结果而已（block是一个lambda表达式）。</p>\n<p><strong>因此，如果你仅仅需要执行一个代码块，可以使用该函数</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val x = run &#123;</span><br><span class=\"line\">           println(&quot;Hello, world&quot;)</span><br><span class=\"line\">           return@run 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">Hello，world</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-2\"><a href=\"#run-2\" class=\"headerlink\" title=\"run#2\"></a>run#2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数跟上面的函数功能是完全一样的。不同的是，block的receiver是当前调用对象，即在block中可以使用当前对象的上下文。</p>\n<p><strong>因此，如果你需要在执行的lambda表达式中使用当前对象的上下文的话，可以使用该函数。除此之外，两者没有任何差别</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    val b = a.run &#123;</span><br><span class=\"line\">        // 这里你可以使用A的上下文</span><br><span class=\"line\">        a.sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">        return@run B()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">Hello，Scott Smith</span><br><span class=\"line\">b@2314</span><br></pre></td></tr></table></figure>\n<p>从例子中，我们可以看到，这个函数还可以用于对数据类型进行转换。</p>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return receiver.block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数其实和run函数也是做了一样的事情。不同的是，这里可以指定block的接收者。</p>\n<p><strong>因此，如果你在执行lambda表达式的时候，希望指定不同的接收者的话，可以使用该方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    with(a) &#123;</span><br><span class=\"line\">        // 这里的接收者是对象a，因此可以调用a实例的所有方法</span><br><span class=\"line\">        sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这个方法是针对泛型参数的扩展方法，即所有对象都将拥有该扩展方法。相对于run#2方法，apply不仅执行了block，同时还返回了receiver本身。</p>\n<p><strong>这在链式编程中很常用，如果你希望执行lambda表达式的同时而不破坏链式编程，可以使用该方法</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    fun sayHi(name: String) &#123;</span><br><span class=\"line\">        println(&quot;Hello, $name&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun other() &#123;</span><br><span class=\"line\">        println(&quot;Other function...&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val a = A()</span><br><span class=\"line\">    a.apply &#123; </span><br><span class=\"line\">        println(&quot;This is a block&quot;)</span><br><span class=\"line\">        sayHi(&quot;Scott Smith&quot;)</span><br><span class=\"line\">    &#125;.other()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">This is a block</span><br><span class=\"line\">Hello, Scott Smith</span><br><span class=\"line\">Other function...</span><br></pre></td></tr></table></figure>\n<h3 id=\"also\"><a href=\"#also\" class=\"headerlink\" title=\"also\"></a>also</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block(this)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数跟with又很像，不同的是，block带有一个当前receiver类型的参数。在block中，你可以使用该参数对当前实例进行操作。</p>\n<p><strong>这个函数和with完全可以互相通用，with函数可以直接在当前实例上下文中对其进行操作，而also函数要通过block参数获取当前类实例。因为用法完全一致，这里就不举例了</strong></p>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return block(this)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你使用过RxJava，可能会感到似曾相识，这其实就是RxJava的map函数。这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展函数。</p>\n<p><strong>如果你希望对当前数据类型进行一定的转换，可以使用该方法。该方法的block中同样可以使用当前receiver的上下文</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Triangle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Rectangle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val tr = Triangle()</span><br><span class=\"line\">    val rect = tr.let &#123; it -&gt;</span><br><span class=\"line\">        println(&quot;It is $it&quot;)</span><br><span class=\"line\">        return@let Rectangle()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(rect)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">It is Triangle@78308db1</span><br><span class=\"line\">Rectangle@27c170f0</span><br></pre></td></tr></table></figure>\n<p>从例子中可以看到，我们成功地将三角形转换成了矩形，这就是let函数的作用。</p>\n<h3 id=\"takeIf\"><a href=\"#takeIf\" class=\"headerlink\" title=\"takeIf\"></a>takeIf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.takeIf(predicate: (T) -&gt; Boolean): T? &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return if (predicate(this)) this else null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数也是针对泛型参数的扩展函数，所有类都将拥有这个扩展。这个函数使用了一个预言函数作为参数，主要用于判断当前对象是否符合条件。<br>这个条件函数由你指定。如果条件符合，将返回当前对象。否则返回空值。</p>\n<p><strong>因此，如果你希望筛选集合中某个数据是否符合要求，可以使用这个函数</strong></p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val arr = listOf(1, 2, 3)</span><br><span class=\"line\">    arr.forEach &#123;</span><br><span class=\"line\">        println(&quot;$it % 2 == 0 =&gt; $&#123;it.takeIf &#123; it % 2 == 0 &#125;&#125;&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">1 % 2 == 0 =&gt; null</span><br><span class=\"line\">2 % 2 == 0 =&gt; 2</span><br><span class=\"line\">3 % 2 == 0 =&gt; null</span><br></pre></td></tr></table></figure>\n<h3 id=\"takeUnless\"><a href=\"#takeUnless\" class=\"headerlink\" title=\"takeUnless\"></a>takeUnless</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">@SinceKotlin(&quot;1.1&quot;)</span><br><span class=\"line\">public inline fun &lt;T&gt; T.takeUnless(predicate: (T) -&gt; Boolean): T? &#123;</span><br><span class=\"line\">    contract &#123;</span><br><span class=\"line\">        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return if (!predicate(this)) this else null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数刚好与takeIf筛选逻辑恰好相反。即：如果符合条件返回null，不符合条件返回对象本身。</p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val arr = listOf(1, 2, 3)</span><br><span class=\"line\">    arr.forEach &#123;</span><br><span class=\"line\">        println(&quot;$it % 2 == 0 =&gt; $&#123;it.takeUnless &#123; it % 2 == 0 &#125;&#125;&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行结果</span><br><span class=\"line\">1 % 2 == 0 =&gt; 1</span><br><span class=\"line\">2 % 2 == 0 =&gt; null</span><br><span class=\"line\">3 % 2 == 0 =&gt; 3</span><br></pre></td></tr></table></figure>\n<p>看到了吗？这里的执行结果和takeIf恰好相反。</p>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@kotlin.internal.InlineOnly</span><br><span class=\"line\">public inline fun repeat(times: Int, action: (Int) -&gt; Unit) &#123;</span><br><span class=\"line\">    contract &#123; callsInPlace(action) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (index in 0 until times) &#123;</span><br><span class=\"line\">        action(index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数意思很明显，就是将一个动作重复指定的次数。动作对应一个lambda表达式，表达式中持有一个参数表示当前正在执行的次数索引。</p>\n<p>看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    repeat(3) &#123;</span><br><span class=\"line\">        println(&quot;Just repeat, index: $it&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Just repeat, index: 0</span><br><span class=\"line\">Just repeat, index: 1</span><br><span class=\"line\">Just repeat, index: 2</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h1><p>最后，我们用一个表格简单总结一下这些函数的用法：<br>函数|用途|特点|形式<br>:—:|:—:|:—:|:—:<br>run#1|执行block，并返回执行结果|block中无法获取接收者上下文|全局函数<br>run#2|执行block，并返回执行结果|block中可以获取接收者上下文|扩展函数<br>with|指定接收者，通过接收者执行block|block中可以获取接收者的上下文，可以对接收者数据类型做一定转换|全局函数<br>apply|执行block，并返回接收者实例本身|block中可以获取接收者的上下文，可用于链式编程|扩展<br>also|执行block，并返回接收者实例本身|block中有一个参数代表接收者实例，可用于链式编程|扩展<br>let|执行block，并返回执行结果|block中有一个参数代表接收者实例，可以对接收者数据类型做一定转换|扩展<br>takeIf|根据条件predicate判断当前实例是否符合要求|如果符合要求，返回当前实例本身；否则返回null|扩展函数<br>takeUnless|根据条件predicate判断当前实例是否不符合要求|如果不符合要求，返回当前实例本身；否则返回null|扩展</p>\n<h1 id=\"搞定Receiver\"><a href=\"#搞定Receiver\" class=\"headerlink\" title=\"搞定Receiver\"></a>搞定Receiver</h1><p>理解上面这几个函数，最重要的一点是要理解Receiver。遗憾的是，Kotlin官方文档中并没有针对Receiver的详细讲解。关于这部分的讲解，请扫描下方二维码关注<strong>欧阳锋工作室</strong>，回复<strong>搞定Receiver</strong>查看文章。</p>\n<h1 id=\"欢迎加入Kotlin交流群\"><a href=\"#欢迎加入Kotlin交流群\" class=\"headerlink\" title=\"欢迎加入Kotlin交流群\"></a>欢迎加入Kotlin交流群</h1><p>关于Kotlin，如果你有任何问题，欢迎加入我的Kotlin交流群： 329673958。当前群交流活跃，问题解答速度很快，期待你的加入。</p>\n"},{"title":"记一次印象深刻的Bug追踪过程","date":"2018-01-02T10:03:00.000Z","comments":1,"_content":"\n>问题现象：使用安卓手机以小程序的形式分享产品到微信，使用微信打开，产品详情数据无法显示。而使用iPhone分享到微信，却始终可以正常打开，这个时候所有的矛头都指向了安卓同学。\n\n![小程序中打开，显示空白](http://upload-images.jianshu.io/upload_images/703764-cdf26125f909ddcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n逻辑设计说明：这里的分享数据来自H5接口，通过`addJavascriptInterface`自定义接口完成H5和Java端的数据传递，产品ID来自后台接口获取。\n\n这个时候，安卓同学首先做出了响应，通过调试拿到了JS端的数据，以下是这位小陈同学的截图消息：\n\n![Android调试结果](http://upload-images.jianshu.io/upload_images/703764-bd7a8a062dfab805.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小陈同学这个时候把问题抛给了Web前端同学小徐，以为小徐传递了科学计数法的ID字符串。\n\n![](http://upload-images.jianshu.io/upload_images/703764-4dcd326299b5e4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n大家看小陈同学的截图，图中的ID是使用字符串接收的，这个时候我已经完全排除问题出现在安卓端的可能性了。于是，我问小徐，H5有对参数进行处理吗？得到的答案如下：\n![](http://upload-images.jianshu.io/upload_images/703764-a28fd422fa316bcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n大家看到图中，我已经给出了确定的答案，认为问题来自于后台。因为，后台同学之前的确出现过对ID进行toInt处理最终转换为负数的情况。现在在传递时出现这种低级错误的概率应该也挺高的。这段话抛出去之后，团队炸开了锅，有同学认为大家在互相推诿...\n\n![](http://upload-images.jianshu.io/upload_images/703764-4ec531bb958ae6be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实，还有很长的截图，这里没有展示出来。群里提到最多的一句话就是：`iOS没问题啊`。就连我们的运维同学以及UI设计同学都加入了“讨伐”队伍，种种迹象似乎都指向了安卓同学。这个时候，我们的安卓同学真是“哑巴吃黄连，有苦说不出”，心里的潜台词肯定是：我TM的就用`string`接收了一下，我招谁惹谁了我！\n\n但其实出现这种不知所踪的情况，完全可以理解，大家大都集中在单一平台开发，对于其它环节的理解难免有偏差。其实，用常识来理解这个问题的话，的确后台的概率比较大，前端同学对ID进行运算处理的概率几乎为0，这一点即使是刚刚入行的新手也不太可能。而我一直苦等的后台同学却迟迟没有响应，我目前始终无法确定问题到底来自于后台还是Web前端。直到我终于看到了下面的截图。\n![](http://upload-images.jianshu.io/upload_images/703764-fc7196333abaedbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这个时候，我终于有九成的把握确定问题来自于Web前端了。可是，我知道我不能明说。前端同学已经在聊天记录中给出了证据，在Chrome的控制台打印出了正常的id值，到了安卓端却出现了异常。前端同学这个时候心里也有了一个定性结论，问题来自安卓端。这个时候，我只能亲自上场，而恰好我在外面，正在办理深圳户口，比较不便。于是，我微信给小陈发消息，嘱咐它把详情页的源码“爬”下来，我回来看看源码。\n\n回到家的时候，我问小陈html源码是否已经“爬”了下来，他给我发来截图，我意识到前端使用了https协议，没法获取html源码。于是，我想了一个办法，在源码中嵌入一段代码，通过代码的形式获取WebView产品详情页的数据。这个方法果然奏效，不一会儿，小陈就发来了页面的html源码。\n\n![](http://upload-images.jianshu.io/upload_images/703764-de788a95449192ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n哎哟，我的天哪！混淆后的代码简直不堪入目，不过还好，我可以搜索方法关键字`showShareView`。可是，很遗憾没有搜索到，事件的绑定被放到了JS代码中。在这段源码中，我注意到一个文件名已经被混淆的JS文件，我猜想代码应该就在这里。可是，怎样抓到具体的方法呢？\n\n灵机一动！我之前在代码中让小陈把Debug权限开发给了H5，这次正好可以派上用场。可是，对于混淆后的代码，我心里依然有点打退堂鼓。\n\n连上手机，在Chrome浏览器中输入chrome://inpsect，点击相应链接，非常顺利地进入了调试界面：\n\n![](http://upload-images.jianshu.io/upload_images/703764-753ad81eaaf2318d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在控制台的Source中，我通过关键词搜索找到了混淆后的JS代码片段，在方法名前面增加了一个断点，等调试到底方法位置的时候。这个时候已经获取到了JS的上下文，直接通过`this.gid`打印出了当前产品ID信息，居然是一个非常正常的整型数字。大家注意，这已经是一个在安卓端出问题的产品了，在JS端居然显示是正常的。这个时候，我的大脑非常转动，我的第一感觉应该是`webkit`内核看到接收的字符串全是数字做了”自以为是“的转换。于是，我给出了团队如下的答案：\n![](http://upload-images.jianshu.io/upload_images/703764-02b3c3a21e2b0569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为了进一步确定我的猜想，我让小陈写了一个简单的Demo，通过JS接口传递一个非常大的数字字符串给Java端，看接收是否异常。不一会儿，我就得到了答案：\n![](http://upload-images.jianshu.io/upload_images/703764-64ba7132c99d0a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n至此，我终于基本确定问题的原因了！\n猜测：JS在传递数据给安卓端的时候，应该是使用了基本数据类型。而`webkit`内核在处理的时候可能是以JS端数据类型为准，在传递到Java端时候做了转换。\n\n为了验证这个猜想，我使用`typeof`打印id的数据类型，得到了如下结果：\n\n![](http://upload-images.jianshu.io/upload_images/703764-7615a576bf35a125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n于是，我告诉小徐，问题来自于你没有传递正确的数据类型给安卓端。其实这是比较危险的，不同CPU可以容纳的最大整型值是不一样的。如果iOS端和安卓处理一致，也是以JS端数据类型为准，只不过iOS的CPU字节宽度较大，恰好在iPhone高端机型上面没有出现而低端机型出现的话。其实问题依然存在，而如果iOS的确是以Native端数据类型为准。这就根本不是一个问题。但答案虽然给了团队，可是小徐仍然一脸狐疑，没有经验的CTO也是跟着一脸狐疑，加上解决问题的时间较长。小徐在发布更新的时候也遇到了问题，导致更新失败，问题持续，整个问题一直在持续。\n\n这个时候，我告诉小徐，你发布更新后先别着急，确定更新成功后再告诉团队小伙伴。\n\n一直到确定更新成功，我们再次尝试分享，问题终于引刃而解！\n\n>问题虽然解决了，可是，安卓系统为什么要这样处理呢？为什么不能以Native端数据类型为准呢？带着这个疑问，我开始查看安卓源码。\n\n阅读安卓源码是一个痛苦的过程，随着系统版本的升级，安卓系统的兼容性代码越来越多，这给阅读带来了极大的困难。加上安卓系统本身源码量巨大，阅读源码就像在一个巨大的森林中寻找宝藏一样。这个时候，其实你非常容易迷路，而我知道，只要我坚信我想要什么，就一定可以找到。\n\n这里我们以`addJavascriptInterface`这个方法作为突破口，进入源码：\n```\n public void addJavascriptInterface(Object object, String name) {\n        checkThread();\n        mProvider.addJavascriptInterface(object, name);\n    }\n```\n额，mProvider是什么鬼？难道WebView只是一个傀儡，真正处理业务的其实是mProvider？是的，没错！WebView只不过是一个壳而已！可是，mProvider的实现到底是什么呢？带着这个疑问，我们看到了如下mProvider实例创建的方法：\n```\n  private void ensureProviderCreated() {\n        checkThread();\n        if (mProvider == null) {\n            // As this can get called during the base class constructor chain, pass the minimum\n            // number of dependencies here; the rest are deferred to init().\n            mProvider = getFactory().createWebView(this, new PrivateAccess());\n        }\n    }\n\n    private static WebViewFactoryProvider getFactory() {\n        return WebViewFactory.getProvider();\n    }\n```\n\n又出现了一个工厂方法，别怕，继续往下追踪：\ngetProvider方法较长，我们截取部分，看下面源码：\n```\nstatic WebViewFactoryProvider getProvider() {\n        synchronized (sProviderLock) {\n            // For now the main purpose of this function (and the factory abstraction) is to keep\n            // us honest and minimize usage of WebView internals when binding the proxy.\n            if (sProviderInstance != null) return sProviderInstance;\n\n            final int uid = android.os.Process.myUid();\n            if (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID\n                    || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID\n                    || uid == android.os.Process.BLUETOOTH_UID) {\n                throw new UnsupportedOperationException(\n                        \"For security reasons, WebView is not allowed in privileged processes\");\n            }\n\n            StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();\n            Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, \"WebViewFactory.getProvider()\");\n            try {\n                Class<WebViewFactoryProvider> providerClass = getProviderClass();\n                Method staticFactory = null;\n                try {\n                    staticFactory = providerClass.getMethod(\n                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);\n                } catch (Exception e) {\n                    if (DEBUG) {\n                        Log.w(LOGTAG, \"error instantiating provider with static factory method\", e);\n                    }\n                }\n```\n\n这里的单用户检测，安全调用之类的代码就先忽略了。集中注意力看Provider实例创建的代码，大家可以看到，这里的创建其实通过反射调用创建的。这里有一个关键的方法`getProviderClass()`，这个方法可能获取到真正的Provider类对象，跟踪这个方法调用，我们看到了如下的调用过程：\n`getProviderClass() -> getWebViewProviderClass `\n\n```\n public static Class<WebViewFactoryProvider> getWebViewProviderClass(ClassLoader clazzLoader)\n            throws ClassNotFoundException {\n        return (Class<WebViewFactoryProvider>) Class.forName(CHROMIUM_WEBVIEW_FACTORY,\n                true, clazzLoader);\n    }\n```\n\n看到了吗？`CHROMIUM_WEBVIEW_FACTORY` 这才是真正的`WebViewFactoryProvider`类声明，跟进这个常量：\n``` \nprivate static final String CHROMIUM_WEBVIEW_FACTORY = \"com.android.webview.chromium.WebViewChromiumFactoryProviderForO\";\n```\n\n从命名ForO来看，这个类恰好是用于最新版本Android系统`Oreo`的。没错，这里我们就从最新版本的源码入手，找到真正的问题”元凶“。\n\n可是，这个代码在哪里呢？你搜索安卓源码，根本搜索不到该类，这是为什么呢？也许你已经猜到了，其实这段代码就来自于Chrome核心工程 **chromium**。这段代码，大家通过谷歌搜索找找看，这里我们以官方版本的代码为准：\n[WebViewChromiumFactoryProviderForO](https://chromium.googlesource.com/chromium/src.git/+/28cc253ce347f9a58a0e7c6b7b249c239c4b2669/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java)\n\n具体代码很简单，如下：\n```\npackage com.android.webview.chromium;\nclass WebViewChromiumFactoryProviderForO extends WebViewChromiumFactoryProvider {\n    public static WebViewChromiumFactoryProvider create(android.webkit.WebViewDelegate delegate) {\n        return new WebViewChromiumFactoryProviderForO(delegate);\n    }\n    protected WebViewChromiumFactoryProviderForO(android.webkit.WebViewDelegate delegate) {\n        super(delegate);\n    }\n}\n```\n\nLOL，可是，你以为真的很简单吗？其实不然，实现在父类，跟进父类。这个时候千万保持清醒，别跟丢了哦。我们想要的是Provider的创建过程，这个是Provider工厂类的真正类型，由它完成WebViewProvider的创建。\n\n如果你已经忘了，我们再来回顾一下刚刚创建WebViewProvider的代码，别走神，看这里：\n```\n  private void ensureProviderCreated() {\n        checkThread();\n        if (mProvider == null) {\n            // As this can get called during the base class constructor chain, pass the minimum\n            // number of dependencies here; the rest are deferred to init().\n            mProvider = getFactory().createWebView(this, new PrivateAccess());\n        }\n    }\n```\n\n看到了吗？这里拿到工厂类之后，调用了createWebView方法创建了Provider对象。那好办了，我们在`WebViewChromiumFactoryProviderForO`的父类`WebViewChromiumFactoryProvider`直接搜索`createWebView`方法即可。\n```\n@Override\n    public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) {\n        return new WebViewChromium(this, webView, privateAccess, mShouldDisableThreadChecking);\n    }\n```\n怎么样，这段代码熟悉吗？这里直接返回了一个WebViewChromium对象，也就是说，WebView的所有操作，都由WebViewChromium帮忙完成。好吧，我们继续跟进这个类。可是跟进这个类做什么呢？哈哈，忘了吧，我们的目的是寻找`addJavascriptInterface`实现。稍等，容我先擦一把汗。\n\n```\n  @Override\n    public void addJavascriptInterface(final Object obj, final String interfaceName) {\n        if (checkNeedsPost()) {\n            mFactory.addTask(new Runnable() {\n                @Override\n                public void run() {\n                    addJavascriptInterface(obj, interfaceName);\n                }\n            });\n            return;\n        }\n        mAwContents.addJavascriptInterface(obj, interfaceName);\n    }\n```\n\n稍微瞅一眼这个方法`checkNeedsPost`\n```\n protected boolean checkNeedsPost() {\n        boolean needsPost = !mFactory.hasStarted() || !ThreadUtils.runningOnUiThread();\n        if (!needsPost && mAwContents == null) {\n            throw new IllegalStateException(\"AwContents must be created if we are not posting!\");\n        }\n        return needsPost;\n    }\n```\n\n简单理解一下，如果已经启动或者调用该方法的线程不在UI线程，则需要post到UI线程中去，这里很明显，我们的调用是在UI线程中。因此，我们之间走下面的分支: `mAwContents.addJavascriptInterface(obj, interfaceName);`。那么，问题来了，AwContent又是什么鬼？在哪里创建的呢？\n\n仔细查找这个类，我们发现AwContent是在initForReal方法中被创建的。而initForReal调用来自init方法。可是，init方法是在哪里调用的呢？答案是：WebView。看下面的截图：\n![](http://upload-images.jianshu.io/upload_images/703764-d2adacd680391f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOK，继续往下，看AwContent是怎么创建的。\n```\n private void initForReal() {\n        AwContentsStatics.setRecordFullDocument(sRecordWholeDocumentEnabledByApi\n                || mAppTargetSdkVersion < Build.VERSION_CODES.LOLLIPOP);\n        mAwContents = new AwContents(mFactory.getBrowserContextOnUiThread(), mWebView, mContext,\n                new InternalAccessAdapter(), new WebViewNativeDrawGLFunctorFactory(),\n                mContentsClientAdapter, mWebSettings.getAwSettings(),\n                new AwContents.DependencyFactory() {\n                    @Override\n                    public AutofillProvider createAutofillProvider(\n                            Context context, ViewGroup containerView) {\n                        return mFactory.createAutofillProvider(context, mWebView);\n                    }\n                });\n        if (mAppTargetSdkVersion >= Build.VERSION_CODES.KITKAT) {\n            // On KK and above, favicons are automatically downloaded as the method\n            // old apps use to enable that behavior is deprecated.\n            AwContents.setShouldDownloadFavicons();\n        }\n        if (mAppTargetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n            // Prior to Lollipop, JavaScript objects injected via addJavascriptInterface\n            // were not inspectable.\n            mAwContents.disableJavascriptInterfacesInspection();\n        }\n        // TODO: This assumes AwContents ignores second Paint param.\n        mAwContents.setLayerType(mWebView.getLayerType(), null);\n    }\n```\n下面是一些版本兼容判断，与本文探讨主题无关，先忽略。好了，看到这里，大家是不是感觉被安卓源码忽悠的团团转，最开始我们天真地以为真正的调用来自WebView，安卓系统告诉我们来自WebViewProvider，我们以为这应该就是头了。可是现在又出现了一个AwContent。那么，它是不是真正的最终调用者呢？继续往下看：\n```\n/**\n     * @see ContentViewCore#addPossiblyUnsafeJavascriptInterface(Object, String, Class)\n     */\n    @SuppressLint(\"NewApi\")  // JavascriptInterface requires API level 17.\n    public void addJavascriptInterface(Object object, String name) {\n        if (TRACE) Log.i(TAG, \"%s addJavascriptInterface=%s\", this, name);\n        if (isDestroyedOrNoOperation(WARN)) return;\n        Class<? extends Annotation> requiredAnnotation = null;\n        if (mAppTargetSdkVersion >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            requiredAnnotation = JavascriptInterface.class;\n        }\n        mContentViewCore.addPossiblyUnsafeJavascriptInterface(object, name, requiredAnnotation);\n    }\n```\n\n我擦，又来了一个调用对象`mContentViewCore`。Relax，继续往下看，看它的实现：\n```\n    public void addPossiblyUnsafeJavascriptInterface(Object object, String name,\n            Class<? extends Annotation> requiredAnnotation) {\n        if (mNativeContentViewCore != 0 && object != null) {\n            mJavaScriptInterfaces.put(name, object);\n            nativeAddJavascriptInterface(mNativeContentViewCore, object, name, requiredAnnotation,\n                    mRetainedJavaScriptObjects);\n        }\n    }\n```\n\n看方法名，nativeAddJavascriptInterface看起来最终调用来自于Native，继续往下看：\n```\n   private native void nativeAddJavascriptInterface(int nativeContentViewCoreImpl, Object object,\n            String name, Class requiredAnnotation, HashSet<Object> retainedObjectSet);\n```\n\n接下来看C++代码，这里的中间调用过程没有深究，但最终应该是来到了这里：\n```\nstatic void AddJavascriptInterface(JNIEnv *env, jobject obj, jint nativeFramePointer,\n        jobject javascriptObj, jstring interfaceName)\n{\n#ifdef ANDROID_INSTRUMENT\n    TimeCounterAuto counter(TimeCounter::NativeCallbackTimeCounter);\n#endif\n    WebCore::Frame* pFrame = 0;\n    if (nativeFramePointer == 0)\n        pFrame = GET_NATIVE_FRAME(env, obj);\n    else\n        pFrame = (WebCore::Frame*)nativeFramePointer;\n    LOG_ASSERT(pFrame, \"nativeAddJavascriptInterface must take a valid frame pointer!\");\n    JavaVM* vm;\n    env->GetJavaVM(&vm);\n    LOGV(\"::WebCore:: addJSInterface: %p\", pFrame);\n#if USE(JSC)\n    // Copied from qwebframe.cpp\n    JSC::JSLock lock(false);\n    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);\n    if (window) {\n        JSC::Bindings::RootObject *root = pFrame->script()->bindingRootObject();\n        JSC::Bindings::setJavaVM(vm);\n        // Add the binding to JS environment\n        JSC::ExecState* exec = window->globalExec();\n        JSC::JSObject *addedObject = WeakJavaInstance::create(javascriptObj,\n                root)->createRuntimeObject(exec);\n        const jchar* s = env->GetStringChars(interfaceName, NULL);\n        if (s) {\n            // Add the binding name to the window's table of child objects.\n            JSC::PutPropertySlot slot;\n            window->put(exec, JSC::Identifier(exec, (const UChar *)s, \n                    env->GetStringLength(interfaceName)), addedObject, slot);\n            env->ReleaseStringChars(interfaceName, s);\n            checkException(env);\n        }\n    }\n#endif  // USE(JSC)\n#if USE(V8)\n    if (pFrame) {\n        const char* name = JSC::Bindings::getCharactersFromJStringInEnv(env, interfaceName);\n        NPObject* obj = JSC::Bindings::JavaInstanceToNPObject(new JSC::Bindings::JavaInstance(javascriptObj));\n        pFrame->script()->bindToWindowObject(pFrame, name, obj);\n        // JavaInstanceToNPObject calls NPN_RetainObject on the\n        // returned one (see CreateV8ObjectForNPObject in V8NPObject.cpp).\n        // BindToWindowObject also increases obj's ref count and decrease\n        // the ref count when the object is not reachable from JavaScript\n        // side. Code here must release the reference count increased by\n        // JavaInstanceToNPObject.\n        _NPN_ReleaseObject(obj);\n        JSC::Bindings::releaseCharactersForJString(interfaceName, name);\n    }\n#endif\n}\n```\n这里的代码量较大，我们主要关注下面这一行代码：\n```\n window->put(exec, JSC::Identifier(exec, (const UChar *)s, \n                    env->GetStringLength(interfaceName)), addedObject, slot);\n```\n最终数据的处理原来来自于C++端的window对象，这又是什么呢？继续看：\n```\n    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);\n```\n这是在WebCore命名空间下面的`JSDOMWindow`对象，看到这里，其实大多数同学应该已经都没有兴趣看下去了。这实在是一个冗长的调用过程，而且在阅读源码过程中，我们还忽略多进程调用，忽略各种细节。对此，关于这段源码的阅读，我们暂且告一段落，等时间充裕，我再来补充。\n\n# 总结\n这次的问题牵扯了移动端、Web前端和后台，这种跨平台的问题解决起来的确存在很大的困难。其实，我已经很长时间没有写JS了，仅仅在几个月前使用RN的时候有了解一些ES6的语法。凭借刚刚工作时仅有的2个月JS经验，加上在多方面知识的累积，总算顺利解决了问题。其实，根据我的经验来看，越是看起来无头绪的问题，往往越是一个极其简单的问题。为了避免出现这种问题，在编码过程中，必须小心翼翼。尽量多检查几次，避免出现类似这样的错误。另外，要尝试接受不一样的观点，如果你一开始就接受了其他人的观点，在解决问题上就会有很强的目的性，解决问题的速度也就更快。\n\n>最后，新的一年里，祝大家万事如意，阖家欢乐，工作顺顺利利，身体健健康康。\n","source":"_posts/bug fix/记一次印象深刻的Bug追踪过程.md","raw":"title: 记一次印象深刻的Bug追踪过程\ndate: 2018/01/02 18:03\ncomments: true\ntags:\n- Android\n- Bug\n- 前端\ncategories:\n- Bug Fix\n---\n\n>问题现象：使用安卓手机以小程序的形式分享产品到微信，使用微信打开，产品详情数据无法显示。而使用iPhone分享到微信，却始终可以正常打开，这个时候所有的矛头都指向了安卓同学。\n\n![小程序中打开，显示空白](http://upload-images.jianshu.io/upload_images/703764-cdf26125f909ddcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n逻辑设计说明：这里的分享数据来自H5接口，通过`addJavascriptInterface`自定义接口完成H5和Java端的数据传递，产品ID来自后台接口获取。\n\n这个时候，安卓同学首先做出了响应，通过调试拿到了JS端的数据，以下是这位小陈同学的截图消息：\n\n![Android调试结果](http://upload-images.jianshu.io/upload_images/703764-bd7a8a062dfab805.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n小陈同学这个时候把问题抛给了Web前端同学小徐，以为小徐传递了科学计数法的ID字符串。\n\n![](http://upload-images.jianshu.io/upload_images/703764-4dcd326299b5e4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n大家看小陈同学的截图，图中的ID是使用字符串接收的，这个时候我已经完全排除问题出现在安卓端的可能性了。于是，我问小徐，H5有对参数进行处理吗？得到的答案如下：\n![](http://upload-images.jianshu.io/upload_images/703764-a28fd422fa316bcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n大家看到图中，我已经给出了确定的答案，认为问题来自于后台。因为，后台同学之前的确出现过对ID进行toInt处理最终转换为负数的情况。现在在传递时出现这种低级错误的概率应该也挺高的。这段话抛出去之后，团队炸开了锅，有同学认为大家在互相推诿...\n\n![](http://upload-images.jianshu.io/upload_images/703764-4ec531bb958ae6be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实，还有很长的截图，这里没有展示出来。群里提到最多的一句话就是：`iOS没问题啊`。就连我们的运维同学以及UI设计同学都加入了“讨伐”队伍，种种迹象似乎都指向了安卓同学。这个时候，我们的安卓同学真是“哑巴吃黄连，有苦说不出”，心里的潜台词肯定是：我TM的就用`string`接收了一下，我招谁惹谁了我！\n\n但其实出现这种不知所踪的情况，完全可以理解，大家大都集中在单一平台开发，对于其它环节的理解难免有偏差。其实，用常识来理解这个问题的话，的确后台的概率比较大，前端同学对ID进行运算处理的概率几乎为0，这一点即使是刚刚入行的新手也不太可能。而我一直苦等的后台同学却迟迟没有响应，我目前始终无法确定问题到底来自于后台还是Web前端。直到我终于看到了下面的截图。\n![](http://upload-images.jianshu.io/upload_images/703764-fc7196333abaedbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这个时候，我终于有九成的把握确定问题来自于Web前端了。可是，我知道我不能明说。前端同学已经在聊天记录中给出了证据，在Chrome的控制台打印出了正常的id值，到了安卓端却出现了异常。前端同学这个时候心里也有了一个定性结论，问题来自安卓端。这个时候，我只能亲自上场，而恰好我在外面，正在办理深圳户口，比较不便。于是，我微信给小陈发消息，嘱咐它把详情页的源码“爬”下来，我回来看看源码。\n\n回到家的时候，我问小陈html源码是否已经“爬”了下来，他给我发来截图，我意识到前端使用了https协议，没法获取html源码。于是，我想了一个办法，在源码中嵌入一段代码，通过代码的形式获取WebView产品详情页的数据。这个方法果然奏效，不一会儿，小陈就发来了页面的html源码。\n\n![](http://upload-images.jianshu.io/upload_images/703764-de788a95449192ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n哎哟，我的天哪！混淆后的代码简直不堪入目，不过还好，我可以搜索方法关键字`showShareView`。可是，很遗憾没有搜索到，事件的绑定被放到了JS代码中。在这段源码中，我注意到一个文件名已经被混淆的JS文件，我猜想代码应该就在这里。可是，怎样抓到具体的方法呢？\n\n灵机一动！我之前在代码中让小陈把Debug权限开发给了H5，这次正好可以派上用场。可是，对于混淆后的代码，我心里依然有点打退堂鼓。\n\n连上手机，在Chrome浏览器中输入chrome://inpsect，点击相应链接，非常顺利地进入了调试界面：\n\n![](http://upload-images.jianshu.io/upload_images/703764-753ad81eaaf2318d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在控制台的Source中，我通过关键词搜索找到了混淆后的JS代码片段，在方法名前面增加了一个断点，等调试到底方法位置的时候。这个时候已经获取到了JS的上下文，直接通过`this.gid`打印出了当前产品ID信息，居然是一个非常正常的整型数字。大家注意，这已经是一个在安卓端出问题的产品了，在JS端居然显示是正常的。这个时候，我的大脑非常转动，我的第一感觉应该是`webkit`内核看到接收的字符串全是数字做了”自以为是“的转换。于是，我给出了团队如下的答案：\n![](http://upload-images.jianshu.io/upload_images/703764-02b3c3a21e2b0569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为了进一步确定我的猜想，我让小陈写了一个简单的Demo，通过JS接口传递一个非常大的数字字符串给Java端，看接收是否异常。不一会儿，我就得到了答案：\n![](http://upload-images.jianshu.io/upload_images/703764-64ba7132c99d0a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n至此，我终于基本确定问题的原因了！\n猜测：JS在传递数据给安卓端的时候，应该是使用了基本数据类型。而`webkit`内核在处理的时候可能是以JS端数据类型为准，在传递到Java端时候做了转换。\n\n为了验证这个猜想，我使用`typeof`打印id的数据类型，得到了如下结果：\n\n![](http://upload-images.jianshu.io/upload_images/703764-7615a576bf35a125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n于是，我告诉小徐，问题来自于你没有传递正确的数据类型给安卓端。其实这是比较危险的，不同CPU可以容纳的最大整型值是不一样的。如果iOS端和安卓处理一致，也是以JS端数据类型为准，只不过iOS的CPU字节宽度较大，恰好在iPhone高端机型上面没有出现而低端机型出现的话。其实问题依然存在，而如果iOS的确是以Native端数据类型为准。这就根本不是一个问题。但答案虽然给了团队，可是小徐仍然一脸狐疑，没有经验的CTO也是跟着一脸狐疑，加上解决问题的时间较长。小徐在发布更新的时候也遇到了问题，导致更新失败，问题持续，整个问题一直在持续。\n\n这个时候，我告诉小徐，你发布更新后先别着急，确定更新成功后再告诉团队小伙伴。\n\n一直到确定更新成功，我们再次尝试分享，问题终于引刃而解！\n\n>问题虽然解决了，可是，安卓系统为什么要这样处理呢？为什么不能以Native端数据类型为准呢？带着这个疑问，我开始查看安卓源码。\n\n阅读安卓源码是一个痛苦的过程，随着系统版本的升级，安卓系统的兼容性代码越来越多，这给阅读带来了极大的困难。加上安卓系统本身源码量巨大，阅读源码就像在一个巨大的森林中寻找宝藏一样。这个时候，其实你非常容易迷路，而我知道，只要我坚信我想要什么，就一定可以找到。\n\n这里我们以`addJavascriptInterface`这个方法作为突破口，进入源码：\n```\n public void addJavascriptInterface(Object object, String name) {\n        checkThread();\n        mProvider.addJavascriptInterface(object, name);\n    }\n```\n额，mProvider是什么鬼？难道WebView只是一个傀儡，真正处理业务的其实是mProvider？是的，没错！WebView只不过是一个壳而已！可是，mProvider的实现到底是什么呢？带着这个疑问，我们看到了如下mProvider实例创建的方法：\n```\n  private void ensureProviderCreated() {\n        checkThread();\n        if (mProvider == null) {\n            // As this can get called during the base class constructor chain, pass the minimum\n            // number of dependencies here; the rest are deferred to init().\n            mProvider = getFactory().createWebView(this, new PrivateAccess());\n        }\n    }\n\n    private static WebViewFactoryProvider getFactory() {\n        return WebViewFactory.getProvider();\n    }\n```\n\n又出现了一个工厂方法，别怕，继续往下追踪：\ngetProvider方法较长，我们截取部分，看下面源码：\n```\nstatic WebViewFactoryProvider getProvider() {\n        synchronized (sProviderLock) {\n            // For now the main purpose of this function (and the factory abstraction) is to keep\n            // us honest and minimize usage of WebView internals when binding the proxy.\n            if (sProviderInstance != null) return sProviderInstance;\n\n            final int uid = android.os.Process.myUid();\n            if (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID\n                    || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID\n                    || uid == android.os.Process.BLUETOOTH_UID) {\n                throw new UnsupportedOperationException(\n                        \"For security reasons, WebView is not allowed in privileged processes\");\n            }\n\n            StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();\n            Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, \"WebViewFactory.getProvider()\");\n            try {\n                Class<WebViewFactoryProvider> providerClass = getProviderClass();\n                Method staticFactory = null;\n                try {\n                    staticFactory = providerClass.getMethod(\n                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);\n                } catch (Exception e) {\n                    if (DEBUG) {\n                        Log.w(LOGTAG, \"error instantiating provider with static factory method\", e);\n                    }\n                }\n```\n\n这里的单用户检测，安全调用之类的代码就先忽略了。集中注意力看Provider实例创建的代码，大家可以看到，这里的创建其实通过反射调用创建的。这里有一个关键的方法`getProviderClass()`，这个方法可能获取到真正的Provider类对象，跟踪这个方法调用，我们看到了如下的调用过程：\n`getProviderClass() -> getWebViewProviderClass `\n\n```\n public static Class<WebViewFactoryProvider> getWebViewProviderClass(ClassLoader clazzLoader)\n            throws ClassNotFoundException {\n        return (Class<WebViewFactoryProvider>) Class.forName(CHROMIUM_WEBVIEW_FACTORY,\n                true, clazzLoader);\n    }\n```\n\n看到了吗？`CHROMIUM_WEBVIEW_FACTORY` 这才是真正的`WebViewFactoryProvider`类声明，跟进这个常量：\n``` \nprivate static final String CHROMIUM_WEBVIEW_FACTORY = \"com.android.webview.chromium.WebViewChromiumFactoryProviderForO\";\n```\n\n从命名ForO来看，这个类恰好是用于最新版本Android系统`Oreo`的。没错，这里我们就从最新版本的源码入手，找到真正的问题”元凶“。\n\n可是，这个代码在哪里呢？你搜索安卓源码，根本搜索不到该类，这是为什么呢？也许你已经猜到了，其实这段代码就来自于Chrome核心工程 **chromium**。这段代码，大家通过谷歌搜索找找看，这里我们以官方版本的代码为准：\n[WebViewChromiumFactoryProviderForO](https://chromium.googlesource.com/chromium/src.git/+/28cc253ce347f9a58a0e7c6b7b249c239c4b2669/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java)\n\n具体代码很简单，如下：\n```\npackage com.android.webview.chromium;\nclass WebViewChromiumFactoryProviderForO extends WebViewChromiumFactoryProvider {\n    public static WebViewChromiumFactoryProvider create(android.webkit.WebViewDelegate delegate) {\n        return new WebViewChromiumFactoryProviderForO(delegate);\n    }\n    protected WebViewChromiumFactoryProviderForO(android.webkit.WebViewDelegate delegate) {\n        super(delegate);\n    }\n}\n```\n\nLOL，可是，你以为真的很简单吗？其实不然，实现在父类，跟进父类。这个时候千万保持清醒，别跟丢了哦。我们想要的是Provider的创建过程，这个是Provider工厂类的真正类型，由它完成WebViewProvider的创建。\n\n如果你已经忘了，我们再来回顾一下刚刚创建WebViewProvider的代码，别走神，看这里：\n```\n  private void ensureProviderCreated() {\n        checkThread();\n        if (mProvider == null) {\n            // As this can get called during the base class constructor chain, pass the minimum\n            // number of dependencies here; the rest are deferred to init().\n            mProvider = getFactory().createWebView(this, new PrivateAccess());\n        }\n    }\n```\n\n看到了吗？这里拿到工厂类之后，调用了createWebView方法创建了Provider对象。那好办了，我们在`WebViewChromiumFactoryProviderForO`的父类`WebViewChromiumFactoryProvider`直接搜索`createWebView`方法即可。\n```\n@Override\n    public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) {\n        return new WebViewChromium(this, webView, privateAccess, mShouldDisableThreadChecking);\n    }\n```\n怎么样，这段代码熟悉吗？这里直接返回了一个WebViewChromium对象，也就是说，WebView的所有操作，都由WebViewChromium帮忙完成。好吧，我们继续跟进这个类。可是跟进这个类做什么呢？哈哈，忘了吧，我们的目的是寻找`addJavascriptInterface`实现。稍等，容我先擦一把汗。\n\n```\n  @Override\n    public void addJavascriptInterface(final Object obj, final String interfaceName) {\n        if (checkNeedsPost()) {\n            mFactory.addTask(new Runnable() {\n                @Override\n                public void run() {\n                    addJavascriptInterface(obj, interfaceName);\n                }\n            });\n            return;\n        }\n        mAwContents.addJavascriptInterface(obj, interfaceName);\n    }\n```\n\n稍微瞅一眼这个方法`checkNeedsPost`\n```\n protected boolean checkNeedsPost() {\n        boolean needsPost = !mFactory.hasStarted() || !ThreadUtils.runningOnUiThread();\n        if (!needsPost && mAwContents == null) {\n            throw new IllegalStateException(\"AwContents must be created if we are not posting!\");\n        }\n        return needsPost;\n    }\n```\n\n简单理解一下，如果已经启动或者调用该方法的线程不在UI线程，则需要post到UI线程中去，这里很明显，我们的调用是在UI线程中。因此，我们之间走下面的分支: `mAwContents.addJavascriptInterface(obj, interfaceName);`。那么，问题来了，AwContent又是什么鬼？在哪里创建的呢？\n\n仔细查找这个类，我们发现AwContent是在initForReal方法中被创建的。而initForReal调用来自init方法。可是，init方法是在哪里调用的呢？答案是：WebView。看下面的截图：\n![](http://upload-images.jianshu.io/upload_images/703764-d2adacd680391f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOK，继续往下，看AwContent是怎么创建的。\n```\n private void initForReal() {\n        AwContentsStatics.setRecordFullDocument(sRecordWholeDocumentEnabledByApi\n                || mAppTargetSdkVersion < Build.VERSION_CODES.LOLLIPOP);\n        mAwContents = new AwContents(mFactory.getBrowserContextOnUiThread(), mWebView, mContext,\n                new InternalAccessAdapter(), new WebViewNativeDrawGLFunctorFactory(),\n                mContentsClientAdapter, mWebSettings.getAwSettings(),\n                new AwContents.DependencyFactory() {\n                    @Override\n                    public AutofillProvider createAutofillProvider(\n                            Context context, ViewGroup containerView) {\n                        return mFactory.createAutofillProvider(context, mWebView);\n                    }\n                });\n        if (mAppTargetSdkVersion >= Build.VERSION_CODES.KITKAT) {\n            // On KK and above, favicons are automatically downloaded as the method\n            // old apps use to enable that behavior is deprecated.\n            AwContents.setShouldDownloadFavicons();\n        }\n        if (mAppTargetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n            // Prior to Lollipop, JavaScript objects injected via addJavascriptInterface\n            // were not inspectable.\n            mAwContents.disableJavascriptInterfacesInspection();\n        }\n        // TODO: This assumes AwContents ignores second Paint param.\n        mAwContents.setLayerType(mWebView.getLayerType(), null);\n    }\n```\n下面是一些版本兼容判断，与本文探讨主题无关，先忽略。好了，看到这里，大家是不是感觉被安卓源码忽悠的团团转，最开始我们天真地以为真正的调用来自WebView，安卓系统告诉我们来自WebViewProvider，我们以为这应该就是头了。可是现在又出现了一个AwContent。那么，它是不是真正的最终调用者呢？继续往下看：\n```\n/**\n     * @see ContentViewCore#addPossiblyUnsafeJavascriptInterface(Object, String, Class)\n     */\n    @SuppressLint(\"NewApi\")  // JavascriptInterface requires API level 17.\n    public void addJavascriptInterface(Object object, String name) {\n        if (TRACE) Log.i(TAG, \"%s addJavascriptInterface=%s\", this, name);\n        if (isDestroyedOrNoOperation(WARN)) return;\n        Class<? extends Annotation> requiredAnnotation = null;\n        if (mAppTargetSdkVersion >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            requiredAnnotation = JavascriptInterface.class;\n        }\n        mContentViewCore.addPossiblyUnsafeJavascriptInterface(object, name, requiredAnnotation);\n    }\n```\n\n我擦，又来了一个调用对象`mContentViewCore`。Relax，继续往下看，看它的实现：\n```\n    public void addPossiblyUnsafeJavascriptInterface(Object object, String name,\n            Class<? extends Annotation> requiredAnnotation) {\n        if (mNativeContentViewCore != 0 && object != null) {\n            mJavaScriptInterfaces.put(name, object);\n            nativeAddJavascriptInterface(mNativeContentViewCore, object, name, requiredAnnotation,\n                    mRetainedJavaScriptObjects);\n        }\n    }\n```\n\n看方法名，nativeAddJavascriptInterface看起来最终调用来自于Native，继续往下看：\n```\n   private native void nativeAddJavascriptInterface(int nativeContentViewCoreImpl, Object object,\n            String name, Class requiredAnnotation, HashSet<Object> retainedObjectSet);\n```\n\n接下来看C++代码，这里的中间调用过程没有深究，但最终应该是来到了这里：\n```\nstatic void AddJavascriptInterface(JNIEnv *env, jobject obj, jint nativeFramePointer,\n        jobject javascriptObj, jstring interfaceName)\n{\n#ifdef ANDROID_INSTRUMENT\n    TimeCounterAuto counter(TimeCounter::NativeCallbackTimeCounter);\n#endif\n    WebCore::Frame* pFrame = 0;\n    if (nativeFramePointer == 0)\n        pFrame = GET_NATIVE_FRAME(env, obj);\n    else\n        pFrame = (WebCore::Frame*)nativeFramePointer;\n    LOG_ASSERT(pFrame, \"nativeAddJavascriptInterface must take a valid frame pointer!\");\n    JavaVM* vm;\n    env->GetJavaVM(&vm);\n    LOGV(\"::WebCore:: addJSInterface: %p\", pFrame);\n#if USE(JSC)\n    // Copied from qwebframe.cpp\n    JSC::JSLock lock(false);\n    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);\n    if (window) {\n        JSC::Bindings::RootObject *root = pFrame->script()->bindingRootObject();\n        JSC::Bindings::setJavaVM(vm);\n        // Add the binding to JS environment\n        JSC::ExecState* exec = window->globalExec();\n        JSC::JSObject *addedObject = WeakJavaInstance::create(javascriptObj,\n                root)->createRuntimeObject(exec);\n        const jchar* s = env->GetStringChars(interfaceName, NULL);\n        if (s) {\n            // Add the binding name to the window's table of child objects.\n            JSC::PutPropertySlot slot;\n            window->put(exec, JSC::Identifier(exec, (const UChar *)s, \n                    env->GetStringLength(interfaceName)), addedObject, slot);\n            env->ReleaseStringChars(interfaceName, s);\n            checkException(env);\n        }\n    }\n#endif  // USE(JSC)\n#if USE(V8)\n    if (pFrame) {\n        const char* name = JSC::Bindings::getCharactersFromJStringInEnv(env, interfaceName);\n        NPObject* obj = JSC::Bindings::JavaInstanceToNPObject(new JSC::Bindings::JavaInstance(javascriptObj));\n        pFrame->script()->bindToWindowObject(pFrame, name, obj);\n        // JavaInstanceToNPObject calls NPN_RetainObject on the\n        // returned one (see CreateV8ObjectForNPObject in V8NPObject.cpp).\n        // BindToWindowObject also increases obj's ref count and decrease\n        // the ref count when the object is not reachable from JavaScript\n        // side. Code here must release the reference count increased by\n        // JavaInstanceToNPObject.\n        _NPN_ReleaseObject(obj);\n        JSC::Bindings::releaseCharactersForJString(interfaceName, name);\n    }\n#endif\n}\n```\n这里的代码量较大，我们主要关注下面这一行代码：\n```\n window->put(exec, JSC::Identifier(exec, (const UChar *)s, \n                    env->GetStringLength(interfaceName)), addedObject, slot);\n```\n最终数据的处理原来来自于C++端的window对象，这又是什么呢？继续看：\n```\n    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);\n```\n这是在WebCore命名空间下面的`JSDOMWindow`对象，看到这里，其实大多数同学应该已经都没有兴趣看下去了。这实在是一个冗长的调用过程，而且在阅读源码过程中，我们还忽略多进程调用，忽略各种细节。对此，关于这段源码的阅读，我们暂且告一段落，等时间充裕，我再来补充。\n\n# 总结\n这次的问题牵扯了移动端、Web前端和后台，这种跨平台的问题解决起来的确存在很大的困难。其实，我已经很长时间没有写JS了，仅仅在几个月前使用RN的时候有了解一些ES6的语法。凭借刚刚工作时仅有的2个月JS经验，加上在多方面知识的累积，总算顺利解决了问题。其实，根据我的经验来看，越是看起来无头绪的问题，往往越是一个极其简单的问题。为了避免出现这种问题，在编码过程中，必须小心翼翼。尽量多检查几次，避免出现类似这样的错误。另外，要尝试接受不一样的观点，如果你一开始就接受了其他人的观点，在解决问题上就会有很强的目的性，解决问题的速度也就更快。\n\n>最后，新的一年里，祝大家万事如意，阖家欢乐，工作顺顺利利，身体健健康康。\n","slug":"bug fix/记一次印象深刻的Bug追踪过程","published":1,"updated":"2019-04-28T12:39:23.520Z","_id":"cjv0x7ujd005hbkb4me64p4lc","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>问题现象：使用安卓手机以小程序的形式分享产品到微信，使用微信打开，产品详情数据无法显示。而使用iPhone分享到微信，却始终可以正常打开，这个时候所有的矛头都指向了安卓同学。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-cdf26125f909ddcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小程序中打开，显示空白\"></p>\n<p>逻辑设计说明：这里的分享数据来自H5接口，通过<code>addJavascriptInterface</code>自定义接口完成H5和Java端的数据传递，产品ID来自后台接口获取。</p>\n<p>这个时候，安卓同学首先做出了响应，通过调试拿到了JS端的数据，以下是这位小陈同学的截图消息：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-bd7a8a062dfab805.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Android调试结果\"></p>\n<p>小陈同学这个时候把问题抛给了Web前端同学小徐，以为小徐传递了科学计数法的ID字符串。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4dcd326299b5e4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>大家看小陈同学的截图，图中的ID是使用字符串接收的，这个时候我已经完全排除问题出现在安卓端的可能性了。于是，我问小徐，H5有对参数进行处理吗？得到的答案如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-a28fd422fa316bcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>大家看到图中，我已经给出了确定的答案，认为问题来自于后台。因为，后台同学之前的确出现过对ID进行toInt处理最终转换为负数的情况。现在在传递时出现这种低级错误的概率应该也挺高的。这段话抛出去之后，团队炸开了锅，有同学认为大家在互相推诿…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4ec531bb958ae6be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其实，还有很长的截图，这里没有展示出来。群里提到最多的一句话就是：<code>iOS没问题啊</code>。就连我们的运维同学以及UI设计同学都加入了“讨伐”队伍，种种迹象似乎都指向了安卓同学。这个时候，我们的安卓同学真是“哑巴吃黄连，有苦说不出”，心里的潜台词肯定是：我TM的就用<code>string</code>接收了一下，我招谁惹谁了我！</p>\n<p>但其实出现这种不知所踪的情况，完全可以理解，大家大都集中在单一平台开发，对于其它环节的理解难免有偏差。其实，用常识来理解这个问题的话，的确后台的概率比较大，前端同学对ID进行运算处理的概率几乎为0，这一点即使是刚刚入行的新手也不太可能。而我一直苦等的后台同学却迟迟没有响应，我目前始终无法确定问题到底来自于后台还是Web前端。直到我终于看到了下面的截图。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-fc7196333abaedbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这个时候，我终于有九成的把握确定问题来自于Web前端了。可是，我知道我不能明说。前端同学已经在聊天记录中给出了证据，在Chrome的控制台打印出了正常的id值，到了安卓端却出现了异常。前端同学这个时候心里也有了一个定性结论，问题来自安卓端。这个时候，我只能亲自上场，而恰好我在外面，正在办理深圳户口，比较不便。于是，我微信给小陈发消息，嘱咐它把详情页的源码“爬”下来，我回来看看源码。</p>\n<p>回到家的时候，我问小陈html源码是否已经“爬”了下来，他给我发来截图，我意识到前端使用了https协议，没法获取html源码。于是，我想了一个办法，在源码中嵌入一段代码，通过代码的形式获取WebView产品详情页的数据。这个方法果然奏效，不一会儿，小陈就发来了页面的html源码。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-de788a95449192ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>哎哟，我的天哪！混淆后的代码简直不堪入目，不过还好，我可以搜索方法关键字<code>showShareView</code>。可是，很遗憾没有搜索到，事件的绑定被放到了JS代码中。在这段源码中，我注意到一个文件名已经被混淆的JS文件，我猜想代码应该就在这里。可是，怎样抓到具体的方法呢？</p>\n<p>灵机一动！我之前在代码中让小陈把Debug权限开发给了H5，这次正好可以派上用场。可是，对于混淆后的代码，我心里依然有点打退堂鼓。</p>\n<p>连上手机，在Chrome浏览器中输入chrome://inpsect，点击相应链接，非常顺利地进入了调试界面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-753ad81eaaf2318d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在控制台的Source中，我通过关键词搜索找到了混淆后的JS代码片段，在方法名前面增加了一个断点，等调试到底方法位置的时候。这个时候已经获取到了JS的上下文，直接通过<code>this.gid</code>打印出了当前产品ID信息，居然是一个非常正常的整型数字。大家注意，这已经是一个在安卓端出问题的产品了，在JS端居然显示是正常的。这个时候，我的大脑非常转动，我的第一感觉应该是<code>webkit</code>内核看到接收的字符串全是数字做了”自以为是“的转换。于是，我给出了团队如下的答案：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-02b3c3a21e2b0569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>为了进一步确定我的猜想，我让小陈写了一个简单的Demo，通过JS接口传递一个非常大的数字字符串给Java端，看接收是否异常。不一会儿，我就得到了答案：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-64ba7132c99d0a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>至此，我终于基本确定问题的原因了！<br>猜测：JS在传递数据给安卓端的时候，应该是使用了基本数据类型。而<code>webkit</code>内核在处理的时候可能是以JS端数据类型为准，在传递到Java端时候做了转换。</p>\n<p>为了验证这个猜想，我使用<code>typeof</code>打印id的数据类型，得到了如下结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-7615a576bf35a125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>于是，我告诉小徐，问题来自于你没有传递正确的数据类型给安卓端。其实这是比较危险的，不同CPU可以容纳的最大整型值是不一样的。如果iOS端和安卓处理一致，也是以JS端数据类型为准，只不过iOS的CPU字节宽度较大，恰好在iPhone高端机型上面没有出现而低端机型出现的话。其实问题依然存在，而如果iOS的确是以Native端数据类型为准。这就根本不是一个问题。但答案虽然给了团队，可是小徐仍然一脸狐疑，没有经验的CTO也是跟着一脸狐疑，加上解决问题的时间较长。小徐在发布更新的时候也遇到了问题，导致更新失败，问题持续，整个问题一直在持续。</p>\n<p>这个时候，我告诉小徐，你发布更新后先别着急，确定更新成功后再告诉团队小伙伴。</p>\n<p>一直到确定更新成功，我们再次尝试分享，问题终于引刃而解！</p>\n<blockquote>\n<p>问题虽然解决了，可是，安卓系统为什么要这样处理呢？为什么不能以Native端数据类型为准呢？带着这个疑问，我开始查看安卓源码。</p>\n</blockquote>\n<p>阅读安卓源码是一个痛苦的过程，随着系统版本的升级，安卓系统的兼容性代码越来越多，这给阅读带来了极大的困难。加上安卓系统本身源码量巨大，阅读源码就像在一个巨大的森林中寻找宝藏一样。这个时候，其实你非常容易迷路，而我知道，只要我坚信我想要什么，就一定可以找到。</p>\n<p>这里我们以<code>addJavascriptInterface</code>这个方法作为突破口，进入源码：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addJavascriptInterface(Object object, String name) &#123;</span><br><span class=\"line\">       checkThread();</span><br><span class=\"line\">       mProvider.addJavascriptInterface(object, name);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>额，mProvider是什么鬼？难道WebView只是一个傀儡，真正处理业务的其实是mProvider？是的，没错！WebView只不过是一个壳而已！可是，mProvider的实现到底是什么呢？带着这个疑问，我们看到了如下mProvider实例创建的方法：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureProviderCreated() &#123;</span><br><span class=\"line\">      checkThread();</span><br><span class=\"line\">      if (mProvider == null) &#123;</span><br><span class=\"line\">          // As this can get called during the base class constructor chain, pass the minimum</span><br><span class=\"line\">          // number of dependencies here; the rest are deferred to init().</span><br><span class=\"line\">          mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static WebViewFactoryProvider getFactory() &#123;</span><br><span class=\"line\">      return WebViewFactory.getProvider();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>又出现了一个工厂方法，别怕，继续往下追踪：<br>getProvider方法较长，我们截取部分，看下面源码：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static WebViewFactoryProvider getProvider() &#123;</span><br><span class=\"line\">        synchronized (sProviderLock) &#123;</span><br><span class=\"line\">            // For now the main purpose of this function (and the factory abstraction) is to keep</span><br><span class=\"line\">            // us honest and minimize usage of WebView internals when binding the proxy.</span><br><span class=\"line\">            if (sProviderInstance != null) return sProviderInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">            final int uid = android.os.Process.myUid();</span><br><span class=\"line\">            if (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID</span><br><span class=\"line\">                    || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID</span><br><span class=\"line\">                    || uid == android.os.Process.BLUETOOTH_UID) &#123;</span><br><span class=\"line\">                throw new UnsupportedOperationException(</span><br><span class=\"line\">                        &quot;For security reasons, WebView is not allowed in privileged processes&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, &quot;WebViewFactory.getProvider()&quot;);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class=\"line\">                Method staticFactory = null;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    staticFactory = providerClass.getMethod(</span><br><span class=\"line\">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);</span><br><span class=\"line\">                &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                    if (DEBUG) &#123;</span><br><span class=\"line\">                        Log.w(LOGTAG, &quot;error instantiating provider with static factory method&quot;, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的单用户检测，安全调用之类的代码就先忽略了。集中注意力看Provider实例创建的代码，大家可以看到，这里的创建其实通过反射调用创建的。这里有一个关键的方法<code>getProviderClass()</code>，这个方法可能获取到真正的Provider类对象，跟踪这个方法调用，我们看到了如下的调用过程：<br><code>getProviderClass() -&gt; getWebViewProviderClass</code></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Class&lt;WebViewFactoryProvider&gt; getWebViewProviderClass(ClassLoader clazzLoader)</span><br><span class=\"line\">           throws ClassNotFoundException &#123;</span><br><span class=\"line\">       return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(CHROMIUM_WEBVIEW_FACTORY,</span><br><span class=\"line\">               true, clazzLoader);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>看到了吗？<code>CHROMIUM_WEBVIEW_FACTORY</code> 这才是真正的<code>WebViewFactoryProvider</code>类声明，跟进这个常量：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String CHROMIUM_WEBVIEW_FACTORY = &quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForO&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>从命名ForO来看，这个类恰好是用于最新版本Android系统<code>Oreo</code>的。没错，这里我们就从最新版本的源码入手，找到真正的问题”元凶“。</p>\n<p>可是，这个代码在哪里呢？你搜索安卓源码，根本搜索不到该类，这是为什么呢？也许你已经猜到了，其实这段代码就来自于Chrome核心工程 <strong>chromium</strong>。这段代码，大家通过谷歌搜索找找看，这里我们以官方版本的代码为准：<br><a href=\"https://chromium.googlesource.com/chromium/src.git/+/28cc253ce347f9a58a0e7c6b7b249c239c4b2669/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java\" target=\"_blank\" rel=\"noopener\">WebViewChromiumFactoryProviderForO</a></p>\n<p>具体代码很简单，如下：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.android.webview.chromium;</span><br><span class=\"line\">class WebViewChromiumFactoryProviderForO extends WebViewChromiumFactoryProvider &#123;</span><br><span class=\"line\">    public static WebViewChromiumFactoryProvider create(android.webkit.WebViewDelegate delegate) &#123;</span><br><span class=\"line\">        return new WebViewChromiumFactoryProviderForO(delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    protected WebViewChromiumFactoryProviderForO(android.webkit.WebViewDelegate delegate) &#123;</span><br><span class=\"line\">        super(delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>LOL，可是，你以为真的很简单吗？其实不然，实现在父类，跟进父类。这个时候千万保持清醒，别跟丢了哦。我们想要的是Provider的创建过程，这个是Provider工厂类的真正类型，由它完成WebViewProvider的创建。</p>\n<p>如果你已经忘了，我们再来回顾一下刚刚创建WebViewProvider的代码，别走神，看这里：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureProviderCreated() &#123;</span><br><span class=\"line\">      checkThread();</span><br><span class=\"line\">      if (mProvider == null) &#123;</span><br><span class=\"line\">          // As this can get called during the base class constructor chain, pass the minimum</span><br><span class=\"line\">          // number of dependencies here; the rest are deferred to init().</span><br><span class=\"line\">          mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到了吗？这里拿到工厂类之后，调用了createWebView方法创建了Provider对象。那好办了，我们在<code>WebViewChromiumFactoryProviderForO</code>的父类<code>WebViewChromiumFactoryProvider</code>直接搜索<code>createWebView</code>方法即可。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) &#123;</span><br><span class=\"line\">        return new WebViewChromium(this, webView, privateAccess, mShouldDisableThreadChecking);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>怎么样，这段代码熟悉吗？这里直接返回了一个WebViewChromium对象，也就是说，WebView的所有操作，都由WebViewChromium帮忙完成。好吧，我们继续跟进这个类。可是跟进这个类做什么呢？哈哈，忘了吧，我们的目的是寻找<code>addJavascriptInterface</code>实现。稍等，容我先擦一把汗。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">  public void addJavascriptInterface(final Object obj, final String interfaceName) &#123;</span><br><span class=\"line\">      if (checkNeedsPost()) &#123;</span><br><span class=\"line\">          mFactory.addTask(new Runnable() &#123;</span><br><span class=\"line\">              @Override</span><br><span class=\"line\">              public void run() &#123;</span><br><span class=\"line\">                  addJavascriptInterface(obj, interfaceName);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mAwContents.addJavascriptInterface(obj, interfaceName);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>稍微瞅一眼这个方法<code>checkNeedsPost</code><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected boolean checkNeedsPost() &#123;</span><br><span class=\"line\">       boolean needsPost = !mFactory.hasStarted() || !ThreadUtils.runningOnUiThread();</span><br><span class=\"line\">       if (!needsPost &amp;&amp; mAwContents == null) &#123;</span><br><span class=\"line\">           throw new IllegalStateException(&quot;AwContents must be created if we are not posting!&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return needsPost;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单理解一下，如果已经启动或者调用该方法的线程不在UI线程，则需要post到UI线程中去，这里很明显，我们的调用是在UI线程中。因此，我们之间走下面的分支: <code>mAwContents.addJavascriptInterface(obj, interfaceName);</code>。那么，问题来了，AwContent又是什么鬼？在哪里创建的呢？</p>\n<p>仔细查找这个类，我们发现AwContent是在initForReal方法中被创建的。而initForReal调用来自init方法。可是，init方法是在哪里调用的呢？答案是：WebView。看下面的截图：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-d2adacd680391f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>OK，继续往下，看AwContent是怎么创建的。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initForReal() &#123;</span><br><span class=\"line\">       AwContentsStatics.setRecordFullDocument(sRecordWholeDocumentEnabledByApi</span><br><span class=\"line\">               || mAppTargetSdkVersion &lt; Build.VERSION_CODES.LOLLIPOP);</span><br><span class=\"line\">       mAwContents = new AwContents(mFactory.getBrowserContextOnUiThread(), mWebView, mContext,</span><br><span class=\"line\">               new InternalAccessAdapter(), new WebViewNativeDrawGLFunctorFactory(),</span><br><span class=\"line\">               mContentsClientAdapter, mWebSettings.getAwSettings(),</span><br><span class=\"line\">               new AwContents.DependencyFactory() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public AutofillProvider createAutofillProvider(</span><br><span class=\"line\">                           Context context, ViewGroup containerView) &#123;</span><br><span class=\"line\">                       return mFactory.createAutofillProvider(context, mWebView);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">       if (mAppTargetSdkVersion &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">           // On KK and above, favicons are automatically downloaded as the method</span><br><span class=\"line\">           // old apps use to enable that behavior is deprecated.</span><br><span class=\"line\">           AwContents.setShouldDownloadFavicons();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (mAppTargetSdkVersion &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">           // Prior to Lollipop, JavaScript objects injected via addJavascriptInterface</span><br><span class=\"line\">           // were not inspectable.</span><br><span class=\"line\">           mAwContents.disableJavascriptInterfacesInspection();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       // TODO: This assumes AwContents ignores second Paint param.</span><br><span class=\"line\">       mAwContents.setLayerType(mWebView.getLayerType(), null);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是一些版本兼容判断，与本文探讨主题无关，先忽略。好了，看到这里，大家是不是感觉被安卓源码忽悠的团团转，最开始我们天真地以为真正的调用来自WebView，安卓系统告诉我们来自WebViewProvider，我们以为这应该就是头了。可是现在又出现了一个AwContent。那么，它是不是真正的最终调用者呢？继续往下看：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * @see ContentViewCore#addPossiblyUnsafeJavascriptInterface(Object, String, Class)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressLint(&quot;NewApi&quot;)  // JavascriptInterface requires API level 17.</span><br><span class=\"line\">    public void addJavascriptInterface(Object object, String name) &#123;</span><br><span class=\"line\">        if (TRACE) Log.i(TAG, &quot;%s addJavascriptInterface=%s&quot;, this, name);</span><br><span class=\"line\">        if (isDestroyedOrNoOperation(WARN)) return;</span><br><span class=\"line\">        Class&lt;? extends Annotation&gt; requiredAnnotation = null;</span><br><span class=\"line\">        if (mAppTargetSdkVersion &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class=\"line\">            requiredAnnotation = JavascriptInterface.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mContentViewCore.addPossiblyUnsafeJavascriptInterface(object, name, requiredAnnotation);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我擦，又来了一个调用对象<code>mContentViewCore</code>。Relax，继续往下看，看它的实现：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addPossiblyUnsafeJavascriptInterface(Object object, String name,</span><br><span class=\"line\">        Class&lt;? extends Annotation&gt; requiredAnnotation) &#123;</span><br><span class=\"line\">    if (mNativeContentViewCore != 0 &amp;&amp; object != null) &#123;</span><br><span class=\"line\">        mJavaScriptInterfaces.put(name, object);</span><br><span class=\"line\">        nativeAddJavascriptInterface(mNativeContentViewCore, object, name, requiredAnnotation,</span><br><span class=\"line\">                mRetainedJavaScriptObjects);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看方法名，nativeAddJavascriptInterface看起来最终调用来自于Native，继续往下看：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private native void nativeAddJavascriptInterface(int nativeContentViewCoreImpl, Object object,</span><br><span class=\"line\">         String name, Class requiredAnnotation, HashSet&lt;Object&gt; retainedObjectSet);</span><br></pre></td></tr></table></figure></p>\n<p>接下来看C++代码，这里的中间调用过程没有深究，但最终应该是来到了这里：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void AddJavascriptInterface(JNIEnv *env, jobject obj, jint nativeFramePointer,</span><br><span class=\"line\">        jobject javascriptObj, jstring interfaceName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef ANDROID_INSTRUMENT</span><br><span class=\"line\">    TimeCounterAuto counter(TimeCounter::NativeCallbackTimeCounter);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    WebCore::Frame* pFrame = 0;</span><br><span class=\"line\">    if (nativeFramePointer == 0)</span><br><span class=\"line\">        pFrame = GET_NATIVE_FRAME(env, obj);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pFrame = (WebCore::Frame*)nativeFramePointer;</span><br><span class=\"line\">    LOG_ASSERT(pFrame, &quot;nativeAddJavascriptInterface must take a valid frame pointer!&quot;);</span><br><span class=\"line\">    JavaVM* vm;</span><br><span class=\"line\">    env-&gt;GetJavaVM(&amp;vm);</span><br><span class=\"line\">    LOGV(&quot;::WebCore:: addJSInterface: %p&quot;, pFrame);</span><br><span class=\"line\">#if USE(JSC)</span><br><span class=\"line\">    // Copied from qwebframe.cpp</span><br><span class=\"line\">    JSC::JSLock lock(false);</span><br><span class=\"line\">    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);</span><br><span class=\"line\">    if (window) &#123;</span><br><span class=\"line\">        JSC::Bindings::RootObject *root = pFrame-&gt;script()-&gt;bindingRootObject();</span><br><span class=\"line\">        JSC::Bindings::setJavaVM(vm);</span><br><span class=\"line\">        // Add the binding to JS environment</span><br><span class=\"line\">        JSC::ExecState* exec = window-&gt;globalExec();</span><br><span class=\"line\">        JSC::JSObject *addedObject = WeakJavaInstance::create(javascriptObj,</span><br><span class=\"line\">                root)-&gt;createRuntimeObject(exec);</span><br><span class=\"line\">        const jchar* s = env-&gt;GetStringChars(interfaceName, NULL);</span><br><span class=\"line\">        if (s) &#123;</span><br><span class=\"line\">            // Add the binding name to the window&apos;s table of child objects.</span><br><span class=\"line\">            JSC::PutPropertySlot slot;</span><br><span class=\"line\">            window-&gt;put(exec, JSC::Identifier(exec, (const UChar *)s, </span><br><span class=\"line\">                    env-&gt;GetStringLength(interfaceName)), addedObject, slot);</span><br><span class=\"line\">            env-&gt;ReleaseStringChars(interfaceName, s);</span><br><span class=\"line\">            checkException(env);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif  // USE(JSC)</span><br><span class=\"line\">#if USE(V8)</span><br><span class=\"line\">    if (pFrame) &#123;</span><br><span class=\"line\">        const char* name = JSC::Bindings::getCharactersFromJStringInEnv(env, interfaceName);</span><br><span class=\"line\">        NPObject* obj = JSC::Bindings::JavaInstanceToNPObject(new JSC::Bindings::JavaInstance(javascriptObj));</span><br><span class=\"line\">        pFrame-&gt;script()-&gt;bindToWindowObject(pFrame, name, obj);</span><br><span class=\"line\">        // JavaInstanceToNPObject calls NPN_RetainObject on the</span><br><span class=\"line\">        // returned one (see CreateV8ObjectForNPObject in V8NPObject.cpp).</span><br><span class=\"line\">        // BindToWindowObject also increases obj&apos;s ref count and decrease</span><br><span class=\"line\">        // the ref count when the object is not reachable from JavaScript</span><br><span class=\"line\">        // side. Code here must release the reference count increased by</span><br><span class=\"line\">        // JavaInstanceToNPObject.</span><br><span class=\"line\">        _NPN_ReleaseObject(obj);</span><br><span class=\"line\">        JSC::Bindings::releaseCharactersForJString(interfaceName, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的代码量较大，我们主要关注下面这一行代码：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window-&gt;put(exec, JSC::Identifier(exec, (const UChar *)s, </span><br><span class=\"line\">                   env-&gt;GetStringLength(interfaceName)), addedObject, slot);</span><br></pre></td></tr></table></figure></p>\n<p>最终数据的处理原来来自于C++端的window对象，这又是什么呢？继续看：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);</span><br></pre></td></tr></table></figure></p>\n<p>这是在WebCore命名空间下面的<code>JSDOMWindow</code>对象，看到这里，其实大多数同学应该已经都没有兴趣看下去了。这实在是一个冗长的调用过程，而且在阅读源码过程中，我们还忽略多进程调用，忽略各种细节。对此，关于这段源码的阅读，我们暂且告一段落，等时间充裕，我再来补充。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次的问题牵扯了移动端、Web前端和后台，这种跨平台的问题解决起来的确存在很大的困难。其实，我已经很长时间没有写JS了，仅仅在几个月前使用RN的时候有了解一些ES6的语法。凭借刚刚工作时仅有的2个月JS经验，加上在多方面知识的累积，总算顺利解决了问题。其实，根据我的经验来看，越是看起来无头绪的问题，往往越是一个极其简单的问题。为了避免出现这种问题，在编码过程中，必须小心翼翼。尽量多检查几次，避免出现类似这样的错误。另外，要尝试接受不一样的观点，如果你一开始就接受了其他人的观点，在解决问题上就会有很强的目的性，解决问题的速度也就更快。</p>\n<blockquote>\n<p>最后，新的一年里，祝大家万事如意，阖家欢乐，工作顺顺利利，身体健健康康。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>问题现象：使用安卓手机以小程序的形式分享产品到微信，使用微信打开，产品详情数据无法显示。而使用iPhone分享到微信，却始终可以正常打开，这个时候所有的矛头都指向了安卓同学。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-cdf26125f909ddcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小程序中打开，显示空白\"></p>\n<p>逻辑设计说明：这里的分享数据来自H5接口，通过<code>addJavascriptInterface</code>自定义接口完成H5和Java端的数据传递，产品ID来自后台接口获取。</p>\n<p>这个时候，安卓同学首先做出了响应，通过调试拿到了JS端的数据，以下是这位小陈同学的截图消息：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-bd7a8a062dfab805.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Android调试结果\"></p>\n<p>小陈同学这个时候把问题抛给了Web前端同学小徐，以为小徐传递了科学计数法的ID字符串。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4dcd326299b5e4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>大家看小陈同学的截图，图中的ID是使用字符串接收的，这个时候我已经完全排除问题出现在安卓端的可能性了。于是，我问小徐，H5有对参数进行处理吗？得到的答案如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-a28fd422fa316bcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>大家看到图中，我已经给出了确定的答案，认为问题来自于后台。因为，后台同学之前的确出现过对ID进行toInt处理最终转换为负数的情况。现在在传递时出现这种低级错误的概率应该也挺高的。这段话抛出去之后，团队炸开了锅，有同学认为大家在互相推诿…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-4ec531bb958ae6be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其实，还有很长的截图，这里没有展示出来。群里提到最多的一句话就是：<code>iOS没问题啊</code>。就连我们的运维同学以及UI设计同学都加入了“讨伐”队伍，种种迹象似乎都指向了安卓同学。这个时候，我们的安卓同学真是“哑巴吃黄连，有苦说不出”，心里的潜台词肯定是：我TM的就用<code>string</code>接收了一下，我招谁惹谁了我！</p>\n<p>但其实出现这种不知所踪的情况，完全可以理解，大家大都集中在单一平台开发，对于其它环节的理解难免有偏差。其实，用常识来理解这个问题的话，的确后台的概率比较大，前端同学对ID进行运算处理的概率几乎为0，这一点即使是刚刚入行的新手也不太可能。而我一直苦等的后台同学却迟迟没有响应，我目前始终无法确定问题到底来自于后台还是Web前端。直到我终于看到了下面的截图。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-fc7196333abaedbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这个时候，我终于有九成的把握确定问题来自于Web前端了。可是，我知道我不能明说。前端同学已经在聊天记录中给出了证据，在Chrome的控制台打印出了正常的id值，到了安卓端却出现了异常。前端同学这个时候心里也有了一个定性结论，问题来自安卓端。这个时候，我只能亲自上场，而恰好我在外面，正在办理深圳户口，比较不便。于是，我微信给小陈发消息，嘱咐它把详情页的源码“爬”下来，我回来看看源码。</p>\n<p>回到家的时候，我问小陈html源码是否已经“爬”了下来，他给我发来截图，我意识到前端使用了https协议，没法获取html源码。于是，我想了一个办法，在源码中嵌入一段代码，通过代码的形式获取WebView产品详情页的数据。这个方法果然奏效，不一会儿，小陈就发来了页面的html源码。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-de788a95449192ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>哎哟，我的天哪！混淆后的代码简直不堪入目，不过还好，我可以搜索方法关键字<code>showShareView</code>。可是，很遗憾没有搜索到，事件的绑定被放到了JS代码中。在这段源码中，我注意到一个文件名已经被混淆的JS文件，我猜想代码应该就在这里。可是，怎样抓到具体的方法呢？</p>\n<p>灵机一动！我之前在代码中让小陈把Debug权限开发给了H5，这次正好可以派上用场。可是，对于混淆后的代码，我心里依然有点打退堂鼓。</p>\n<p>连上手机，在Chrome浏览器中输入chrome://inpsect，点击相应链接，非常顺利地进入了调试界面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-753ad81eaaf2318d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在控制台的Source中，我通过关键词搜索找到了混淆后的JS代码片段，在方法名前面增加了一个断点，等调试到底方法位置的时候。这个时候已经获取到了JS的上下文，直接通过<code>this.gid</code>打印出了当前产品ID信息，居然是一个非常正常的整型数字。大家注意，这已经是一个在安卓端出问题的产品了，在JS端居然显示是正常的。这个时候，我的大脑非常转动，我的第一感觉应该是<code>webkit</code>内核看到接收的字符串全是数字做了”自以为是“的转换。于是，我给出了团队如下的答案：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-02b3c3a21e2b0569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>为了进一步确定我的猜想，我让小陈写了一个简单的Demo，通过JS接口传递一个非常大的数字字符串给Java端，看接收是否异常。不一会儿，我就得到了答案：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-64ba7132c99d0a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>至此，我终于基本确定问题的原因了！<br>猜测：JS在传递数据给安卓端的时候，应该是使用了基本数据类型。而<code>webkit</code>内核在处理的时候可能是以JS端数据类型为准，在传递到Java端时候做了转换。</p>\n<p>为了验证这个猜想，我使用<code>typeof</code>打印id的数据类型，得到了如下结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-7615a576bf35a125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>于是，我告诉小徐，问题来自于你没有传递正确的数据类型给安卓端。其实这是比较危险的，不同CPU可以容纳的最大整型值是不一样的。如果iOS端和安卓处理一致，也是以JS端数据类型为准，只不过iOS的CPU字节宽度较大，恰好在iPhone高端机型上面没有出现而低端机型出现的话。其实问题依然存在，而如果iOS的确是以Native端数据类型为准。这就根本不是一个问题。但答案虽然给了团队，可是小徐仍然一脸狐疑，没有经验的CTO也是跟着一脸狐疑，加上解决问题的时间较长。小徐在发布更新的时候也遇到了问题，导致更新失败，问题持续，整个问题一直在持续。</p>\n<p>这个时候，我告诉小徐，你发布更新后先别着急，确定更新成功后再告诉团队小伙伴。</p>\n<p>一直到确定更新成功，我们再次尝试分享，问题终于引刃而解！</p>\n<blockquote>\n<p>问题虽然解决了，可是，安卓系统为什么要这样处理呢？为什么不能以Native端数据类型为准呢？带着这个疑问，我开始查看安卓源码。</p>\n</blockquote>\n<p>阅读安卓源码是一个痛苦的过程，随着系统版本的升级，安卓系统的兼容性代码越来越多，这给阅读带来了极大的困难。加上安卓系统本身源码量巨大，阅读源码就像在一个巨大的森林中寻找宝藏一样。这个时候，其实你非常容易迷路，而我知道，只要我坚信我想要什么，就一定可以找到。</p>\n<p>这里我们以<code>addJavascriptInterface</code>这个方法作为突破口，进入源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addJavascriptInterface(Object object, String name) &#123;</span><br><span class=\"line\">       checkThread();</span><br><span class=\"line\">       mProvider.addJavascriptInterface(object, name);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>额，mProvider是什么鬼？难道WebView只是一个傀儡，真正处理业务的其实是mProvider？是的，没错！WebView只不过是一个壳而已！可是，mProvider的实现到底是什么呢？带着这个疑问，我们看到了如下mProvider实例创建的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureProviderCreated() &#123;</span><br><span class=\"line\">      checkThread();</span><br><span class=\"line\">      if (mProvider == null) &#123;</span><br><span class=\"line\">          // As this can get called during the base class constructor chain, pass the minimum</span><br><span class=\"line\">          // number of dependencies here; the rest are deferred to init().</span><br><span class=\"line\">          mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static WebViewFactoryProvider getFactory() &#123;</span><br><span class=\"line\">      return WebViewFactory.getProvider();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>又出现了一个工厂方法，别怕，继续往下追踪：<br>getProvider方法较长，我们截取部分，看下面源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static WebViewFactoryProvider getProvider() &#123;</span><br><span class=\"line\">        synchronized (sProviderLock) &#123;</span><br><span class=\"line\">            // For now the main purpose of this function (and the factory abstraction) is to keep</span><br><span class=\"line\">            // us honest and minimize usage of WebView internals when binding the proxy.</span><br><span class=\"line\">            if (sProviderInstance != null) return sProviderInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">            final int uid = android.os.Process.myUid();</span><br><span class=\"line\">            if (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID</span><br><span class=\"line\">                    || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID</span><br><span class=\"line\">                    || uid == android.os.Process.BLUETOOTH_UID) &#123;</span><br><span class=\"line\">                throw new UnsupportedOperationException(</span><br><span class=\"line\">                        &quot;For security reasons, WebView is not allowed in privileged processes&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();</span><br><span class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_WEBVIEW, &quot;WebViewFactory.getProvider()&quot;);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class=\"line\">                Method staticFactory = null;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    staticFactory = providerClass.getMethod(</span><br><span class=\"line\">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);</span><br><span class=\"line\">                &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                    if (DEBUG) &#123;</span><br><span class=\"line\">                        Log.w(LOGTAG, &quot;error instantiating provider with static factory method&quot;, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的单用户检测，安全调用之类的代码就先忽略了。集中注意力看Provider实例创建的代码，大家可以看到，这里的创建其实通过反射调用创建的。这里有一个关键的方法<code>getProviderClass()</code>，这个方法可能获取到真正的Provider类对象，跟踪这个方法调用，我们看到了如下的调用过程：<br><code>getProviderClass() -&gt; getWebViewProviderClass</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Class&lt;WebViewFactoryProvider&gt; getWebViewProviderClass(ClassLoader clazzLoader)</span><br><span class=\"line\">           throws ClassNotFoundException &#123;</span><br><span class=\"line\">       return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(CHROMIUM_WEBVIEW_FACTORY,</span><br><span class=\"line\">               true, clazzLoader);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>看到了吗？<code>CHROMIUM_WEBVIEW_FACTORY</code> 这才是真正的<code>WebViewFactoryProvider</code>类声明，跟进这个常量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String CHROMIUM_WEBVIEW_FACTORY = &quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForO&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>从命名ForO来看，这个类恰好是用于最新版本Android系统<code>Oreo</code>的。没错，这里我们就从最新版本的源码入手，找到真正的问题”元凶“。</p>\n<p>可是，这个代码在哪里呢？你搜索安卓源码，根本搜索不到该类，这是为什么呢？也许你已经猜到了，其实这段代码就来自于Chrome核心工程 <strong>chromium</strong>。这段代码，大家通过谷歌搜索找找看，这里我们以官方版本的代码为准：<br><a href=\"https://chromium.googlesource.com/chromium/src.git/+/28cc253ce347f9a58a0e7c6b7b249c239c4b2669/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java\" target=\"_blank\" rel=\"noopener\">WebViewChromiumFactoryProviderForO</a></p>\n<p>具体代码很简单，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.android.webview.chromium;</span><br><span class=\"line\">class WebViewChromiumFactoryProviderForO extends WebViewChromiumFactoryProvider &#123;</span><br><span class=\"line\">    public static WebViewChromiumFactoryProvider create(android.webkit.WebViewDelegate delegate) &#123;</span><br><span class=\"line\">        return new WebViewChromiumFactoryProviderForO(delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    protected WebViewChromiumFactoryProviderForO(android.webkit.WebViewDelegate delegate) &#123;</span><br><span class=\"line\">        super(delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>LOL，可是，你以为真的很简单吗？其实不然，实现在父类，跟进父类。这个时候千万保持清醒，别跟丢了哦。我们想要的是Provider的创建过程，这个是Provider工厂类的真正类型，由它完成WebViewProvider的创建。</p>\n<p>如果你已经忘了，我们再来回顾一下刚刚创建WebViewProvider的代码，别走神，看这里：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureProviderCreated() &#123;</span><br><span class=\"line\">      checkThread();</span><br><span class=\"line\">      if (mProvider == null) &#123;</span><br><span class=\"line\">          // As this can get called during the base class constructor chain, pass the minimum</span><br><span class=\"line\">          // number of dependencies here; the rest are deferred to init().</span><br><span class=\"line\">          mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到了吗？这里拿到工厂类之后，调用了createWebView方法创建了Provider对象。那好办了，我们在<code>WebViewChromiumFactoryProviderForO</code>的父类<code>WebViewChromiumFactoryProvider</code>直接搜索<code>createWebView</code>方法即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) &#123;</span><br><span class=\"line\">        return new WebViewChromium(this, webView, privateAccess, mShouldDisableThreadChecking);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>怎么样，这段代码熟悉吗？这里直接返回了一个WebViewChromium对象，也就是说，WebView的所有操作，都由WebViewChromium帮忙完成。好吧，我们继续跟进这个类。可是跟进这个类做什么呢？哈哈，忘了吧，我们的目的是寻找<code>addJavascriptInterface</code>实现。稍等，容我先擦一把汗。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">  public void addJavascriptInterface(final Object obj, final String interfaceName) &#123;</span><br><span class=\"line\">      if (checkNeedsPost()) &#123;</span><br><span class=\"line\">          mFactory.addTask(new Runnable() &#123;</span><br><span class=\"line\">              @Override</span><br><span class=\"line\">              public void run() &#123;</span><br><span class=\"line\">                  addJavascriptInterface(obj, interfaceName);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mAwContents.addJavascriptInterface(obj, interfaceName);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>稍微瞅一眼这个方法<code>checkNeedsPost</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected boolean checkNeedsPost() &#123;</span><br><span class=\"line\">       boolean needsPost = !mFactory.hasStarted() || !ThreadUtils.runningOnUiThread();</span><br><span class=\"line\">       if (!needsPost &amp;&amp; mAwContents == null) &#123;</span><br><span class=\"line\">           throw new IllegalStateException(&quot;AwContents must be created if we are not posting!&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return needsPost;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单理解一下，如果已经启动或者调用该方法的线程不在UI线程，则需要post到UI线程中去，这里很明显，我们的调用是在UI线程中。因此，我们之间走下面的分支: <code>mAwContents.addJavascriptInterface(obj, interfaceName);</code>。那么，问题来了，AwContent又是什么鬼？在哪里创建的呢？</p>\n<p>仔细查找这个类，我们发现AwContent是在initForReal方法中被创建的。而initForReal调用来自init方法。可是，init方法是在哪里调用的呢？答案是：WebView。看下面的截图：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-d2adacd680391f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>OK，继续往下，看AwContent是怎么创建的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initForReal() &#123;</span><br><span class=\"line\">       AwContentsStatics.setRecordFullDocument(sRecordWholeDocumentEnabledByApi</span><br><span class=\"line\">               || mAppTargetSdkVersion &lt; Build.VERSION_CODES.LOLLIPOP);</span><br><span class=\"line\">       mAwContents = new AwContents(mFactory.getBrowserContextOnUiThread(), mWebView, mContext,</span><br><span class=\"line\">               new InternalAccessAdapter(), new WebViewNativeDrawGLFunctorFactory(),</span><br><span class=\"line\">               mContentsClientAdapter, mWebSettings.getAwSettings(),</span><br><span class=\"line\">               new AwContents.DependencyFactory() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public AutofillProvider createAutofillProvider(</span><br><span class=\"line\">                           Context context, ViewGroup containerView) &#123;</span><br><span class=\"line\">                       return mFactory.createAutofillProvider(context, mWebView);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">       if (mAppTargetSdkVersion &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">           // On KK and above, favicons are automatically downloaded as the method</span><br><span class=\"line\">           // old apps use to enable that behavior is deprecated.</span><br><span class=\"line\">           AwContents.setShouldDownloadFavicons();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (mAppTargetSdkVersion &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">           // Prior to Lollipop, JavaScript objects injected via addJavascriptInterface</span><br><span class=\"line\">           // were not inspectable.</span><br><span class=\"line\">           mAwContents.disableJavascriptInterfacesInspection();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       // TODO: This assumes AwContents ignores second Paint param.</span><br><span class=\"line\">       mAwContents.setLayerType(mWebView.getLayerType(), null);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是一些版本兼容判断，与本文探讨主题无关，先忽略。好了，看到这里，大家是不是感觉被安卓源码忽悠的团团转，最开始我们天真地以为真正的调用来自WebView，安卓系统告诉我们来自WebViewProvider，我们以为这应该就是头了。可是现在又出现了一个AwContent。那么，它是不是真正的最终调用者呢？继续往下看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * @see ContentViewCore#addPossiblyUnsafeJavascriptInterface(Object, String, Class)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressLint(&quot;NewApi&quot;)  // JavascriptInterface requires API level 17.</span><br><span class=\"line\">    public void addJavascriptInterface(Object object, String name) &#123;</span><br><span class=\"line\">        if (TRACE) Log.i(TAG, &quot;%s addJavascriptInterface=%s&quot;, this, name);</span><br><span class=\"line\">        if (isDestroyedOrNoOperation(WARN)) return;</span><br><span class=\"line\">        Class&lt;? extends Annotation&gt; requiredAnnotation = null;</span><br><span class=\"line\">        if (mAppTargetSdkVersion &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class=\"line\">            requiredAnnotation = JavascriptInterface.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mContentViewCore.addPossiblyUnsafeJavascriptInterface(object, name, requiredAnnotation);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我擦，又来了一个调用对象<code>mContentViewCore</code>。Relax，继续往下看，看它的实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addPossiblyUnsafeJavascriptInterface(Object object, String name,</span><br><span class=\"line\">        Class&lt;? extends Annotation&gt; requiredAnnotation) &#123;</span><br><span class=\"line\">    if (mNativeContentViewCore != 0 &amp;&amp; object != null) &#123;</span><br><span class=\"line\">        mJavaScriptInterfaces.put(name, object);</span><br><span class=\"line\">        nativeAddJavascriptInterface(mNativeContentViewCore, object, name, requiredAnnotation,</span><br><span class=\"line\">                mRetainedJavaScriptObjects);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看方法名，nativeAddJavascriptInterface看起来最终调用来自于Native，继续往下看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private native void nativeAddJavascriptInterface(int nativeContentViewCoreImpl, Object object,</span><br><span class=\"line\">         String name, Class requiredAnnotation, HashSet&lt;Object&gt; retainedObjectSet);</span><br></pre></td></tr></table></figure></p>\n<p>接下来看C++代码，这里的中间调用过程没有深究，但最终应该是来到了这里：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void AddJavascriptInterface(JNIEnv *env, jobject obj, jint nativeFramePointer,</span><br><span class=\"line\">        jobject javascriptObj, jstring interfaceName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef ANDROID_INSTRUMENT</span><br><span class=\"line\">    TimeCounterAuto counter(TimeCounter::NativeCallbackTimeCounter);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    WebCore::Frame* pFrame = 0;</span><br><span class=\"line\">    if (nativeFramePointer == 0)</span><br><span class=\"line\">        pFrame = GET_NATIVE_FRAME(env, obj);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pFrame = (WebCore::Frame*)nativeFramePointer;</span><br><span class=\"line\">    LOG_ASSERT(pFrame, &quot;nativeAddJavascriptInterface must take a valid frame pointer!&quot;);</span><br><span class=\"line\">    JavaVM* vm;</span><br><span class=\"line\">    env-&gt;GetJavaVM(&amp;vm);</span><br><span class=\"line\">    LOGV(&quot;::WebCore:: addJSInterface: %p&quot;, pFrame);</span><br><span class=\"line\">#if USE(JSC)</span><br><span class=\"line\">    // Copied from qwebframe.cpp</span><br><span class=\"line\">    JSC::JSLock lock(false);</span><br><span class=\"line\">    WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);</span><br><span class=\"line\">    if (window) &#123;</span><br><span class=\"line\">        JSC::Bindings::RootObject *root = pFrame-&gt;script()-&gt;bindingRootObject();</span><br><span class=\"line\">        JSC::Bindings::setJavaVM(vm);</span><br><span class=\"line\">        // Add the binding to JS environment</span><br><span class=\"line\">        JSC::ExecState* exec = window-&gt;globalExec();</span><br><span class=\"line\">        JSC::JSObject *addedObject = WeakJavaInstance::create(javascriptObj,</span><br><span class=\"line\">                root)-&gt;createRuntimeObject(exec);</span><br><span class=\"line\">        const jchar* s = env-&gt;GetStringChars(interfaceName, NULL);</span><br><span class=\"line\">        if (s) &#123;</span><br><span class=\"line\">            // Add the binding name to the window&apos;s table of child objects.</span><br><span class=\"line\">            JSC::PutPropertySlot slot;</span><br><span class=\"line\">            window-&gt;put(exec, JSC::Identifier(exec, (const UChar *)s, </span><br><span class=\"line\">                    env-&gt;GetStringLength(interfaceName)), addedObject, slot);</span><br><span class=\"line\">            env-&gt;ReleaseStringChars(interfaceName, s);</span><br><span class=\"line\">            checkException(env);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif  // USE(JSC)</span><br><span class=\"line\">#if USE(V8)</span><br><span class=\"line\">    if (pFrame) &#123;</span><br><span class=\"line\">        const char* name = JSC::Bindings::getCharactersFromJStringInEnv(env, interfaceName);</span><br><span class=\"line\">        NPObject* obj = JSC::Bindings::JavaInstanceToNPObject(new JSC::Bindings::JavaInstance(javascriptObj));</span><br><span class=\"line\">        pFrame-&gt;script()-&gt;bindToWindowObject(pFrame, name, obj);</span><br><span class=\"line\">        // JavaInstanceToNPObject calls NPN_RetainObject on the</span><br><span class=\"line\">        // returned one (see CreateV8ObjectForNPObject in V8NPObject.cpp).</span><br><span class=\"line\">        // BindToWindowObject also increases obj&apos;s ref count and decrease</span><br><span class=\"line\">        // the ref count when the object is not reachable from JavaScript</span><br><span class=\"line\">        // side. Code here must release the reference count increased by</span><br><span class=\"line\">        // JavaInstanceToNPObject.</span><br><span class=\"line\">        _NPN_ReleaseObject(obj);</span><br><span class=\"line\">        JSC::Bindings::releaseCharactersForJString(interfaceName, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的代码量较大，我们主要关注下面这一行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window-&gt;put(exec, JSC::Identifier(exec, (const UChar *)s, </span><br><span class=\"line\">                   env-&gt;GetStringLength(interfaceName)), addedObject, slot);</span><br></pre></td></tr></table></figure></p>\n<p>最终数据的处理原来来自于C++端的window对象，这又是什么呢？继续看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebCore::JSDOMWindow *window = WebCore::toJSDOMWindow(pFrame);</span><br></pre></td></tr></table></figure></p>\n<p>这是在WebCore命名空间下面的<code>JSDOMWindow</code>对象，看到这里，其实大多数同学应该已经都没有兴趣看下去了。这实在是一个冗长的调用过程，而且在阅读源码过程中，我们还忽略多进程调用，忽略各种细节。对此，关于这段源码的阅读，我们暂且告一段落，等时间充裕，我再来补充。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次的问题牵扯了移动端、Web前端和后台，这种跨平台的问题解决起来的确存在很大的困难。其实，我已经很长时间没有写JS了，仅仅在几个月前使用RN的时候有了解一些ES6的语法。凭借刚刚工作时仅有的2个月JS经验，加上在多方面知识的累积，总算顺利解决了问题。其实，根据我的经验来看，越是看起来无头绪的问题，往往越是一个极其简单的问题。为了避免出现这种问题，在编码过程中，必须小心翼翼。尽量多检查几次，避免出现类似这样的错误。另外，要尝试接受不一样的观点，如果你一开始就接受了其他人的观点，在解决问题上就会有很强的目的性，解决问题的速度也就更快。</p>\n<blockquote>\n<p>最后，新的一年里，祝大家万事如意，阖家欢乐，工作顺顺利利，身体健健康康。</p>\n</blockquote>\n"},{"title":"Kotlin 操作符重载及中缀调用","date":"2018-02-06T03:39:00.000Z","_content":"\n![](http://upload-images.jianshu.io/upload_images/703764-0baf2dcfb0baa84f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>操作符重载其实很有意思！但这个概念却很少有人知道，使用操作符重载在某种程度上会给代码的阅读带来一定的麻烦。因此，慎用操作符被认为是一个好习惯。的确，操作符重载是一把双刃剑，既能削铁如泥，也能“引火烧身”，这篇文章将从实用的角度来讲解操作符重载的基本用法。\n\n# 支持重载的操作符类型\nKotlin语言支持重载的操作符类型比较多。以最新版本**1.2.21**为准，目前支持重载的操作符可以归纳为以下几类：\n# 一元操作符\n#### 一元前缀操作符\n操作符|对应方法\n:---:|:---:\n+a|a.unaryPlus()\n-a|a.unaryMinus()\n!a|a.not()\n\n以上三个操作符在日常使用中频率很高，第一个操作符在基本运算中很少使用，第二个操作符就是常见的取反操作，第三个操作符是逻辑取反操作。接下来，我们使用扩展的方式重载这三个操作符：\n```\n/**\n * 一元操作符\n *\n * @author Scott Smith 2018-02-03 14:11\n */\ndata class Number(var value: Int)\n\n/**\n * 重载一元操作符+，使其对Number中实际数据取绝对值\n */\noperator fun Number.unaryPlus(): Number {\n    this.value = Math.abs(value)\n    return this\n}\n\n/**\n * 重载一元操作符-，使其对Number中实际数据取反\n */\noperator fun Number.unaryMinus(): Number {\n    this.value = -value\n    return this\n}\n\n/**\n * 这个操作符通常是用于逻辑取反，这里用一个没有意义的操作，来模拟重载这个操作符\n * 结果：始终返回Number中实际数据的负值\n */\noperator fun Number.not(): Number {\n    this.value = -Math.abs(value)\n    return this\n}\n\nfun main(args: Array<String>) {\n    val number = Number(-3)\n    println(\"Number value = ${number.value}\")\n    println(\"After unaryPlus: Number value = ${(+number).value}\")\n    println(\"After unaryMinus: Number value = ${(-number).value}\")\n\n    number.value = Math.abs(number.value)\n    println(\"After unaryNot: Number value = ${(!number).value}\")\n}\n```\n运行上述代码，将得到如下结果：\n```\nNumber value = -3\nAfter unaryPlus: Number value = 3\nAfter unaryMinus: Number value = -3\nAfter unaryNot: Number value = -3\n```\n#### 自增和自减操作符\n操作符|对应方法\n:---:|:---:\na++/++a|a.inc()\na--/--a|a.dec()\n\n重载这个操作符相对比较难理解，官方文档有一段简短的文字解释，翻译成代码可以这样表示：\n```\n// a++\nfun increment(a: Int): Int {\n  val a0 = a\n  a = a + 1\n  return a0\n}\n\n// ++a\nfun increment(a: Int): Int {\n  a = a + 1\n  return a\n}\n```\n看懂上面的代码后，我们换成需要重载的`Number`类，Kotlin最终会这样处理：\n```\n// Number++\nfun increment(number: Number): Number {\n  val temp = number\n  val result = number.inc()\n  return result\n}\n\n// Number++\nfun increment(number: Number): Number {\n  return number.inc()\n}\n```\n因此，重载`Number`类自加操作符，我们可以这样做：\n```\noperator fun Number.inc(): Number {\n    return Number(this.value + 1)\n}\n```\n重载自减操作符同理，完整代码请参考我的Git版本库：[kotlin-samples](https://github.com/yuanhoujun/kotlin-samples)\n\n# 二元操作符\n#### 算术运算符\n操作符|对应方法\n:---:|:---:\na + b|a.plus(b)\na - b|a.minus(b)\na * b|a.times(b)\na / b|a.div(b)\na % b|a.rem(b)\na..b|a.rangeTo(b)\n\n前5个操作符相对比较好理解，我们以`a + b`为例，举个一个简单的例子：\n```\n// 重载Number类的加法运算符\noperator fun Number.plus(value: Int): Number {\n    return Number(this.value + value)\n}\n\nfun main(args: Array<String>) {\n       println((Number(1) + 2))\n}\n// 输出结果：\nNumber value = 3\n```\n相对比较难理解的是第六个范围运算符，这个操作符主要用于生成一段数据范围。我们认为`Number`本身就代表一个整型数字，因此，重载`Number`是一件有意义的事情。直接看例子：\n```\noperator fun Number.rangeTo(to: Number): IntRange {\n    return this.value..to.value\n}\n\nfun main(args: Array<String>) {\n    val startNumber = Number(3)\n    val endNumber = Number(9)\n\n    (startNumber..endNumber).forEach {\n        println(\"value = $it\")\n    }\n}\n\n// 运行结果：\nvalue = 3\nvalue = 4\nvalue = 5\nvalue = 6\nvalue = 7\nvalue = 8\nvalue = 9\n```\n#### “In”运算符\n操作符|对应方法\n:--:|:--:\na in b|b.contains(a)\na !in b|!b.contains(a)\n这个操作符相对比较好理解，重载这个操作符可以用于判断某个数据是否在另外一个对象中。我们用一个非常简单的自定义类来模拟集合操作：\n```\nclass IntCollection { \n    val intList = ArrayList<Int>()\n}\n\n// 重载\"in\"操作符\noperator fun IntCollection.contains(value: Int): Boolean {\n    return this.intList.contains(value)\n}\n\nfun main(args: Array<String>) {\n    val intCollection = IntCollection()\n    intCollection.add(1, 2, 3)\n    println(3 in intCollection)\n}\n\n// 输出结果：\ntrue\n```\n#### 索引访问运算符\n操作符|对应方法\n:---:|:---:\na[i]|a.get(i)\na[i, j]|a.get(i, j)\na[i_1, ..., i_n]|a.get(i_1, ..., i_n)\na[i] = b|a.set(i, b)\na[i, j] = b|a.set(i, j, b)\na[i_1, ..., i_n] = b|a.set(i_1, ..., i_n, b)\n\n这个操作符很有意思，例如，如果你要访问Map中某个数据，通常是这样的`map.get(\"key\")`，使用索引运算符你还可以这样操作：\n```\nval value = map[\"key\"]\n```\n我们继续以`IntCollection`类为例，尝试重写`a[i]`和`a[i] = b`两个运算符，其它运算符同理。\n```\n// 重载a[i]操作符\noperator fun IntCollection.get(index: Int): Int {\n    return intList[index]\n}\n\n// 重载a[i] = b操作符\noperator fun IntCollection.set(index: Int, value: Int) {\n    intList[index] = value\n}\n\nfun main(args: Array<String>) {\n    val intCollection = IntCollection()\n    intCollection.add(1, 2, 3)\n    println(intCollection[0])\n\n    intCollection[2] = 4\n    print(intCollection[2])\n}\n```\n接下来，我们用索引运算符来做一点更有意思的事情！新建一个普通的`Kotlin`类`User`：\n```\nclass User(var name: String,\n           var age: Int) {\n\n}\n```\n使用下面的方式重载索引运算符：\n```\noperator fun User.get(key: String): Any? {\n    when(key) {\n        \"name\" -> {\n            return this.name\n        }\n        \"age\" -> {\n            return this.age\n        }\n    }\n\n    return null\n}\n\noperator fun User.set(key: String, value:Any?) {\n    when(key) {\n        \"name\" -> {\n            name = value as? String\n        }\n        \"age\" -> {\n            age = value as? Int\n        }\n    }\n}\n```\n接下来，你会神奇地发现，一个普通的`Kotlin`类居然也可以使用索引运算符对成员变量进行操作了，是不是很神奇？\n```\nfun main(args: Array<String>) {\n    val user = User(\"Scott Smith\", 18)\n    println(user[\"name\"])\n    user[\"age\"] = 22\n    println(user[\"age\"])\n}\n```\n因此，索引运算符不仅仅可以对集合类数据进行操作，对一个普通的`Kotlin`类也可以发挥同样的作用。如果你脑洞足够大，你还可以发现更多更神奇的玩法。\n\n#### 调用操作符\n操作符|对应方法\n:---:|:---:\na()|a.invoke()\na(i)|\ta.invoke(i)\na(i, j)|\ta.invoke(i, j)\na(i_1, ……, i_n)|\ta.invoke(i_1, ……, i_n)\n\n重载这个操作符并不难，理解它的应用场景却有一定的难度。为了理解它的应用场景，我们来举一个简单的例子：\n```\nclass JsonParser {\n\n}\n\noperator fun JsonParser.invoke(json: String): Map<String, Any> {\n    val map = Json.parse(json)\n    ...\n    return map\n}\n\n// 可以这样调用\nval parser = JsonParser()\nval map = parser(\"{name: \\\"Scott Smith\\\"}\")\n```\n这里的调用有点像省略了一个解析Json数据的方法，难道它仅仅就是这个作用吗？是的，调用操作符其实就这一个作用。如果一个Kotlin类仅仅只有一个方法，直接使用括号调用的确是一个不错的主意。不过，在使用的时候还是要稍微注意一下，避免出现歧义。\n\n#### 广义赋值操作符\n操作符|对应方法\n:---:|:---:\na += b|a.plusAssign(b)\na -= b|a.minusAssign(b)\na *= b|a.timesAssign(b)\na /= b|a.divAssign(b)\na %= b|a.remAssign(b)\n\n这个操作符相对比较好理解，我们以`Number`类为例，举一个简单的例子：\n```\n// 广义赋值运算符\noperator fun Number.plusAssign(value: Int) {\n    this.value += value\n}\n\nfun main(args: Array<String>) {\n    val number = Number(1)\n    number += 2\n    println(number)\n}\n\n// 输出结果：\nNumber value = 3\n```\n\n#### 相等与不等操作符\n操作符|对应方法\n:---:|:---:\na == b|a?.equals(b) ?: (b === null)\na != b|!(a?.equals(b) ?: (b === null))\n\n重载这个操作符与Java重写equals方法是一样的。不过，这里要注意与Java的区别，在Java端`==`用于判断两个对象是否是同一对象（指针级别）。而在Kotlin语言中，如果我们不做任何处理，`==`等同于使用Java对象的`equals`方法判断两个对象是否相等。\n\n另外，这里还有一种特殊情况，如果左值等于null，这个时候`a?.equals(b)`将返回null值。因此，这里还增加了`?:`运算符用于进一步判断，在这个情况下，当且仅当b === null的时候，a、b才有可能相等。因此，才有了上面的对应关系，这里以`User`类为例举一个简单的例子：\n```\nclass User(var name: String?,\n           var age: Int?) {\n\n    operator override fun equals(other: Any?): Boolean {\n        if(other is User) {\n            return (this.name == other.name) && (this.age == other.age)\n        }\n        return false\n    }\n}\n```\n注意：这里有一个特殊的地方，与其它操作符不一样的地方是，如果使用扩展的方式尝试重载该操作符，将会报错。因此，如果要重载该操作符，一定要在类中进行重写。\n\n#### 比较操作符\n操作符|对应方法\n:---:|:---:\na > b|a.compareTo(b) > 0\na < b|a.compareTo(b) < 0\na >= b|a.compareTo(b) >= 0\na <= b|a.compareTo(b) <= 0\n\n比较操作符是一个在日常使用中频率非常高的操作符，重载这个操作符只需要掌握以上表格中几个规则即可。我们以`Number`类为例举一个简单的例子：\n```\noperator fun Number.compareTo(number: Number): Int {\n    return this.value - number.value\n}\n```\n\n#### 属性委托操作符\n**属性委托操作符**是一种非常特殊的操作符，其主要用在代理属性中。关于Kotlin代理的知识，如果你还不了解的话，请参考这篇文章\n [Delegation](https://www.jianshu.com/p/54a57aac11e6)。这篇文章介绍的相对简略，后面会出一篇更详细的文章介绍代理相关的知识。\n\n#### 中缀调用\n看到这里，可能有一些追求更高级玩法的同学会问：Kotlin支持自定义操作符吗？\n\n答案当然是：不能！不过，别失望，`infix`也许适合你，它其实可以看做一种自定义操作符的实现。这里我们对集合`List`新增一个扩展方法`intersection`用于获取两个集合的交集：\n```\n// 获取两个集合的交集\nfun <E> List<E>.interSection(other: List<E>): List<E> {\n    val result = ArrayList<E>()\n    forEach {\n        if(other.contains(it)) {\n            result.add(it)\n        }\n    }\n\n    return result\n}\n```\n接下来，我们就可以在`List`及其子类中使用点语法调用了。但，它看起来仍然不像一个操作符。为了让它更像一个操作符，我们继续做点事情：\n* 添加`infix`关键词\n* 将函数名修改为∩（这是数学上获取交集的标记符号）\n然而，万万没想到，修改完成后居然报错了。Kotlin并不允许直接使用特殊符号作为函数名开头。因此，我们取形近的字母`n`用于表示函数名：\n```\n// 获取两个集合的交集\ninfix fun <E> List<E>.n(other: List<E>): List<E> {\n    val result = ArrayList<E>()\n    forEach {\n        if(other.contains(it)) {\n            result.add(it)\n        }\n    }\n\n    return result\n}\n```\n接下来，我们就可以这样调用了`val interSection = list1 n list2`，怎么样？是不是很像自定义了一个获取交集的操作符`n`？如果你希望自定义操作符，可以尝试这么做。\n\n其实`infix`的应用场景还不止这些，接下来，我们再用它完成一件更有意思的事情。\n\n在实际项目开发中，数据库数据到对象的处理是一件繁琐的过程，最麻烦的地方莫过于思维的转换。那我们是否可以在代码中直接使用SQL语句查询对象数据呢？例如这样：\n```\nval users = Select * from User where age > 18\n```\n\n纸上学来终觉浅，觉知此事需躬行。有了这个idea，接下来，我们就朝着这个目标努力。\n一、先声明一个`Sql`类，准备如下方法：\n```\n   infix fun select(columnBuilder: ColumnBuilder): Sql {\n   \n   infix fun from(entityClass: Class<*>): Sql \n\n   infix fun where(condition: String): Sql \n   \n   fun <T> query(): T \n```\n二、我们的目的是：最终转换到SQL语句形式。因此，增加如下实现：\n```\nclass ColumnBuilder(var columns: Array<out String>) {\n\n}\n\nclass Sql private constructor() {\n    var columns = emptyList<String>()\n    var entityClass: Class<*>? = null\n    var condition: String? = null\n\n    companion object {\n        fun get(): Sql {\n            return Sql()\n        }\n    }\n\n    infix fun select(columnBuilder: ColumnBuilder): Sql {\n        this.columns = columnBuilder.columns.asList()\n        return this\n    }\n\n    infix fun from(entityClass: Class<*>): Sql {\n        this.entityClass = entityClass\n        return this\n    }\n\n    infix fun where(condition: String): Sql {\n        this.condition = condition\n        return this\n    }\n\n    fun <T> query(): T {\n        // 此处省略所有条件判断\n        val sqlBuilder = StringBuilder(\"select \")\n\n        val columnBuilder = StringBuilder(\"\")\n        if(columns.size == 1 && columns[0] == \"*\") {\n            columnBuilder.append(\"*\")\n        } else {\n            columns.forEach {\n                columnBuilder.append(it).append(\",\")\n            }\n            columnBuilder.delete(columns.size - 1, columns.size)\n        }\n\n        val sql = sqlBuilder.append(columnBuilder.toString())\n                            .append(\" from ${entityClass?.simpleName} where \")\n                            .append(condition)\n                            .toString()\n        println(\"执行SQL查询：$sql\")\n\n        return execute(sql)\n    }\n\n    private fun <T> execute(sql: String): T {\n        // 仅仅用于测试\n        return Any() as T\n    }\n}\n```\n三、为了看起来更形似，再增加如下两个方法：\n```\n// 使其看起来像在数据库作用域中执行\nfun database(init: Sql.()->Unit) {\n    init.invoke(Sql.get())\n}\n\n// 因为infix限制，参数不能直接使用可变参数。因此，我们增加这个方法使参数组装看起来更自然\nfun columns(vararg columns: String): ColumnBuilder {\n    return ColumnBuilder(columns)\n}\n```\n\n接下来，就是见证奇迹的时刻！\n```\nfun main(args: Array<String>) {\n    database {\n        (select (columns(\"*\")) from User::class.java where \"age > 18\").query()\n    }\n}\n\n// 输出结果：\n执行SQL查询：select * from User where age > 18\n```\n为了方便大家查看，我们提取完整执行代码段与SQL语句对比：\n```\nselect          *       from User             where  age > 18\nselect  (columns(\"*\"))  from User::class.java where \"age > 18\"\n```\n神奇吗？\n至此，我们就可以直接在代码中愉快地使用类似SQL语句的方式进行方法调用了。\n\n# 总结\n本篇文章从操作符重载实用的角度讲解了操作符重载的所有相关知识。如文章开头所说，操作符重载是一把双刃剑。用得好事半功倍，用不好事倍功半。因此，我给大家的建议是：使用的时候一定要保证能够自圆其说，简单来说，就是自然。我认为相对于古老的语言C++来说，Kotlin语言操作符重载的设计是非常棒的。如果你知道自己在做什么，我非常推荐你在生产环境中使用操作符重载来简化操作。\n\n本篇文章例子代码点这里：[kotlin-samples](https://github.com/yuanhoujun/kotlin-samples)\n\n---\n\n我是欧阳锋，一个热爱Kotlin语言编程的学生。如果你喜欢我的文章，请在文章下方留下你爱的印记。如果你不喜欢我的文章，请先喜欢上我的文章。然后再留下爱的印记！\n\n下次文章再见，拜拜！\n\n---\n","source":"_posts/kotlin/操作符重载及中缀调用.md","raw":"---\ntitle: Kotlin 操作符重载及中缀调用\ndate: 2018-02-06 11:39\ntags:\n- Kotlin\n- Android\n- 操作符\n- 重载\n- infix\ncategories:\n- Kotlin\n- 基础知识\n---\n\n![](http://upload-images.jianshu.io/upload_images/703764-0baf2dcfb0baa84f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>操作符重载其实很有意思！但这个概念却很少有人知道，使用操作符重载在某种程度上会给代码的阅读带来一定的麻烦。因此，慎用操作符被认为是一个好习惯。的确，操作符重载是一把双刃剑，既能削铁如泥，也能“引火烧身”，这篇文章将从实用的角度来讲解操作符重载的基本用法。\n\n# 支持重载的操作符类型\nKotlin语言支持重载的操作符类型比较多。以最新版本**1.2.21**为准，目前支持重载的操作符可以归纳为以下几类：\n# 一元操作符\n#### 一元前缀操作符\n操作符|对应方法\n:---:|:---:\n+a|a.unaryPlus()\n-a|a.unaryMinus()\n!a|a.not()\n\n以上三个操作符在日常使用中频率很高，第一个操作符在基本运算中很少使用，第二个操作符就是常见的取反操作，第三个操作符是逻辑取反操作。接下来，我们使用扩展的方式重载这三个操作符：\n```\n/**\n * 一元操作符\n *\n * @author Scott Smith 2018-02-03 14:11\n */\ndata class Number(var value: Int)\n\n/**\n * 重载一元操作符+，使其对Number中实际数据取绝对值\n */\noperator fun Number.unaryPlus(): Number {\n    this.value = Math.abs(value)\n    return this\n}\n\n/**\n * 重载一元操作符-，使其对Number中实际数据取反\n */\noperator fun Number.unaryMinus(): Number {\n    this.value = -value\n    return this\n}\n\n/**\n * 这个操作符通常是用于逻辑取反，这里用一个没有意义的操作，来模拟重载这个操作符\n * 结果：始终返回Number中实际数据的负值\n */\noperator fun Number.not(): Number {\n    this.value = -Math.abs(value)\n    return this\n}\n\nfun main(args: Array<String>) {\n    val number = Number(-3)\n    println(\"Number value = ${number.value}\")\n    println(\"After unaryPlus: Number value = ${(+number).value}\")\n    println(\"After unaryMinus: Number value = ${(-number).value}\")\n\n    number.value = Math.abs(number.value)\n    println(\"After unaryNot: Number value = ${(!number).value}\")\n}\n```\n运行上述代码，将得到如下结果：\n```\nNumber value = -3\nAfter unaryPlus: Number value = 3\nAfter unaryMinus: Number value = -3\nAfter unaryNot: Number value = -3\n```\n#### 自增和自减操作符\n操作符|对应方法\n:---:|:---:\na++/++a|a.inc()\na--/--a|a.dec()\n\n重载这个操作符相对比较难理解，官方文档有一段简短的文字解释，翻译成代码可以这样表示：\n```\n// a++\nfun increment(a: Int): Int {\n  val a0 = a\n  a = a + 1\n  return a0\n}\n\n// ++a\nfun increment(a: Int): Int {\n  a = a + 1\n  return a\n}\n```\n看懂上面的代码后，我们换成需要重载的`Number`类，Kotlin最终会这样处理：\n```\n// Number++\nfun increment(number: Number): Number {\n  val temp = number\n  val result = number.inc()\n  return result\n}\n\n// Number++\nfun increment(number: Number): Number {\n  return number.inc()\n}\n```\n因此，重载`Number`类自加操作符，我们可以这样做：\n```\noperator fun Number.inc(): Number {\n    return Number(this.value + 1)\n}\n```\n重载自减操作符同理，完整代码请参考我的Git版本库：[kotlin-samples](https://github.com/yuanhoujun/kotlin-samples)\n\n# 二元操作符\n#### 算术运算符\n操作符|对应方法\n:---:|:---:\na + b|a.plus(b)\na - b|a.minus(b)\na * b|a.times(b)\na / b|a.div(b)\na % b|a.rem(b)\na..b|a.rangeTo(b)\n\n前5个操作符相对比较好理解，我们以`a + b`为例，举个一个简单的例子：\n```\n// 重载Number类的加法运算符\noperator fun Number.plus(value: Int): Number {\n    return Number(this.value + value)\n}\n\nfun main(args: Array<String>) {\n       println((Number(1) + 2))\n}\n// 输出结果：\nNumber value = 3\n```\n相对比较难理解的是第六个范围运算符，这个操作符主要用于生成一段数据范围。我们认为`Number`本身就代表一个整型数字，因此，重载`Number`是一件有意义的事情。直接看例子：\n```\noperator fun Number.rangeTo(to: Number): IntRange {\n    return this.value..to.value\n}\n\nfun main(args: Array<String>) {\n    val startNumber = Number(3)\n    val endNumber = Number(9)\n\n    (startNumber..endNumber).forEach {\n        println(\"value = $it\")\n    }\n}\n\n// 运行结果：\nvalue = 3\nvalue = 4\nvalue = 5\nvalue = 6\nvalue = 7\nvalue = 8\nvalue = 9\n```\n#### “In”运算符\n操作符|对应方法\n:--:|:--:\na in b|b.contains(a)\na !in b|!b.contains(a)\n这个操作符相对比较好理解，重载这个操作符可以用于判断某个数据是否在另外一个对象中。我们用一个非常简单的自定义类来模拟集合操作：\n```\nclass IntCollection { \n    val intList = ArrayList<Int>()\n}\n\n// 重载\"in\"操作符\noperator fun IntCollection.contains(value: Int): Boolean {\n    return this.intList.contains(value)\n}\n\nfun main(args: Array<String>) {\n    val intCollection = IntCollection()\n    intCollection.add(1, 2, 3)\n    println(3 in intCollection)\n}\n\n// 输出结果：\ntrue\n```\n#### 索引访问运算符\n操作符|对应方法\n:---:|:---:\na[i]|a.get(i)\na[i, j]|a.get(i, j)\na[i_1, ..., i_n]|a.get(i_1, ..., i_n)\na[i] = b|a.set(i, b)\na[i, j] = b|a.set(i, j, b)\na[i_1, ..., i_n] = b|a.set(i_1, ..., i_n, b)\n\n这个操作符很有意思，例如，如果你要访问Map中某个数据，通常是这样的`map.get(\"key\")`，使用索引运算符你还可以这样操作：\n```\nval value = map[\"key\"]\n```\n我们继续以`IntCollection`类为例，尝试重写`a[i]`和`a[i] = b`两个运算符，其它运算符同理。\n```\n// 重载a[i]操作符\noperator fun IntCollection.get(index: Int): Int {\n    return intList[index]\n}\n\n// 重载a[i] = b操作符\noperator fun IntCollection.set(index: Int, value: Int) {\n    intList[index] = value\n}\n\nfun main(args: Array<String>) {\n    val intCollection = IntCollection()\n    intCollection.add(1, 2, 3)\n    println(intCollection[0])\n\n    intCollection[2] = 4\n    print(intCollection[2])\n}\n```\n接下来，我们用索引运算符来做一点更有意思的事情！新建一个普通的`Kotlin`类`User`：\n```\nclass User(var name: String,\n           var age: Int) {\n\n}\n```\n使用下面的方式重载索引运算符：\n```\noperator fun User.get(key: String): Any? {\n    when(key) {\n        \"name\" -> {\n            return this.name\n        }\n        \"age\" -> {\n            return this.age\n        }\n    }\n\n    return null\n}\n\noperator fun User.set(key: String, value:Any?) {\n    when(key) {\n        \"name\" -> {\n            name = value as? String\n        }\n        \"age\" -> {\n            age = value as? Int\n        }\n    }\n}\n```\n接下来，你会神奇地发现，一个普通的`Kotlin`类居然也可以使用索引运算符对成员变量进行操作了，是不是很神奇？\n```\nfun main(args: Array<String>) {\n    val user = User(\"Scott Smith\", 18)\n    println(user[\"name\"])\n    user[\"age\"] = 22\n    println(user[\"age\"])\n}\n```\n因此，索引运算符不仅仅可以对集合类数据进行操作，对一个普通的`Kotlin`类也可以发挥同样的作用。如果你脑洞足够大，你还可以发现更多更神奇的玩法。\n\n#### 调用操作符\n操作符|对应方法\n:---:|:---:\na()|a.invoke()\na(i)|\ta.invoke(i)\na(i, j)|\ta.invoke(i, j)\na(i_1, ……, i_n)|\ta.invoke(i_1, ……, i_n)\n\n重载这个操作符并不难，理解它的应用场景却有一定的难度。为了理解它的应用场景，我们来举一个简单的例子：\n```\nclass JsonParser {\n\n}\n\noperator fun JsonParser.invoke(json: String): Map<String, Any> {\n    val map = Json.parse(json)\n    ...\n    return map\n}\n\n// 可以这样调用\nval parser = JsonParser()\nval map = parser(\"{name: \\\"Scott Smith\\\"}\")\n```\n这里的调用有点像省略了一个解析Json数据的方法，难道它仅仅就是这个作用吗？是的，调用操作符其实就这一个作用。如果一个Kotlin类仅仅只有一个方法，直接使用括号调用的确是一个不错的主意。不过，在使用的时候还是要稍微注意一下，避免出现歧义。\n\n#### 广义赋值操作符\n操作符|对应方法\n:---:|:---:\na += b|a.plusAssign(b)\na -= b|a.minusAssign(b)\na *= b|a.timesAssign(b)\na /= b|a.divAssign(b)\na %= b|a.remAssign(b)\n\n这个操作符相对比较好理解，我们以`Number`类为例，举一个简单的例子：\n```\n// 广义赋值运算符\noperator fun Number.plusAssign(value: Int) {\n    this.value += value\n}\n\nfun main(args: Array<String>) {\n    val number = Number(1)\n    number += 2\n    println(number)\n}\n\n// 输出结果：\nNumber value = 3\n```\n\n#### 相等与不等操作符\n操作符|对应方法\n:---:|:---:\na == b|a?.equals(b) ?: (b === null)\na != b|!(a?.equals(b) ?: (b === null))\n\n重载这个操作符与Java重写equals方法是一样的。不过，这里要注意与Java的区别，在Java端`==`用于判断两个对象是否是同一对象（指针级别）。而在Kotlin语言中，如果我们不做任何处理，`==`等同于使用Java对象的`equals`方法判断两个对象是否相等。\n\n另外，这里还有一种特殊情况，如果左值等于null，这个时候`a?.equals(b)`将返回null值。因此，这里还增加了`?:`运算符用于进一步判断，在这个情况下，当且仅当b === null的时候，a、b才有可能相等。因此，才有了上面的对应关系，这里以`User`类为例举一个简单的例子：\n```\nclass User(var name: String?,\n           var age: Int?) {\n\n    operator override fun equals(other: Any?): Boolean {\n        if(other is User) {\n            return (this.name == other.name) && (this.age == other.age)\n        }\n        return false\n    }\n}\n```\n注意：这里有一个特殊的地方，与其它操作符不一样的地方是，如果使用扩展的方式尝试重载该操作符，将会报错。因此，如果要重载该操作符，一定要在类中进行重写。\n\n#### 比较操作符\n操作符|对应方法\n:---:|:---:\na > b|a.compareTo(b) > 0\na < b|a.compareTo(b) < 0\na >= b|a.compareTo(b) >= 0\na <= b|a.compareTo(b) <= 0\n\n比较操作符是一个在日常使用中频率非常高的操作符，重载这个操作符只需要掌握以上表格中几个规则即可。我们以`Number`类为例举一个简单的例子：\n```\noperator fun Number.compareTo(number: Number): Int {\n    return this.value - number.value\n}\n```\n\n#### 属性委托操作符\n**属性委托操作符**是一种非常特殊的操作符，其主要用在代理属性中。关于Kotlin代理的知识，如果你还不了解的话，请参考这篇文章\n [Delegation](https://www.jianshu.com/p/54a57aac11e6)。这篇文章介绍的相对简略，后面会出一篇更详细的文章介绍代理相关的知识。\n\n#### 中缀调用\n看到这里，可能有一些追求更高级玩法的同学会问：Kotlin支持自定义操作符吗？\n\n答案当然是：不能！不过，别失望，`infix`也许适合你，它其实可以看做一种自定义操作符的实现。这里我们对集合`List`新增一个扩展方法`intersection`用于获取两个集合的交集：\n```\n// 获取两个集合的交集\nfun <E> List<E>.interSection(other: List<E>): List<E> {\n    val result = ArrayList<E>()\n    forEach {\n        if(other.contains(it)) {\n            result.add(it)\n        }\n    }\n\n    return result\n}\n```\n接下来，我们就可以在`List`及其子类中使用点语法调用了。但，它看起来仍然不像一个操作符。为了让它更像一个操作符，我们继续做点事情：\n* 添加`infix`关键词\n* 将函数名修改为∩（这是数学上获取交集的标记符号）\n然而，万万没想到，修改完成后居然报错了。Kotlin并不允许直接使用特殊符号作为函数名开头。因此，我们取形近的字母`n`用于表示函数名：\n```\n// 获取两个集合的交集\ninfix fun <E> List<E>.n(other: List<E>): List<E> {\n    val result = ArrayList<E>()\n    forEach {\n        if(other.contains(it)) {\n            result.add(it)\n        }\n    }\n\n    return result\n}\n```\n接下来，我们就可以这样调用了`val interSection = list1 n list2`，怎么样？是不是很像自定义了一个获取交集的操作符`n`？如果你希望自定义操作符，可以尝试这么做。\n\n其实`infix`的应用场景还不止这些，接下来，我们再用它完成一件更有意思的事情。\n\n在实际项目开发中，数据库数据到对象的处理是一件繁琐的过程，最麻烦的地方莫过于思维的转换。那我们是否可以在代码中直接使用SQL语句查询对象数据呢？例如这样：\n```\nval users = Select * from User where age > 18\n```\n\n纸上学来终觉浅，觉知此事需躬行。有了这个idea，接下来，我们就朝着这个目标努力。\n一、先声明一个`Sql`类，准备如下方法：\n```\n   infix fun select(columnBuilder: ColumnBuilder): Sql {\n   \n   infix fun from(entityClass: Class<*>): Sql \n\n   infix fun where(condition: String): Sql \n   \n   fun <T> query(): T \n```\n二、我们的目的是：最终转换到SQL语句形式。因此，增加如下实现：\n```\nclass ColumnBuilder(var columns: Array<out String>) {\n\n}\n\nclass Sql private constructor() {\n    var columns = emptyList<String>()\n    var entityClass: Class<*>? = null\n    var condition: String? = null\n\n    companion object {\n        fun get(): Sql {\n            return Sql()\n        }\n    }\n\n    infix fun select(columnBuilder: ColumnBuilder): Sql {\n        this.columns = columnBuilder.columns.asList()\n        return this\n    }\n\n    infix fun from(entityClass: Class<*>): Sql {\n        this.entityClass = entityClass\n        return this\n    }\n\n    infix fun where(condition: String): Sql {\n        this.condition = condition\n        return this\n    }\n\n    fun <T> query(): T {\n        // 此处省略所有条件判断\n        val sqlBuilder = StringBuilder(\"select \")\n\n        val columnBuilder = StringBuilder(\"\")\n        if(columns.size == 1 && columns[0] == \"*\") {\n            columnBuilder.append(\"*\")\n        } else {\n            columns.forEach {\n                columnBuilder.append(it).append(\",\")\n            }\n            columnBuilder.delete(columns.size - 1, columns.size)\n        }\n\n        val sql = sqlBuilder.append(columnBuilder.toString())\n                            .append(\" from ${entityClass?.simpleName} where \")\n                            .append(condition)\n                            .toString()\n        println(\"执行SQL查询：$sql\")\n\n        return execute(sql)\n    }\n\n    private fun <T> execute(sql: String): T {\n        // 仅仅用于测试\n        return Any() as T\n    }\n}\n```\n三、为了看起来更形似，再增加如下两个方法：\n```\n// 使其看起来像在数据库作用域中执行\nfun database(init: Sql.()->Unit) {\n    init.invoke(Sql.get())\n}\n\n// 因为infix限制，参数不能直接使用可变参数。因此，我们增加这个方法使参数组装看起来更自然\nfun columns(vararg columns: String): ColumnBuilder {\n    return ColumnBuilder(columns)\n}\n```\n\n接下来，就是见证奇迹的时刻！\n```\nfun main(args: Array<String>) {\n    database {\n        (select (columns(\"*\")) from User::class.java where \"age > 18\").query()\n    }\n}\n\n// 输出结果：\n执行SQL查询：select * from User where age > 18\n```\n为了方便大家查看，我们提取完整执行代码段与SQL语句对比：\n```\nselect          *       from User             where  age > 18\nselect  (columns(\"*\"))  from User::class.java where \"age > 18\"\n```\n神奇吗？\n至此，我们就可以直接在代码中愉快地使用类似SQL语句的方式进行方法调用了。\n\n# 总结\n本篇文章从操作符重载实用的角度讲解了操作符重载的所有相关知识。如文章开头所说，操作符重载是一把双刃剑。用得好事半功倍，用不好事倍功半。因此，我给大家的建议是：使用的时候一定要保证能够自圆其说，简单来说，就是自然。我认为相对于古老的语言C++来说，Kotlin语言操作符重载的设计是非常棒的。如果你知道自己在做什么，我非常推荐你在生产环境中使用操作符重载来简化操作。\n\n本篇文章例子代码点这里：[kotlin-samples](https://github.com/yuanhoujun/kotlin-samples)\n\n---\n\n我是欧阳锋，一个热爱Kotlin语言编程的学生。如果你喜欢我的文章，请在文章下方留下你爱的印记。如果你不喜欢我的文章，请先喜欢上我的文章。然后再留下爱的印记！\n\n下次文章再见，拜拜！\n\n---\n","slug":"kotlin/操作符重载及中缀调用","published":1,"updated":"2019-04-28T12:39:23.525Z","_id":"cjv0x7uji005ibkb4mrfxo26c","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-0baf2dcfb0baa84f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>操作符重载其实很有意思！但这个概念却很少有人知道，使用操作符重载在某种程度上会给代码的阅读带来一定的麻烦。因此，慎用操作符被认为是一个好习惯。的确，操作符重载是一把双刃剑，既能削铁如泥，也能“引火烧身”，这篇文章将从实用的角度来讲解操作符重载的基本用法。</p>\n</blockquote>\n<h1 id=\"支持重载的操作符类型\"><a href=\"#支持重载的操作符类型\" class=\"headerlink\" title=\"支持重载的操作符类型\"></a>支持重载的操作符类型</h1><p>Kotlin语言支持重载的操作符类型比较多。以最新版本<strong>1.2.21</strong>为准，目前支持重载的操作符可以归纳为以下几类：</p>\n<h1 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h1><h4 id=\"一元前缀操作符\"><a href=\"#一元前缀操作符\" class=\"headerlink\" title=\"一元前缀操作符\"></a>一元前缀操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+a</td>\n<td style=\"text-align:center\">a.unaryPlus()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">a.unaryMinus()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!a</td>\n<td style=\"text-align:center\">a.not()</td>\n</tr>\n</tbody>\n</table>\n<p>以上三个操作符在日常使用中频率很高，第一个操作符在基本运算中很少使用，第二个操作符就是常见的取反操作，第三个操作符是逻辑取反操作。接下来，我们使用扩展的方式重载这三个操作符：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 一元操作符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Scott Smith 2018-02-03 14:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">data class Number(var value: Int)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 重载一元操作符+，使其对Number中实际数据取绝对值</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.unaryPlus(): Number &#123;</span><br><span class=\"line\">    this.value = Math.abs(value)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 重载一元操作符-，使其对Number中实际数据取反</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.unaryMinus(): Number &#123;</span><br><span class=\"line\">    this.value = -value</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 这个操作符通常是用于逻辑取反，这里用一个没有意义的操作，来模拟重载这个操作符</span><br><span class=\"line\"> * 结果：始终返回Number中实际数据的负值</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.not(): Number &#123;</span><br><span class=\"line\">    this.value = -Math.abs(value)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val number = Number(-3)</span><br><span class=\"line\">    println(&quot;Number value = $&#123;number.value&#125;&quot;)</span><br><span class=\"line\">    println(&quot;After unaryPlus: Number value = $&#123;(+number).value&#125;&quot;)</span><br><span class=\"line\">    println(&quot;After unaryMinus: Number value = $&#123;(-number).value&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    number.value = Math.abs(number.value)</span><br><span class=\"line\">    println(&quot;After unaryNot: Number value = $&#123;(!number).value&#125;&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行上述代码，将得到如下结果：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number value = -3</span><br><span class=\"line\">After unaryPlus: Number value = 3</span><br><span class=\"line\">After unaryMinus: Number value = -3</span><br><span class=\"line\">After unaryNot: Number value = -3</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"自增和自减操作符\"><a href=\"#自增和自减操作符\" class=\"headerlink\" title=\"自增和自减操作符\"></a>自增和自减操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a++/++a</td>\n<td style=\"text-align:center\">a.inc()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a–/–a</td>\n<td style=\"text-align:center\">a.dec()</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符相对比较难理解，官方文档有一段简短的文字解释，翻译成代码可以这样表示：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a++</span><br><span class=\"line\">fun increment(a: Int): Int &#123;</span><br><span class=\"line\">  val a0 = a</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ++a</span><br><span class=\"line\">fun increment(a: Int): Int &#123;</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看懂上面的代码后，我们换成需要重载的<code>Number</code>类，Kotlin最终会这样处理：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Number++</span><br><span class=\"line\">fun increment(number: Number): Number &#123;</span><br><span class=\"line\">  val temp = number</span><br><span class=\"line\">  val result = number.inc()</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Number++</span><br><span class=\"line\">fun increment(number: Number): Number &#123;</span><br><span class=\"line\">  return number.inc()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，重载<code>Number</code>类自加操作符，我们可以这样做：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.inc(): Number &#123;</span><br><span class=\"line\">    return Number(this.value + 1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重载自减操作符同理，完整代码请参考我的Git版本库：<a href=\"https://github.com/yuanhoujun/kotlin-samples\" target=\"_blank\" rel=\"noopener\">kotlin-samples</a></p>\n<h1 id=\"二元操作符\"><a href=\"#二元操作符\" class=\"headerlink\" title=\"二元操作符\"></a>二元操作符</h1><h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a + b</td>\n<td style=\"text-align:center\">a.plus(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a - b</td>\n<td style=\"text-align:center\">a.minus(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a * b</td>\n<td style=\"text-align:center\">a.times(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a / b</td>\n<td style=\"text-align:center\">a.div(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a % b</td>\n<td style=\"text-align:center\">a.rem(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a..b</td>\n<td style=\"text-align:center\">a.rangeTo(b)</td>\n</tr>\n</tbody>\n</table>\n<p>前5个操作符相对比较好理解，我们以<code>a + b</code>为例，举个一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重载Number类的加法运算符</span><br><span class=\"line\">operator fun Number.plus(value: Int): Number &#123;</span><br><span class=\"line\">    return Number(this.value + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">       println((Number(1) + 2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">Number value = 3</span><br></pre></td></tr></table></figure></p>\n<p>相对比较难理解的是第六个范围运算符，这个操作符主要用于生成一段数据范围。我们认为<code>Number</code>本身就代表一个整型数字，因此，重载<code>Number</code>是一件有意义的事情。直接看例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.rangeTo(to: Number): IntRange &#123;</span><br><span class=\"line\">    return this.value..to.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val startNumber = Number(3)</span><br><span class=\"line\">    val endNumber = Number(9)</span><br><span class=\"line\"></span><br><span class=\"line\">    (startNumber..endNumber).forEach &#123;</span><br><span class=\"line\">        println(&quot;value = $it&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 运行结果：</span><br><span class=\"line\">value = 3</span><br><span class=\"line\">value = 4</span><br><span class=\"line\">value = 5</span><br><span class=\"line\">value = 6</span><br><span class=\"line\">value = 7</span><br><span class=\"line\">value = 8</span><br><span class=\"line\">value = 9</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"“In”运算符\"><a href=\"#“In”运算符\" class=\"headerlink\" title=\"“In”运算符\"></a>“In”运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a in b</td>\n<td style=\"text-align:center\">b.contains(a)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a !in b</td>\n<td style=\"text-align:center\">!b.contains(a)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符相对比较好理解，重载这个操作符可以用于判断某个数据是否在另外一个对象中。我们用一个非常简单的自定义类来模拟集合操作：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IntCollection &#123; </span><br><span class=\"line\">    val intList = ArrayList&lt;Int&gt;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重载&quot;in&quot;操作符</span><br><span class=\"line\">operator fun IntCollection.contains(value: Int): Boolean &#123;</span><br><span class=\"line\">    return this.intList.contains(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val intCollection = IntCollection()</span><br><span class=\"line\">    intCollection.add(1, 2, 3)</span><br><span class=\"line\">    println(3 in intCollection)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"索引访问运算符\"><a href=\"#索引访问运算符\" class=\"headerlink\" title=\"索引访问运算符\"></a>索引访问运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a[i]</td>\n<td style=\"text-align:center\">a.get(i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i, j]</td>\n<td style=\"text-align:center\">a.get(i, j)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i_1, …, i_n]</td>\n<td style=\"text-align:center\">a.get(i_1, …, i_n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i] = b</td>\n<td style=\"text-align:center\">a.set(i, b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i, j] = b</td>\n<td style=\"text-align:center\">a.set(i, j, b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i_1, …, i_n] = b</td>\n<td style=\"text-align:center\">a.set(i_1, …, i_n, b)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符很有意思，例如，如果你要访问Map中某个数据，通常是这样的<code>map.get(&quot;key&quot;)</code>，使用索引运算符你还可以这样操作：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val value = map[&quot;key&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>我们继续以<code>IntCollection</code>类为例，尝试重写<code>a[i]</code>和<code>a[i] = b</code>两个运算符，其它运算符同理。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重载a[i]操作符</span><br><span class=\"line\">operator fun IntCollection.get(index: Int): Int &#123;</span><br><span class=\"line\">    return intList[index]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重载a[i] = b操作符</span><br><span class=\"line\">operator fun IntCollection.set(index: Int, value: Int) &#123;</span><br><span class=\"line\">    intList[index] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val intCollection = IntCollection()</span><br><span class=\"line\">    intCollection.add(1, 2, 3)</span><br><span class=\"line\">    println(intCollection[0])</span><br><span class=\"line\"></span><br><span class=\"line\">    intCollection[2] = 4</span><br><span class=\"line\">    print(intCollection[2])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们用索引运算符来做一点更有意思的事情！新建一个普通的<code>Kotlin</code>类<code>User</code>：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(var name: String,</span><br><span class=\"line\">           var age: Int) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的方式重载索引运算符：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun User.get(key: String): Any? &#123;</span><br><span class=\"line\">    when(key) &#123;</span><br><span class=\"line\">        &quot;name&quot; -&gt; &#123;</span><br><span class=\"line\">            return this.name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &quot;age&quot; -&gt; &#123;</span><br><span class=\"line\">            return this.age</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">operator fun User.set(key: String, value:Any?) &#123;</span><br><span class=\"line\">    when(key) &#123;</span><br><span class=\"line\">        &quot;name&quot; -&gt; &#123;</span><br><span class=\"line\">            name = value as? String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &quot;age&quot; -&gt; &#123;</span><br><span class=\"line\">            age = value as? Int</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，你会神奇地发现，一个普通的<code>Kotlin</code>类居然也可以使用索引运算符对成员变量进行操作了，是不是很神奇？<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val user = User(&quot;Scott Smith&quot;, 18)</span><br><span class=\"line\">    println(user[&quot;name&quot;])</span><br><span class=\"line\">    user[&quot;age&quot;] = 22</span><br><span class=\"line\">    println(user[&quot;age&quot;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，索引运算符不仅仅可以对集合类数据进行操作，对一个普通的<code>Kotlin</code>类也可以发挥同样的作用。如果你脑洞足够大，你还可以发现更多更神奇的玩法。</p>\n<h4 id=\"调用操作符\"><a href=\"#调用操作符\" class=\"headerlink\" title=\"调用操作符\"></a>调用操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a()</td>\n<td style=\"text-align:center\">a.invoke()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i)</td>\n<td style=\"text-align:center\">a.invoke(i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i, j)</td>\n<td style=\"text-align:center\">a.invoke(i, j)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i_1, ……, i_n)</td>\n<td style=\"text-align:center\">a.invoke(i_1, ……, i_n)</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符并不难，理解它的应用场景却有一定的难度。为了理解它的应用场景，我们来举一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JsonParser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">operator fun JsonParser.invoke(json: String): Map&lt;String, Any&gt; &#123;</span><br><span class=\"line\">    val map = Json.parse(json)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以这样调用</span><br><span class=\"line\">val parser = JsonParser()</span><br><span class=\"line\">val map = parser(&quot;&#123;name: \\&quot;Scott Smith\\&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>这里的调用有点像省略了一个解析Json数据的方法，难道它仅仅就是这个作用吗？是的，调用操作符其实就这一个作用。如果一个Kotlin类仅仅只有一个方法，直接使用括号调用的确是一个不错的主意。不过，在使用的时候还是要稍微注意一下，避免出现歧义。</p>\n<h4 id=\"广义赋值操作符\"><a href=\"#广义赋值操作符\" class=\"headerlink\" title=\"广义赋值操作符\"></a>广义赋值操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a += b</td>\n<td style=\"text-align:center\">a.plusAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a -= b</td>\n<td style=\"text-align:center\">a.minusAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a *= b</td>\n<td style=\"text-align:center\">a.timesAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a /= b</td>\n<td style=\"text-align:center\">a.divAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a %= b</td>\n<td style=\"text-align:center\">a.remAssign(b)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符相对比较好理解，我们以<code>Number</code>类为例，举一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 广义赋值运算符</span><br><span class=\"line\">operator fun Number.plusAssign(value: Int) &#123;</span><br><span class=\"line\">    this.value += value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val number = Number(1)</span><br><span class=\"line\">    number += 2</span><br><span class=\"line\">    println(number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">Number value = 3</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"相等与不等操作符\"><a href=\"#相等与不等操作符\" class=\"headerlink\" title=\"相等与不等操作符\"></a>相等与不等操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a == b</td>\n<td style=\"text-align:center\">a?.equals(b) ?: (b === null)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a != b</td>\n<td style=\"text-align:center\">!(a?.equals(b) ?: (b === null))</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符与Java重写equals方法是一样的。不过，这里要注意与Java的区别，在Java端<code>==</code>用于判断两个对象是否是同一对象（指针级别）。而在Kotlin语言中，如果我们不做任何处理，<code>==</code>等同于使用Java对象的<code>equals</code>方法判断两个对象是否相等。</p>\n<p>另外，这里还有一种特殊情况，如果左值等于null，这个时候<code>a?.equals(b)</code>将返回null值。因此，这里还增加了<code>?:</code>运算符用于进一步判断，在这个情况下，当且仅当b === null的时候，a、b才有可能相等。因此，才有了上面的对应关系，这里以<code>User</code>类为例举一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(var name: String?,</span><br><span class=\"line\">           var age: Int?) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    operator override fun equals(other: Any?): Boolean &#123;</span><br><span class=\"line\">        if(other is User) &#123;</span><br><span class=\"line\">            return (this.name == other.name) &amp;&amp; (this.age == other.age)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：这里有一个特殊的地方，与其它操作符不一样的地方是，如果使用扩展的方式尝试重载该操作符，将会报错。因此，如果要重载该操作符，一定要在类中进行重写。</p>\n<h4 id=\"比较操作符\"><a href=\"#比较操作符\" class=\"headerlink\" title=\"比较操作符\"></a>比较操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a &gt; b</td>\n<td style=\"text-align:center\">a.compareTo(b) &gt; 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &lt; b</td>\n<td style=\"text-align:center\">a.compareTo(b) &lt; 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &gt;= b</td>\n<td style=\"text-align:center\">a.compareTo(b) &gt;= 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &lt;= b</td>\n<td style=\"text-align:center\">a.compareTo(b) &lt;= 0</td>\n</tr>\n</tbody>\n</table>\n<p>比较操作符是一个在日常使用中频率非常高的操作符，重载这个操作符只需要掌握以上表格中几个规则即可。我们以<code>Number</code>类为例举一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.compareTo(number: Number): Int &#123;</span><br><span class=\"line\">    return this.value - number.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"属性委托操作符\"><a href=\"#属性委托操作符\" class=\"headerlink\" title=\"属性委托操作符\"></a>属性委托操作符</h4><p><strong>属性委托操作符</strong>是一种非常特殊的操作符，其主要用在代理属性中。关于Kotlin代理的知识，如果你还不了解的话，请参考这篇文章<br> <a href=\"https://www.jianshu.com/p/54a57aac11e6\" target=\"_blank\" rel=\"noopener\">Delegation</a>。这篇文章介绍的相对简略，后面会出一篇更详细的文章介绍代理相关的知识。</p>\n<h4 id=\"中缀调用\"><a href=\"#中缀调用\" class=\"headerlink\" title=\"中缀调用\"></a>中缀调用</h4><p>看到这里，可能有一些追求更高级玩法的同学会问：Kotlin支持自定义操作符吗？</p>\n<p>答案当然是：不能！不过，别失望，<code>infix</code>也许适合你，它其实可以看做一种自定义操作符的实现。这里我们对集合<code>List</code>新增一个扩展方法<code>intersection</code>用于获取两个集合的交集：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取两个集合的交集</span><br><span class=\"line\">fun &lt;E&gt; List&lt;E&gt;.interSection(other: List&lt;E&gt;): List&lt;E&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;E&gt;()</span><br><span class=\"line\">    forEach &#123;</span><br><span class=\"line\">        if(other.contains(it)) &#123;</span><br><span class=\"line\">            result.add(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们就可以在<code>List</code>及其子类中使用点语法调用了。但，它看起来仍然不像一个操作符。为了让它更像一个操作符，我们继续做点事情：</p>\n<ul>\n<li>添加<code>infix</code>关键词</li>\n<li>将函数名修改为∩（这是数学上获取交集的标记符号）<br>然而，万万没想到，修改完成后居然报错了。Kotlin并不允许直接使用特殊符号作为函数名开头。因此，我们取形近的字母<code>n</code>用于表示函数名：<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取两个集合的交集</span><br><span class=\"line\">infix fun &lt;E&gt; List&lt;E&gt;.n(other: List&lt;E&gt;): List&lt;E&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;E&gt;()</span><br><span class=\"line\">    forEach &#123;</span><br><span class=\"line\">        if(other.contains(it)) &#123;</span><br><span class=\"line\">            result.add(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来，我们就可以这样调用了<code>val interSection = list1 n list2</code>，怎么样？是不是很像自定义了一个获取交集的操作符<code>n</code>？如果你希望自定义操作符，可以尝试这么做。</p>\n<p>其实<code>infix</code>的应用场景还不止这些，接下来，我们再用它完成一件更有意思的事情。</p>\n<p>在实际项目开发中，数据库数据到对象的处理是一件繁琐的过程，最麻烦的地方莫过于思维的转换。那我们是否可以在代码中直接使用SQL语句查询对象数据呢？例如这样：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val users = Select * from User where age &gt; 18</span><br></pre></td></tr></table></figure></p>\n<p>纸上学来终觉浅，觉知此事需躬行。有了这个idea，接下来，我们就朝着这个目标努力。<br>一、先声明一个<code>Sql</code>类，准备如下方法：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix fun select(columnBuilder: ColumnBuilder): Sql &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">infix fun from(entityClass: Class&lt;*&gt;): Sql </span><br><span class=\"line\"></span><br><span class=\"line\">infix fun where(condition: String): Sql </span><br><span class=\"line\"></span><br><span class=\"line\">fun &lt;T&gt; query(): T</span><br></pre></td></tr></table></figure></p>\n<p>二、我们的目的是：最终转换到SQL语句形式。因此，增加如下实现：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColumnBuilder(var columns: Array&lt;out String&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Sql private constructor() &#123;</span><br><span class=\"line\">    var columns = emptyList&lt;String&gt;()</span><br><span class=\"line\">    var entityClass: Class&lt;*&gt;? = null</span><br><span class=\"line\">    var condition: String? = null</span><br><span class=\"line\"></span><br><span class=\"line\">    companion object &#123;</span><br><span class=\"line\">        fun get(): Sql &#123;</span><br><span class=\"line\">            return Sql()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun select(columnBuilder: ColumnBuilder): Sql &#123;</span><br><span class=\"line\">        this.columns = columnBuilder.columns.asList()</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun from(entityClass: Class&lt;*&gt;): Sql &#123;</span><br><span class=\"line\">        this.entityClass = entityClass</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun where(condition: String): Sql &#123;</span><br><span class=\"line\">        this.condition = condition</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun &lt;T&gt; query(): T &#123;</span><br><span class=\"line\">        // 此处省略所有条件判断</span><br><span class=\"line\">        val sqlBuilder = StringBuilder(&quot;select &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        val columnBuilder = StringBuilder(&quot;&quot;)</span><br><span class=\"line\">        if(columns.size == 1 &amp;&amp; columns[0] == &quot;*&quot;) &#123;</span><br><span class=\"line\">            columnBuilder.append(&quot;*&quot;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            columns.forEach &#123;</span><br><span class=\"line\">                columnBuilder.append(it).append(&quot;,&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            columnBuilder.delete(columns.size - 1, columns.size)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        val sql = sqlBuilder.append(columnBuilder.toString())</span><br><span class=\"line\">                            .append(&quot; from $&#123;entityClass?.simpleName&#125; where &quot;)</span><br><span class=\"line\">                            .append(condition)</span><br><span class=\"line\">                            .toString()</span><br><span class=\"line\">        println(&quot;执行SQL查询：$sql&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        return execute(sql)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private fun &lt;T&gt; execute(sql: String): T &#123;</span><br><span class=\"line\">        // 仅仅用于测试</span><br><span class=\"line\">        return Any() as T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三、为了看起来更形似，再增加如下两个方法：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使其看起来像在数据库作用域中执行</span><br><span class=\"line\">fun database(init: Sql.()-&gt;Unit) &#123;</span><br><span class=\"line\">    init.invoke(Sql.get())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 因为infix限制，参数不能直接使用可变参数。因此，我们增加这个方法使参数组装看起来更自然</span><br><span class=\"line\">fun columns(vararg columns: String): ColumnBuilder &#123;</span><br><span class=\"line\">    return ColumnBuilder(columns)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，就是见证奇迹的时刻！<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    database &#123;</span><br><span class=\"line\">        (select (columns(&quot;*&quot;)) from User::class.java where &quot;age &gt; 18&quot;).query()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">执行SQL查询：select * from User where age &gt; 18</span><br></pre></td></tr></table></figure></p>\n<p>为了方便大家查看，我们提取完整执行代码段与SQL语句对比：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select          *       from User             where  age &gt; 18</span><br><span class=\"line\">select  (columns(&quot;*&quot;))  from User::class.java where &quot;age &gt; 18&quot;</span><br></pre></td></tr></table></figure></p>\n<p>神奇吗？<br>至此，我们就可以直接在代码中愉快地使用类似SQL语句的方式进行方法调用了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇文章从操作符重载实用的角度讲解了操作符重载的所有相关知识。如文章开头所说，操作符重载是一把双刃剑。用得好事半功倍，用不好事倍功半。因此，我给大家的建议是：使用的时候一定要保证能够自圆其说，简单来说，就是自然。我认为相对于古老的语言C++来说，Kotlin语言操作符重载的设计是非常棒的。如果你知道自己在做什么，我非常推荐你在生产环境中使用操作符重载来简化操作。</p>\n<p>本篇文章例子代码点这里：<a href=\"https://github.com/yuanhoujun/kotlin-samples\" target=\"_blank\" rel=\"noopener\">kotlin-samples</a></p>\n<hr>\n<p>我是欧阳锋，一个热爱Kotlin语言编程的学生。如果你喜欢我的文章，请在文章下方留下你爱的印记。如果你不喜欢我的文章，请先喜欢上我的文章。然后再留下爱的印记！</p>\n<p>下次文章再见，拜拜！</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-0baf2dcfb0baa84f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>操作符重载其实很有意思！但这个概念却很少有人知道，使用操作符重载在某种程度上会给代码的阅读带来一定的麻烦。因此，慎用操作符被认为是一个好习惯。的确，操作符重载是一把双刃剑，既能削铁如泥，也能“引火烧身”，这篇文章将从实用的角度来讲解操作符重载的基本用法。</p>\n</blockquote>\n<h1 id=\"支持重载的操作符类型\"><a href=\"#支持重载的操作符类型\" class=\"headerlink\" title=\"支持重载的操作符类型\"></a>支持重载的操作符类型</h1><p>Kotlin语言支持重载的操作符类型比较多。以最新版本<strong>1.2.21</strong>为准，目前支持重载的操作符可以归纳为以下几类：</p>\n<h1 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h1><h4 id=\"一元前缀操作符\"><a href=\"#一元前缀操作符\" class=\"headerlink\" title=\"一元前缀操作符\"></a>一元前缀操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+a</td>\n<td style=\"text-align:center\">a.unaryPlus()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">a.unaryMinus()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!a</td>\n<td style=\"text-align:center\">a.not()</td>\n</tr>\n</tbody>\n</table>\n<p>以上三个操作符在日常使用中频率很高，第一个操作符在基本运算中很少使用，第二个操作符就是常见的取反操作，第三个操作符是逻辑取反操作。接下来，我们使用扩展的方式重载这三个操作符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 一元操作符</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Scott Smith 2018-02-03 14:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">data class Number(var value: Int)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 重载一元操作符+，使其对Number中实际数据取绝对值</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.unaryPlus(): Number &#123;</span><br><span class=\"line\">    this.value = Math.abs(value)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 重载一元操作符-，使其对Number中实际数据取反</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.unaryMinus(): Number &#123;</span><br><span class=\"line\">    this.value = -value</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 这个操作符通常是用于逻辑取反，这里用一个没有意义的操作，来模拟重载这个操作符</span><br><span class=\"line\"> * 结果：始终返回Number中实际数据的负值</span><br><span class=\"line\"> */</span><br><span class=\"line\">operator fun Number.not(): Number &#123;</span><br><span class=\"line\">    this.value = -Math.abs(value)</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val number = Number(-3)</span><br><span class=\"line\">    println(&quot;Number value = $&#123;number.value&#125;&quot;)</span><br><span class=\"line\">    println(&quot;After unaryPlus: Number value = $&#123;(+number).value&#125;&quot;)</span><br><span class=\"line\">    println(&quot;After unaryMinus: Number value = $&#123;(-number).value&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    number.value = Math.abs(number.value)</span><br><span class=\"line\">    println(&quot;After unaryNot: Number value = $&#123;(!number).value&#125;&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行上述代码，将得到如下结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number value = -3</span><br><span class=\"line\">After unaryPlus: Number value = 3</span><br><span class=\"line\">After unaryMinus: Number value = -3</span><br><span class=\"line\">After unaryNot: Number value = -3</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"自增和自减操作符\"><a href=\"#自增和自减操作符\" class=\"headerlink\" title=\"自增和自减操作符\"></a>自增和自减操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a++/++a</td>\n<td style=\"text-align:center\">a.inc()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a–/–a</td>\n<td style=\"text-align:center\">a.dec()</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符相对比较难理解，官方文档有一段简短的文字解释，翻译成代码可以这样表示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a++</span><br><span class=\"line\">fun increment(a: Int): Int &#123;</span><br><span class=\"line\">  val a0 = a</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ++a</span><br><span class=\"line\">fun increment(a: Int): Int &#123;</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看懂上面的代码后，我们换成需要重载的<code>Number</code>类，Kotlin最终会这样处理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Number++</span><br><span class=\"line\">fun increment(number: Number): Number &#123;</span><br><span class=\"line\">  val temp = number</span><br><span class=\"line\">  val result = number.inc()</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Number++</span><br><span class=\"line\">fun increment(number: Number): Number &#123;</span><br><span class=\"line\">  return number.inc()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，重载<code>Number</code>类自加操作符，我们可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.inc(): Number &#123;</span><br><span class=\"line\">    return Number(this.value + 1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重载自减操作符同理，完整代码请参考我的Git版本库：<a href=\"https://github.com/yuanhoujun/kotlin-samples\" target=\"_blank\" rel=\"noopener\">kotlin-samples</a></p>\n<h1 id=\"二元操作符\"><a href=\"#二元操作符\" class=\"headerlink\" title=\"二元操作符\"></a>二元操作符</h1><h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a + b</td>\n<td style=\"text-align:center\">a.plus(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a - b</td>\n<td style=\"text-align:center\">a.minus(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a * b</td>\n<td style=\"text-align:center\">a.times(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a / b</td>\n<td style=\"text-align:center\">a.div(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a % b</td>\n<td style=\"text-align:center\">a.rem(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a..b</td>\n<td style=\"text-align:center\">a.rangeTo(b)</td>\n</tr>\n</tbody>\n</table>\n<p>前5个操作符相对比较好理解，我们以<code>a + b</code>为例，举个一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重载Number类的加法运算符</span><br><span class=\"line\">operator fun Number.plus(value: Int): Number &#123;</span><br><span class=\"line\">    return Number(this.value + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">       println((Number(1) + 2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">Number value = 3</span><br></pre></td></tr></table></figure></p>\n<p>相对比较难理解的是第六个范围运算符，这个操作符主要用于生成一段数据范围。我们认为<code>Number</code>本身就代表一个整型数字，因此，重载<code>Number</code>是一件有意义的事情。直接看例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.rangeTo(to: Number): IntRange &#123;</span><br><span class=\"line\">    return this.value..to.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val startNumber = Number(3)</span><br><span class=\"line\">    val endNumber = Number(9)</span><br><span class=\"line\"></span><br><span class=\"line\">    (startNumber..endNumber).forEach &#123;</span><br><span class=\"line\">        println(&quot;value = $it&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 运行结果：</span><br><span class=\"line\">value = 3</span><br><span class=\"line\">value = 4</span><br><span class=\"line\">value = 5</span><br><span class=\"line\">value = 6</span><br><span class=\"line\">value = 7</span><br><span class=\"line\">value = 8</span><br><span class=\"line\">value = 9</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"“In”运算符\"><a href=\"#“In”运算符\" class=\"headerlink\" title=\"“In”运算符\"></a>“In”运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a in b</td>\n<td style=\"text-align:center\">b.contains(a)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a !in b</td>\n<td style=\"text-align:center\">!b.contains(a)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符相对比较好理解，重载这个操作符可以用于判断某个数据是否在另外一个对象中。我们用一个非常简单的自定义类来模拟集合操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IntCollection &#123; </span><br><span class=\"line\">    val intList = ArrayList&lt;Int&gt;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重载&quot;in&quot;操作符</span><br><span class=\"line\">operator fun IntCollection.contains(value: Int): Boolean &#123;</span><br><span class=\"line\">    return this.intList.contains(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val intCollection = IntCollection()</span><br><span class=\"line\">    intCollection.add(1, 2, 3)</span><br><span class=\"line\">    println(3 in intCollection)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"索引访问运算符\"><a href=\"#索引访问运算符\" class=\"headerlink\" title=\"索引访问运算符\"></a>索引访问运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a[i]</td>\n<td style=\"text-align:center\">a.get(i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i, j]</td>\n<td style=\"text-align:center\">a.get(i, j)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i_1, …, i_n]</td>\n<td style=\"text-align:center\">a.get(i_1, …, i_n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i] = b</td>\n<td style=\"text-align:center\">a.set(i, b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i, j] = b</td>\n<td style=\"text-align:center\">a.set(i, j, b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a[i_1, …, i_n] = b</td>\n<td style=\"text-align:center\">a.set(i_1, …, i_n, b)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符很有意思，例如，如果你要访问Map中某个数据，通常是这样的<code>map.get(&quot;key&quot;)</code>，使用索引运算符你还可以这样操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val value = map[&quot;key&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>我们继续以<code>IntCollection</code>类为例，尝试重写<code>a[i]</code>和<code>a[i] = b</code>两个运算符，其它运算符同理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重载a[i]操作符</span><br><span class=\"line\">operator fun IntCollection.get(index: Int): Int &#123;</span><br><span class=\"line\">    return intList[index]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重载a[i] = b操作符</span><br><span class=\"line\">operator fun IntCollection.set(index: Int, value: Int) &#123;</span><br><span class=\"line\">    intList[index] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val intCollection = IntCollection()</span><br><span class=\"line\">    intCollection.add(1, 2, 3)</span><br><span class=\"line\">    println(intCollection[0])</span><br><span class=\"line\"></span><br><span class=\"line\">    intCollection[2] = 4</span><br><span class=\"line\">    print(intCollection[2])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们用索引运算符来做一点更有意思的事情！新建一个普通的<code>Kotlin</code>类<code>User</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(var name: String,</span><br><span class=\"line\">           var age: Int) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的方式重载索引运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun User.get(key: String): Any? &#123;</span><br><span class=\"line\">    when(key) &#123;</span><br><span class=\"line\">        &quot;name&quot; -&gt; &#123;</span><br><span class=\"line\">            return this.name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &quot;age&quot; -&gt; &#123;</span><br><span class=\"line\">            return this.age</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">operator fun User.set(key: String, value:Any?) &#123;</span><br><span class=\"line\">    when(key) &#123;</span><br><span class=\"line\">        &quot;name&quot; -&gt; &#123;</span><br><span class=\"line\">            name = value as? String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &quot;age&quot; -&gt; &#123;</span><br><span class=\"line\">            age = value as? Int</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，你会神奇地发现，一个普通的<code>Kotlin</code>类居然也可以使用索引运算符对成员变量进行操作了，是不是很神奇？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val user = User(&quot;Scott Smith&quot;, 18)</span><br><span class=\"line\">    println(user[&quot;name&quot;])</span><br><span class=\"line\">    user[&quot;age&quot;] = 22</span><br><span class=\"line\">    println(user[&quot;age&quot;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，索引运算符不仅仅可以对集合类数据进行操作，对一个普通的<code>Kotlin</code>类也可以发挥同样的作用。如果你脑洞足够大，你还可以发现更多更神奇的玩法。</p>\n<h4 id=\"调用操作符\"><a href=\"#调用操作符\" class=\"headerlink\" title=\"调用操作符\"></a>调用操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a()</td>\n<td style=\"text-align:center\">a.invoke()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i)</td>\n<td style=\"text-align:center\">a.invoke(i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i, j)</td>\n<td style=\"text-align:center\">a.invoke(i, j)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(i_1, ……, i_n)</td>\n<td style=\"text-align:center\">a.invoke(i_1, ……, i_n)</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符并不难，理解它的应用场景却有一定的难度。为了理解它的应用场景，我们来举一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JsonParser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">operator fun JsonParser.invoke(json: String): Map&lt;String, Any&gt; &#123;</span><br><span class=\"line\">    val map = Json.parse(json)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以这样调用</span><br><span class=\"line\">val parser = JsonParser()</span><br><span class=\"line\">val map = parser(&quot;&#123;name: \\&quot;Scott Smith\\&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>这里的调用有点像省略了一个解析Json数据的方法，难道它仅仅就是这个作用吗？是的，调用操作符其实就这一个作用。如果一个Kotlin类仅仅只有一个方法，直接使用括号调用的确是一个不错的主意。不过，在使用的时候还是要稍微注意一下，避免出现歧义。</p>\n<h4 id=\"广义赋值操作符\"><a href=\"#广义赋值操作符\" class=\"headerlink\" title=\"广义赋值操作符\"></a>广义赋值操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a += b</td>\n<td style=\"text-align:center\">a.plusAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a -= b</td>\n<td style=\"text-align:center\">a.minusAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a *= b</td>\n<td style=\"text-align:center\">a.timesAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a /= b</td>\n<td style=\"text-align:center\">a.divAssign(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a %= b</td>\n<td style=\"text-align:center\">a.remAssign(b)</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作符相对比较好理解，我们以<code>Number</code>类为例，举一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 广义赋值运算符</span><br><span class=\"line\">operator fun Number.plusAssign(value: Int) &#123;</span><br><span class=\"line\">    this.value += value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    val number = Number(1)</span><br><span class=\"line\">    number += 2</span><br><span class=\"line\">    println(number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">Number value = 3</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"相等与不等操作符\"><a href=\"#相等与不等操作符\" class=\"headerlink\" title=\"相等与不等操作符\"></a>相等与不等操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a == b</td>\n<td style=\"text-align:center\">a?.equals(b) ?: (b === null)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a != b</td>\n<td style=\"text-align:center\">!(a?.equals(b) ?: (b === null))</td>\n</tr>\n</tbody>\n</table>\n<p>重载这个操作符与Java重写equals方法是一样的。不过，这里要注意与Java的区别，在Java端<code>==</code>用于判断两个对象是否是同一对象（指针级别）。而在Kotlin语言中，如果我们不做任何处理，<code>==</code>等同于使用Java对象的<code>equals</code>方法判断两个对象是否相等。</p>\n<p>另外，这里还有一种特殊情况，如果左值等于null，这个时候<code>a?.equals(b)</code>将返回null值。因此，这里还增加了<code>?:</code>运算符用于进一步判断，在这个情况下，当且仅当b === null的时候，a、b才有可能相等。因此，才有了上面的对应关系，这里以<code>User</code>类为例举一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(var name: String?,</span><br><span class=\"line\">           var age: Int?) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    operator override fun equals(other: Any?): Boolean &#123;</span><br><span class=\"line\">        if(other is User) &#123;</span><br><span class=\"line\">            return (this.name == other.name) &amp;&amp; (this.age == other.age)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：这里有一个特殊的地方，与其它操作符不一样的地方是，如果使用扩展的方式尝试重载该操作符，将会报错。因此，如果要重载该操作符，一定要在类中进行重写。</p>\n<h4 id=\"比较操作符\"><a href=\"#比较操作符\" class=\"headerlink\" title=\"比较操作符\"></a>比较操作符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">对应方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a &gt; b</td>\n<td style=\"text-align:center\">a.compareTo(b) &gt; 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &lt; b</td>\n<td style=\"text-align:center\">a.compareTo(b) &lt; 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &gt;= b</td>\n<td style=\"text-align:center\">a.compareTo(b) &gt;= 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a &lt;= b</td>\n<td style=\"text-align:center\">a.compareTo(b) &lt;= 0</td>\n</tr>\n</tbody>\n</table>\n<p>比较操作符是一个在日常使用中频率非常高的操作符，重载这个操作符只需要掌握以上表格中几个规则即可。我们以<code>Number</code>类为例举一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun Number.compareTo(number: Number): Int &#123;</span><br><span class=\"line\">    return this.value - number.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"属性委托操作符\"><a href=\"#属性委托操作符\" class=\"headerlink\" title=\"属性委托操作符\"></a>属性委托操作符</h4><p><strong>属性委托操作符</strong>是一种非常特殊的操作符，其主要用在代理属性中。关于Kotlin代理的知识，如果你还不了解的话，请参考这篇文章<br> <a href=\"https://www.jianshu.com/p/54a57aac11e6\" target=\"_blank\" rel=\"noopener\">Delegation</a>。这篇文章介绍的相对简略，后面会出一篇更详细的文章介绍代理相关的知识。</p>\n<h4 id=\"中缀调用\"><a href=\"#中缀调用\" class=\"headerlink\" title=\"中缀调用\"></a>中缀调用</h4><p>看到这里，可能有一些追求更高级玩法的同学会问：Kotlin支持自定义操作符吗？</p>\n<p>答案当然是：不能！不过，别失望，<code>infix</code>也许适合你，它其实可以看做一种自定义操作符的实现。这里我们对集合<code>List</code>新增一个扩展方法<code>intersection</code>用于获取两个集合的交集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取两个集合的交集</span><br><span class=\"line\">fun &lt;E&gt; List&lt;E&gt;.interSection(other: List&lt;E&gt;): List&lt;E&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;E&gt;()</span><br><span class=\"line\">    forEach &#123;</span><br><span class=\"line\">        if(other.contains(it)) &#123;</span><br><span class=\"line\">            result.add(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们就可以在<code>List</code>及其子类中使用点语法调用了。但，它看起来仍然不像一个操作符。为了让它更像一个操作符，我们继续做点事情：</p>\n<ul>\n<li>添加<code>infix</code>关键词</li>\n<li>将函数名修改为∩（这是数学上获取交集的标记符号）<br>然而，万万没想到，修改完成后居然报错了。Kotlin并不允许直接使用特殊符号作为函数名开头。因此，我们取形近的字母<code>n</code>用于表示函数名：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取两个集合的交集</span><br><span class=\"line\">infix fun &lt;E&gt; List&lt;E&gt;.n(other: List&lt;E&gt;): List&lt;E&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;E&gt;()</span><br><span class=\"line\">    forEach &#123;</span><br><span class=\"line\">        if(other.contains(it)) &#123;</span><br><span class=\"line\">            result.add(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来，我们就可以这样调用了<code>val interSection = list1 n list2</code>，怎么样？是不是很像自定义了一个获取交集的操作符<code>n</code>？如果你希望自定义操作符，可以尝试这么做。</p>\n<p>其实<code>infix</code>的应用场景还不止这些，接下来，我们再用它完成一件更有意思的事情。</p>\n<p>在实际项目开发中，数据库数据到对象的处理是一件繁琐的过程，最麻烦的地方莫过于思维的转换。那我们是否可以在代码中直接使用SQL语句查询对象数据呢？例如这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val users = Select * from User where age &gt; 18</span><br></pre></td></tr></table></figure></p>\n<p>纸上学来终觉浅，觉知此事需躬行。有了这个idea，接下来，我们就朝着这个目标努力。<br>一、先声明一个<code>Sql</code>类，准备如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix fun select(columnBuilder: ColumnBuilder): Sql &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">infix fun from(entityClass: Class&lt;*&gt;): Sql </span><br><span class=\"line\"></span><br><span class=\"line\">infix fun where(condition: String): Sql </span><br><span class=\"line\"></span><br><span class=\"line\">fun &lt;T&gt; query(): T</span><br></pre></td></tr></table></figure></p>\n<p>二、我们的目的是：最终转换到SQL语句形式。因此，增加如下实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColumnBuilder(var columns: Array&lt;out String&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Sql private constructor() &#123;</span><br><span class=\"line\">    var columns = emptyList&lt;String&gt;()</span><br><span class=\"line\">    var entityClass: Class&lt;*&gt;? = null</span><br><span class=\"line\">    var condition: String? = null</span><br><span class=\"line\"></span><br><span class=\"line\">    companion object &#123;</span><br><span class=\"line\">        fun get(): Sql &#123;</span><br><span class=\"line\">            return Sql()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun select(columnBuilder: ColumnBuilder): Sql &#123;</span><br><span class=\"line\">        this.columns = columnBuilder.columns.asList()</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun from(entityClass: Class&lt;*&gt;): Sql &#123;</span><br><span class=\"line\">        this.entityClass = entityClass</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    infix fun where(condition: String): Sql &#123;</span><br><span class=\"line\">        this.condition = condition</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun &lt;T&gt; query(): T &#123;</span><br><span class=\"line\">        // 此处省略所有条件判断</span><br><span class=\"line\">        val sqlBuilder = StringBuilder(&quot;select &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        val columnBuilder = StringBuilder(&quot;&quot;)</span><br><span class=\"line\">        if(columns.size == 1 &amp;&amp; columns[0] == &quot;*&quot;) &#123;</span><br><span class=\"line\">            columnBuilder.append(&quot;*&quot;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            columns.forEach &#123;</span><br><span class=\"line\">                columnBuilder.append(it).append(&quot;,&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            columnBuilder.delete(columns.size - 1, columns.size)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        val sql = sqlBuilder.append(columnBuilder.toString())</span><br><span class=\"line\">                            .append(&quot; from $&#123;entityClass?.simpleName&#125; where &quot;)</span><br><span class=\"line\">                            .append(condition)</span><br><span class=\"line\">                            .toString()</span><br><span class=\"line\">        println(&quot;执行SQL查询：$sql&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        return execute(sql)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private fun &lt;T&gt; execute(sql: String): T &#123;</span><br><span class=\"line\">        // 仅仅用于测试</span><br><span class=\"line\">        return Any() as T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三、为了看起来更形似，再增加如下两个方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使其看起来像在数据库作用域中执行</span><br><span class=\"line\">fun database(init: Sql.()-&gt;Unit) &#123;</span><br><span class=\"line\">    init.invoke(Sql.get())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 因为infix限制，参数不能直接使用可变参数。因此，我们增加这个方法使参数组装看起来更自然</span><br><span class=\"line\">fun columns(vararg columns: String): ColumnBuilder &#123;</span><br><span class=\"line\">    return ColumnBuilder(columns)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，就是见证奇迹的时刻！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    database &#123;</span><br><span class=\"line\">        (select (columns(&quot;*&quot;)) from User::class.java where &quot;age &gt; 18&quot;).query()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出结果：</span><br><span class=\"line\">执行SQL查询：select * from User where age &gt; 18</span><br></pre></td></tr></table></figure></p>\n<p>为了方便大家查看，我们提取完整执行代码段与SQL语句对比：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select          *       from User             where  age &gt; 18</span><br><span class=\"line\">select  (columns(&quot;*&quot;))  from User::class.java where &quot;age &gt; 18&quot;</span><br></pre></td></tr></table></figure></p>\n<p>神奇吗？<br>至此，我们就可以直接在代码中愉快地使用类似SQL语句的方式进行方法调用了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本篇文章从操作符重载实用的角度讲解了操作符重载的所有相关知识。如文章开头所说，操作符重载是一把双刃剑。用得好事半功倍，用不好事倍功半。因此，我给大家的建议是：使用的时候一定要保证能够自圆其说，简单来说，就是自然。我认为相对于古老的语言C++来说，Kotlin语言操作符重载的设计是非常棒的。如果你知道自己在做什么，我非常推荐你在生产环境中使用操作符重载来简化操作。</p>\n<p>本篇文章例子代码点这里：<a href=\"https://github.com/yuanhoujun/kotlin-samples\" target=\"_blank\" rel=\"noopener\">kotlin-samples</a></p>\n<hr>\n<p>我是欧阳锋，一个热爱Kotlin语言编程的学生。如果你喜欢我的文章，请在文章下方留下你爱的印记。如果你不喜欢我的文章，请先喜欢上我的文章。然后再留下爱的印记！</p>\n<p>下次文章再见，拜拜！</p>\n<hr>\n"},{"title":"10分钟看懂动态代理设计模式","date":"2018-03-02T07:46:00.000Z","comments":1,"_content":"\n> 动态代理是Java语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟JDK动态代理实现，让你彻底明白动态代理设计模式的本质，文章中可能会涉及到一些你没有学习过的知识点或概念。如果恰好遇到了这些知识盲点，请先去学习这部分知识，再来阅读这篇文章。\n\n### 什么是代理\n从字面意思来看，代理比较好理解，无非就是代为处理的意思。举个例子，你在上大学的时候，总是喜欢逃课。因此，你拜托你的同学帮你答到，而自己却窝在宿舍玩游戏... 你的这个同学恰好就充当了代理的作用，代替你去上课。\n\n是的，你没有看错，代理就是这么简单！\n\n理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：\n* 怎么实现代理模式\n* 代理模式有什么实际用途\n\n要理解这两个问题，看一个简单的例子：\n```\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？\n\n有人说，很简单，在Bird->fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。\n```\n   @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n```\n的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？\n\n一定会有人说，我可以在调用的地方这样写：\n```\npublic static void main(String[] args) {\n        Bird bird = new Bird();\n        long start = System.currentTimeMillis();\n        bird.fly();\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n}\n```\n这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？\n\n##### a）使用继承\n继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。\n为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：\n```\npublic class Bird2 extends Bird {\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        \n        super.fly();\n        \n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n这是一种解决方案，还有一种解决方案叫做：**聚合**，其实也是比较容易想到的。\n我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：\n```\npublic class Bird3 implements Flyable {\n    private Bird bird;\n\n    public Bird3(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        bird.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了记录Bird->fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！\n\n继续深入思考，用问题推导来解答这个问题：\n\n**问题一**：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？\n有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。\n\n**问题二**：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？\n有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。\n\n问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 是否可以避免这个问题呢？\n答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable\n\n```\npublic class Bird3 implements Flyable {\n    private Flyable flyable;\n\n    public Bird3(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        flyable.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：\n\n```\npublic class BirdLogProxy implements Flyable {\n    private Flyable flyable;\n\n    public BirdLogProxy(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird fly start...\");\n\n        flyable.fly();\n\n        System.out.println(\"Bird fly end...\");\n    }\n}\n```\n接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：\n\n```\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }\n```\n反过来，可以这么做：\n\n```\n public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdTimeProxy p2 = new BirdTimeProxy(bird);\n        BirdLogProxy p1 = new BirdLogProxy(p2);\n\n        p1.fly();\n }\n```\n\n看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 可以做到，而继承不行呢。我们用一张图来解释一下：\n![](http://upload-images.jianshu.io/upload_images/703764-2d04ad5bbcb2d25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 静态代理\n接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable->fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。\n\n从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：\n* 如果同时代理多个类，依然会导致类无限制扩展\n* 如果类中有多个方法，同样的逻辑需要反复实现\n\n那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：**动态代理**。\n\n### 动态代理\n继续回到上面这个问题：是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢。\n\n这个部分需要一定的抽象思维，我想，你脑海中的第一个解决方案应该是使用反射。反射是用于获取已创建实例的方法或者属性，并对其进行调用或者赋值。很明显，在这里，反射解决不了问题。但是，再大胆一点，如果我们可以动态生成TimeProxy这个类，并且动态编译。然后，再通过反射创建对象并加载到内存中，不就实现了对任意对象进行代理了吗？为了防止你依然一头雾水，我们用一张图来描述接下来要做什么：\n![](http://upload-images.jianshu.io/upload_images/703764-0e22137ce1f0291b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n动态生成Java源文件并且排版是一个非常繁琐的工作，为了简化操作，我们使用 [JavaPoet](https://github.com/square/javapoet) 这个第三方库帮我们生成TimeProxy的源码。希望 [JavaPoet](https://github.com/square/javapoet)  不要成为你的负担，不理解 [JavaPoet](https://github.com/square/javapoet) 没有关系，你只要把它当成一个Java源码生成工具使用即可。\n\nPS：你记住，任何工具库的使用都不会太难，它是为了简化某些操作而出现的，目标是简化而不是繁琐。因此，只要你适应它的规则就轻车熟路了。\n\n##### 第一步：生成TimeProxy源码\n\n```\npublic class Proxy {\n\n    public static Object newProxyInstance() throws IOException {\n        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(\"TimeProxy\")\n                .addSuperinterface(Flyable.class);\n\n        FieldSpec fieldSpec = FieldSpec.builder(Flyable.class, \"flyable\", Modifier.PRIVATE).build();\n        typeSpecBuilder.addField(fieldSpec);\n\n        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(Flyable.class, \"flyable\")\n                .addStatement(\"this.flyable = flyable\")\n                .build();\n        typeSpecBuilder.addMethod(constructorMethodSpec);\n\n        Method[] methods = Flyable.class.getDeclaredMethods();\n        for (Method method : methods) {\n            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())\n                    .addModifiers(Modifier.PUBLIC)\n                    .addAnnotation(Override.class)\n                    .returns(method.getReturnType())\n                    .addStatement(\"long start = $T.currentTimeMillis()\", System.class)\n                    .addCode(\"\\n\")\n                    .addStatement(\"this.flyable.\" + method.getName() + \"()\")\n                    .addCode(\"\\n\")\n                    .addStatement(\"long end = $T.currentTimeMillis()\", System.class)\n                    .addStatement(\"$T.out.println(\\\"Fly Time =\\\" + (end - start))\", System.class)\n                    .build();\n            typeSpecBuilder.addMethod(methodSpec);\n        }\n\n        JavaFile javaFile = JavaFile.builder(\"com.youngfeng.proxy\", typeSpecBuilder.build()).build();\n        // 为了看的更清楚，我将源码文件生成到桌面\n        javaFile.writeTo(new File(\"/Users/ouyangfeng/Desktop/\"));\n\n        return null;\n    }\n\n}\n```\n在main方法中调用Proxy.newProxyInstance()，你将看到桌面已经生成了TimeProxy.java文件，生成的内容如下：\n\n```\npackage com.youngfeng.proxy;\n\nimport java.lang.Override;\nimport java.lang.System;\n\nclass TimeProxy implements Flyable {\n  private Flyable flyable;\n\n  public TimeProxy(Flyable flyable) {\n    this.flyable = flyable;\n  }\n\n  @Override\n  public void fly() {\n    long start = System.currentTimeMillis();\n\n    this.flyable.fly();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"Fly Time =\" + (end - start));\n  }\n}\n```\n\n##### 第二步：编译TimeProxy源码\n编译TimeProxy源码我们直接使用JDK提供的编译工具即可，为了使你看起来更清晰，我使用一个新的辅助类来完成编译操作：\n\n```\npublic class JavaCompiler {\n\n    public static void compile(File javaFile) throws IOException {\n        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();\n        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(null, null, null);\n        Iterable iterable = fileManager.getJavaFileObjects(javaFile);\n        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(null, fileManager, null, null, null, iterable);\n        task.call();\n        fileManager.close();\n    }\n}\n```\n在Proxy->newProxyInstance()方法中调用该方法，编译顺利完成：\n\n```        \n// 为了看的更清楚，我将源码文件生成到桌面\nString sourcePath = \"/Users/ouyangfeng/Desktop/\";\njavaFile.writeTo(new File(sourcePath));\n\n// 编译\nJavaCompiler.compile(new File(sourcePath + \"/com/youngfeng/proxy/TimeProxy.java\"));\n```\n\n![](http://upload-images.jianshu.io/upload_images/703764-0e82c03cdd902aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 第三步：加载到内存中并创建对象\n\n```\n  URL[] urls = new URL[] {new URL(\"file:/\" + sourcePath)};\n  URLClassLoader classLoader = new URLClassLoader(urls);\n  Class clazz = classLoader.loadClass(\"com.youngfeng.proxy.TimeProxy\");\n  Constructor constructor = clazz.getConstructor(Flyable.class);\n  Flyable flyable = (Flyable) constructor.newInstance(new Bird());\n  flyable.fly();\n```\n\n通过以上三个步骤，我们至少解决了下面两个问题：\n* 不再需要手动创建TimeProxy\n* 可以代理任意实现了Flyable接口的类对象，并获取接口方法的执行时间\n\n可是，说好的任意对象呢？\n\n##### 第四步：增加InvocationHandler接口\n查看Proxy->newProxyInstance()的源码，代理类继承的接口我们是写死的，为了增加灵活性，我们将接口类型作为参数传入：\n![](http://upload-images.jianshu.io/upload_images/703764-cd110b5720d14823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接口的灵活性问题解决了，TimeProxy的局限性依然存在，它只能用于获取方法的执行时间，而如果要在方法执行前后打印日志则需要重新创建一个代理类，显然这是不妥的！\n\n为了增加控制的灵活性，我们考虑针将代理的处理逻辑也抽离出来（这里的处理就是打印方法的执行时间）。新增`InvocationHandler`接口，用于处理自定义逻辑：\n\n```\npublic interface InvocationHandler {\n    void invoke(Object proxy, Method method, Object[] args);\n}\n```\n\n想象一下，如果客户程序员需要对代理类进行自定义的处理，只要实现该接口，并在invoke方法中进行相应的处理即可。这里我们在接口中设置了三个参数（其实也是为了和JDK源码保持一致）：\n* proxy => 这个参数指定动态生成的代理类，这里是`TimeProxy`\n* method => 这个参数表示传入接口中的所有Method对象\n* args => 这个参数对应当前method方法中的参数\n\n引入了InvocationHandler接口之后，我们的调用顺序应该变成了这样：\n\n```\nMyInvocationHandler handler = new MyInvocationHandler();\nFlyable proxy = Proxy.newProxyInstance(Flyable.class, handler);\nproxy.fly();\n\n方法执行流：proxy.fly() => handler.invoke()\n```\n\n为此，我们需要在Proxy.newProxyInstance()方法中做如下改动：\n* 在newProxyInstance方法中传入InvocationHandler\n* 在生成的代理类中增加成员变量handler\n* 在生成的代理类方法中，调用invoke方法\n\n```\n  public static Object newProxyInstance(Class inf, InvocationHandler handler) throws Exception {\n        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(\"TimeProxy\")\n                .addModifiers(Modifier.PUBLIC)\n                .addSuperinterface(inf);\n\n        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, \"handler\", Modifier.PRIVATE).build();\n        typeSpecBuilder.addField(fieldSpec);\n\n        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(InvocationHandler.class, \"handler\")\n                .addStatement(\"this.handler = handler\")\n                .build();\n\n        typeSpecBuilder.addMethod(constructorMethodSpec);\n\n        Method[] methods = inf.getDeclaredMethods();\n        for (Method method : methods) {\n            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())\n                    .addModifiers(Modifier.PUBLIC)\n                    .addAnnotation(Override.class)\n                    .returns(method.getReturnType())\n                    .addCode(\"try {\\n\")\n                    .addStatement(\"\\t$T method = \" + inf.getName() + \".class.getMethod(\\\"\" + method.getName() + \"\\\")\", Method.class)\n                    // 为了简单起见，这里参数直接写死为空\n                    .addStatement(\"\\tthis.handler.invoke(this, method, null)\")\n                    .addCode(\"} catch(Exception e) {\\n\")\n                    .addCode(\"\\te.printStackTrace();\\n\")\n                    .addCode(\"}\\n\")\n                    .build();\n            typeSpecBuilder.addMethod(methodSpec);\n        }\n\n        JavaFile javaFile = JavaFile.builder(\"com.youngfeng.proxy\", typeSpecBuilder.build()).build();\n        // 为了看的更清楚，我将源码文件生成到桌面\n        String sourcePath = \"/Users/ouyangfeng/Desktop/\";\n        javaFile.writeTo(new File(sourcePath));\n\n        // 编译\n        JavaCompiler.compile(new File(sourcePath + \"/com/youngfeng/proxy/TimeProxy.java\"));\n\n        // 使用反射load到内存\n        URL[] urls = new URL[] {new URL(\"file:\" + sourcePath)};\n        URLClassLoader classLoader = new URLClassLoader(urls);\n        Class clazz = classLoader.loadClass(\"com.youngfeng.proxy.TimeProxy\");\n        Constructor constructor = clazz.getConstructor(InvocationHandler.class);\n        Object obj = constructor.newInstance(handler);\n\n        return obj;\n }\n```\n\n上面的代码你可能看起来比较吃力，我们直接调用该方法，查看最后生成的源码。在main方法中测试newProxyInstance查看生成的TimeProxy源码：\n\n**测试代码**\n\n```\nProxy.newProxyInstance(Flyable.class, new MyInvocationHandler(new Bird()));\n```\n\n**生成的TimeProxy.java源码**\n\n```\npackage com.youngfeng.proxy;\n\nimport java.lang.Override;\nimport java.lang.reflect.Method;\n\npublic class TimeProxy implements Flyable {\n  private InvocationHandler handler;\n\n  public TimeProxy(InvocationHandler handler) {\n    this.handler = handler;\n  }\n\n  @Override\n  public void fly() {\n    try {\n    \tMethod method = com.youngfeng.proxy.Flyable.class.getMethod(\"fly\");\n    \tthis.handler.invoke(this, method, null);\n    } catch(Exception e) {\n    \te.printStackTrace();\n    }\n  }\n}\n```\n\n**MyInvocationHandler.java**\n\n```\npublic class MyInvocationHandler implements InvocationHandler {\n    private Bird bird;\n\n    public MyInvocationHandler(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void invoke(Object proxy, Method method, Object[] args) {\n        long start = System.currentTimeMillis();\n\n        try {\n            method.invoke(bird, new Object[] {});\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n至此，整个方法栈的调用栈变成了这样：\n![](http://upload-images.jianshu.io/upload_images/703764-4ff1323a12cb9c39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n看到这里，估计很多同学已经晕了，在静态代理部分，我们在代理类中传入了被代理对象。可是，使用newProxyInstance生成动态代理对象的时候，我们居然不再需要传入被代理对象了。我们传入了的实际对象是InvocationHandler实现类的实例，这看起来有点像生成了InvocationHandler的代理对象，在动态生成的代理类的任意方法中都会间接调用InvocationHandler->invoke(proxy, method, args)方法。\n\n其实的确是这样。TimeProxy真正代理的对象就是InvocationHandler，不过这里设计的巧妙之处在于，InvocationHandler是一个接口，真正的实现由用户指定。另外，在每一个方法执行的时候，invoke方法都会被调用 ，这个时候如果你需要对某个方法进行自定义逻辑处理，可以根据method的特征信息进行判断分别处理。\n\n### 如何使用\n上面这段解释是告诉你在执行Proxy->newProxyInstance方法的时候真正发生的事情，而在实际使用过程中你完全可以忘掉上面的解释。按照设计者的初衷，我们做如下简单归纳：\n* Proxy->newProxyInstance(infs, handler) 用于生成代理对象\n* InvocationHandler：这个接口主要用于自定义代理逻辑处理\n* 为了完成对被代理对象的方法拦截，我们需要在InvocationHandler对象中传入被代理对象实例。\n\n查看上面的代码，你可以看到我将Bird实例已经传入到了MyInvocationHandler中，原因就是第三点。\n\n这样设计有什么好处呢？有人说，我们大费周章，饶了一大圈，最终变成了这个样子，到底图什么呢？\n\n想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！\n\n只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。\n\n事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。我们可以修改为和JDK命名一致，即$Proxy0，感兴趣的同学请自行实践，本篇文章的代码将放到我的Github仓库，文章结尾会给出代码地址。\n\n### JDK实现揭秘\n通过上面的这些步骤，我们完成了一个简易的仿JDK实现的动态代理逻辑。接下来，我们一起来看一看JDK实现的动态代理和我们到底有什么不同。\n\n**Proxy.java**\n![](http://upload-images.jianshu.io/upload_images/703764-2f5a7b2762949e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**InvocationHandler**\n![](http://upload-images.jianshu.io/upload_images/703764-9d58bd4930a28081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到，官方版本Proxy类提供的方法多一些，而我们主要使用的接口newProxyInstance参数也和我们设计的不太一样。这里给大家简单解释一下，每个参数的意义：\n* Classloader：类加载器，你可以使用自定义的类加载器，我们的实现版本为了简化，直接在代码中写死了Classloader。\n* Class<?>[]：第二个参数也和我们的实现版本不一致，这个其实很容易理解，我们应该允许我们自己实现的代理类同时实现多个接口。前面设计只传入一个接口，只是为了简化实现，让你专注核心逻辑实现而已。\n\n最后一个参数就不用说了，和我们实现的版本完全是一样的。\n\n仔细观察官方版本的InvocationHandler，它和我们自己的实现的版本也有一个细微的差别：官方版本invoke方法有返回值，而我们的版本中是没有返回值的。那么，返回值到底有什么作用呢？直接来看官方文档：\n![](http://upload-images.jianshu.io/upload_images/703764-940eef4374694714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*核心思想：这里的返回值类型必须和传入接口的返回值类型一致，或者与其封装对象的类型一致。*\n\n遗憾的是，这里并没有说明返回值的用途，其实这里稍微发挥一下想象力就知道了。在我们的版本实现中，Flyable接口的所有方法都是没有返回值的，问题是，如果有返回值呢？是的，你没有猜错，这里的invoke方法对应的就是传入接口中方法的返回值。\n\n### 答疑解惑\n##### invoke方法的第一个参数proxy到底有什么作用？\n这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。\n\n##### 动态代理到底有什么用？\n学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 [AOP](https://baike.baidu.com/item/AOP/1332219)。所谓的AOP，就像刀一样，抓住时机，趁机插入。\n![](http://upload-images.jianshu.io/upload_images/703764-4b3ff894932ec1e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n基于这样一种动态特性，我们可以用它做很多事情，例如：\n* 事务提交或回退（Web开发中很常见）\n* 权限管理\n* 自定义缓存逻辑处理\n* SDK Bug修复\n...\n\n如果你阅读过 [Android_Slide_To_Close](https://github.com/yuanhoujun/Android_Slide_To_Close) 的源码会发现，它也在某个地方使用了动态代理设计模式。\n\n### 总结\n到此为止，关于动态代理的所有讲解已经结束了，原谅我使用了一个诱导性的标题“骗”你进来阅读这篇文章。如果你不是一个久经沙场的“老司机”，10分钟完全看懂动态代理设计模式还是有一定难度的。但即使没有看懂也没关系，如果你在第一次阅读完这篇文章后依然一头雾水，就不妨再仔细阅读一次。在阅读的过程中，一定要跟着文章思路去敲代码。反反复复，一定会看懂的。我在刚刚学习动态代理设计模式的时候就反复看了不下5遍，并且亲自敲代码实践了多次。\n\n为了让你少走弯路，我认为看懂这篇文章，你至少需要学习以下知识点：\n* 至少已经理解了面向对象语言的多态特性\n* 了解简单的反射用法\n* 会简单使用 [JavaPoet](https://github.com/square/javapoet) 生成Java源码\n\n如果你在阅读文章的过程中，有任何不理解的问题或者建议，欢迎在文章下方留言告诉我！\n\n本篇文章例子代码：[https://github.com/yuanhoujun/java-dynamic-proxy](https://github.com/yuanhoujun/java-dynamic-proxy)\n\n---\n我是欧阳锋，设计模式是一种非常好的编程指导模型，它在所有编程语言中是通用的，并且是亘古不变的。我建议你在这个方面多下苦功，不要纠结在一些重复的劳动中，活用设计模式会让你的代码更显灵动。想要了解我吗？看这里：[欧阳锋档案馆](http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/)。\n","source":"_posts/design pattern/10分钟看懂动态代理设计模式.md","raw":"title: 10分钟看懂动态代理设计模式\ndate: 2018/03/02 15:46\ncomments: true\ntags:\n- Java\n- 设计模式\n- 动态代理\ncategories:\n- 设计模式\n---\n\n> 动态代理是Java语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟JDK动态代理实现，让你彻底明白动态代理设计模式的本质，文章中可能会涉及到一些你没有学习过的知识点或概念。如果恰好遇到了这些知识盲点，请先去学习这部分知识，再来阅读这篇文章。\n\n### 什么是代理\n从字面意思来看，代理比较好理解，无非就是代为处理的意思。举个例子，你在上大学的时候，总是喜欢逃课。因此，你拜托你的同学帮你答到，而自己却窝在宿舍玩游戏... 你的这个同学恰好就充当了代理的作用，代替你去上课。\n\n是的，你没有看错，代理就是这么简单！\n\n理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：\n* 怎么实现代理模式\n* 代理模式有什么实际用途\n\n要理解这两个问题，看一个简单的例子：\n```\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？\n\n有人说，很简单，在Bird->fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。\n```\n   @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n```\n的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？\n\n一定会有人说，我可以在调用的地方这样写：\n```\npublic static void main(String[] args) {\n        Bird bird = new Bird();\n        long start = System.currentTimeMillis();\n        bird.fly();\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n}\n```\n这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？\n\n##### a）使用继承\n继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。\n为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：\n```\npublic class Bird2 extends Bird {\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        \n        super.fly();\n        \n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n这是一种解决方案，还有一种解决方案叫做：**聚合**，其实也是比较容易想到的。\n我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：\n```\npublic class Bird3 implements Flyable {\n    private Bird bird;\n\n    public Bird3(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        bird.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了记录Bird->fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！\n\n继续深入思考，用问题推导来解答这个问题：\n\n**问题一**：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？\n有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。\n\n**问题二**：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？\n有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。\n\n问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 是否可以避免这个问题呢？\n答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable\n\n```\npublic class Bird3 implements Flyable {\n    private Flyable flyable;\n\n    public Bird3(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        flyable.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：\n\n```\npublic class BirdLogProxy implements Flyable {\n    private Flyable flyable;\n\n    public BirdLogProxy(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird fly start...\");\n\n        flyable.fly();\n\n        System.out.println(\"Bird fly end...\");\n    }\n}\n```\n接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：\n\n```\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }\n```\n反过来，可以这么做：\n\n```\n public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdTimeProxy p2 = new BirdTimeProxy(bird);\n        BirdLogProxy p1 = new BirdLogProxy(p2);\n\n        p1.fly();\n }\n```\n\n看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 可以做到，而继承不行呢。我们用一张图来解释一下：\n![](http://upload-images.jianshu.io/upload_images/703764-2d04ad5bbcb2d25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 静态代理\n接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable->fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。\n\n从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：\n* 如果同时代理多个类，依然会导致类无限制扩展\n* 如果类中有多个方法，同样的逻辑需要反复实现\n\n那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：**动态代理**。\n\n### 动态代理\n继续回到上面这个问题：是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢。\n\n这个部分需要一定的抽象思维，我想，你脑海中的第一个解决方案应该是使用反射。反射是用于获取已创建实例的方法或者属性，并对其进行调用或者赋值。很明显，在这里，反射解决不了问题。但是，再大胆一点，如果我们可以动态生成TimeProxy这个类，并且动态编译。然后，再通过反射创建对象并加载到内存中，不就实现了对任意对象进行代理了吗？为了防止你依然一头雾水，我们用一张图来描述接下来要做什么：\n![](http://upload-images.jianshu.io/upload_images/703764-0e22137ce1f0291b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n动态生成Java源文件并且排版是一个非常繁琐的工作，为了简化操作，我们使用 [JavaPoet](https://github.com/square/javapoet) 这个第三方库帮我们生成TimeProxy的源码。希望 [JavaPoet](https://github.com/square/javapoet)  不要成为你的负担，不理解 [JavaPoet](https://github.com/square/javapoet) 没有关系，你只要把它当成一个Java源码生成工具使用即可。\n\nPS：你记住，任何工具库的使用都不会太难，它是为了简化某些操作而出现的，目标是简化而不是繁琐。因此，只要你适应它的规则就轻车熟路了。\n\n##### 第一步：生成TimeProxy源码\n\n```\npublic class Proxy {\n\n    public static Object newProxyInstance() throws IOException {\n        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(\"TimeProxy\")\n                .addSuperinterface(Flyable.class);\n\n        FieldSpec fieldSpec = FieldSpec.builder(Flyable.class, \"flyable\", Modifier.PRIVATE).build();\n        typeSpecBuilder.addField(fieldSpec);\n\n        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(Flyable.class, \"flyable\")\n                .addStatement(\"this.flyable = flyable\")\n                .build();\n        typeSpecBuilder.addMethod(constructorMethodSpec);\n\n        Method[] methods = Flyable.class.getDeclaredMethods();\n        for (Method method : methods) {\n            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())\n                    .addModifiers(Modifier.PUBLIC)\n                    .addAnnotation(Override.class)\n                    .returns(method.getReturnType())\n                    .addStatement(\"long start = $T.currentTimeMillis()\", System.class)\n                    .addCode(\"\\n\")\n                    .addStatement(\"this.flyable.\" + method.getName() + \"()\")\n                    .addCode(\"\\n\")\n                    .addStatement(\"long end = $T.currentTimeMillis()\", System.class)\n                    .addStatement(\"$T.out.println(\\\"Fly Time =\\\" + (end - start))\", System.class)\n                    .build();\n            typeSpecBuilder.addMethod(methodSpec);\n        }\n\n        JavaFile javaFile = JavaFile.builder(\"com.youngfeng.proxy\", typeSpecBuilder.build()).build();\n        // 为了看的更清楚，我将源码文件生成到桌面\n        javaFile.writeTo(new File(\"/Users/ouyangfeng/Desktop/\"));\n\n        return null;\n    }\n\n}\n```\n在main方法中调用Proxy.newProxyInstance()，你将看到桌面已经生成了TimeProxy.java文件，生成的内容如下：\n\n```\npackage com.youngfeng.proxy;\n\nimport java.lang.Override;\nimport java.lang.System;\n\nclass TimeProxy implements Flyable {\n  private Flyable flyable;\n\n  public TimeProxy(Flyable flyable) {\n    this.flyable = flyable;\n  }\n\n  @Override\n  public void fly() {\n    long start = System.currentTimeMillis();\n\n    this.flyable.fly();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"Fly Time =\" + (end - start));\n  }\n}\n```\n\n##### 第二步：编译TimeProxy源码\n编译TimeProxy源码我们直接使用JDK提供的编译工具即可，为了使你看起来更清晰，我使用一个新的辅助类来完成编译操作：\n\n```\npublic class JavaCompiler {\n\n    public static void compile(File javaFile) throws IOException {\n        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();\n        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(null, null, null);\n        Iterable iterable = fileManager.getJavaFileObjects(javaFile);\n        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(null, fileManager, null, null, null, iterable);\n        task.call();\n        fileManager.close();\n    }\n}\n```\n在Proxy->newProxyInstance()方法中调用该方法，编译顺利完成：\n\n```        \n// 为了看的更清楚，我将源码文件生成到桌面\nString sourcePath = \"/Users/ouyangfeng/Desktop/\";\njavaFile.writeTo(new File(sourcePath));\n\n// 编译\nJavaCompiler.compile(new File(sourcePath + \"/com/youngfeng/proxy/TimeProxy.java\"));\n```\n\n![](http://upload-images.jianshu.io/upload_images/703764-0e82c03cdd902aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 第三步：加载到内存中并创建对象\n\n```\n  URL[] urls = new URL[] {new URL(\"file:/\" + sourcePath)};\n  URLClassLoader classLoader = new URLClassLoader(urls);\n  Class clazz = classLoader.loadClass(\"com.youngfeng.proxy.TimeProxy\");\n  Constructor constructor = clazz.getConstructor(Flyable.class);\n  Flyable flyable = (Flyable) constructor.newInstance(new Bird());\n  flyable.fly();\n```\n\n通过以上三个步骤，我们至少解决了下面两个问题：\n* 不再需要手动创建TimeProxy\n* 可以代理任意实现了Flyable接口的类对象，并获取接口方法的执行时间\n\n可是，说好的任意对象呢？\n\n##### 第四步：增加InvocationHandler接口\n查看Proxy->newProxyInstance()的源码，代理类继承的接口我们是写死的，为了增加灵活性，我们将接口类型作为参数传入：\n![](http://upload-images.jianshu.io/upload_images/703764-cd110b5720d14823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接口的灵活性问题解决了，TimeProxy的局限性依然存在，它只能用于获取方法的执行时间，而如果要在方法执行前后打印日志则需要重新创建一个代理类，显然这是不妥的！\n\n为了增加控制的灵活性，我们考虑针将代理的处理逻辑也抽离出来（这里的处理就是打印方法的执行时间）。新增`InvocationHandler`接口，用于处理自定义逻辑：\n\n```\npublic interface InvocationHandler {\n    void invoke(Object proxy, Method method, Object[] args);\n}\n```\n\n想象一下，如果客户程序员需要对代理类进行自定义的处理，只要实现该接口，并在invoke方法中进行相应的处理即可。这里我们在接口中设置了三个参数（其实也是为了和JDK源码保持一致）：\n* proxy => 这个参数指定动态生成的代理类，这里是`TimeProxy`\n* method => 这个参数表示传入接口中的所有Method对象\n* args => 这个参数对应当前method方法中的参数\n\n引入了InvocationHandler接口之后，我们的调用顺序应该变成了这样：\n\n```\nMyInvocationHandler handler = new MyInvocationHandler();\nFlyable proxy = Proxy.newProxyInstance(Flyable.class, handler);\nproxy.fly();\n\n方法执行流：proxy.fly() => handler.invoke()\n```\n\n为此，我们需要在Proxy.newProxyInstance()方法中做如下改动：\n* 在newProxyInstance方法中传入InvocationHandler\n* 在生成的代理类中增加成员变量handler\n* 在生成的代理类方法中，调用invoke方法\n\n```\n  public static Object newProxyInstance(Class inf, InvocationHandler handler) throws Exception {\n        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(\"TimeProxy\")\n                .addModifiers(Modifier.PUBLIC)\n                .addSuperinterface(inf);\n\n        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, \"handler\", Modifier.PRIVATE).build();\n        typeSpecBuilder.addField(fieldSpec);\n\n        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(InvocationHandler.class, \"handler\")\n                .addStatement(\"this.handler = handler\")\n                .build();\n\n        typeSpecBuilder.addMethod(constructorMethodSpec);\n\n        Method[] methods = inf.getDeclaredMethods();\n        for (Method method : methods) {\n            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())\n                    .addModifiers(Modifier.PUBLIC)\n                    .addAnnotation(Override.class)\n                    .returns(method.getReturnType())\n                    .addCode(\"try {\\n\")\n                    .addStatement(\"\\t$T method = \" + inf.getName() + \".class.getMethod(\\\"\" + method.getName() + \"\\\")\", Method.class)\n                    // 为了简单起见，这里参数直接写死为空\n                    .addStatement(\"\\tthis.handler.invoke(this, method, null)\")\n                    .addCode(\"} catch(Exception e) {\\n\")\n                    .addCode(\"\\te.printStackTrace();\\n\")\n                    .addCode(\"}\\n\")\n                    .build();\n            typeSpecBuilder.addMethod(methodSpec);\n        }\n\n        JavaFile javaFile = JavaFile.builder(\"com.youngfeng.proxy\", typeSpecBuilder.build()).build();\n        // 为了看的更清楚，我将源码文件生成到桌面\n        String sourcePath = \"/Users/ouyangfeng/Desktop/\";\n        javaFile.writeTo(new File(sourcePath));\n\n        // 编译\n        JavaCompiler.compile(new File(sourcePath + \"/com/youngfeng/proxy/TimeProxy.java\"));\n\n        // 使用反射load到内存\n        URL[] urls = new URL[] {new URL(\"file:\" + sourcePath)};\n        URLClassLoader classLoader = new URLClassLoader(urls);\n        Class clazz = classLoader.loadClass(\"com.youngfeng.proxy.TimeProxy\");\n        Constructor constructor = clazz.getConstructor(InvocationHandler.class);\n        Object obj = constructor.newInstance(handler);\n\n        return obj;\n }\n```\n\n上面的代码你可能看起来比较吃力，我们直接调用该方法，查看最后生成的源码。在main方法中测试newProxyInstance查看生成的TimeProxy源码：\n\n**测试代码**\n\n```\nProxy.newProxyInstance(Flyable.class, new MyInvocationHandler(new Bird()));\n```\n\n**生成的TimeProxy.java源码**\n\n```\npackage com.youngfeng.proxy;\n\nimport java.lang.Override;\nimport java.lang.reflect.Method;\n\npublic class TimeProxy implements Flyable {\n  private InvocationHandler handler;\n\n  public TimeProxy(InvocationHandler handler) {\n    this.handler = handler;\n  }\n\n  @Override\n  public void fly() {\n    try {\n    \tMethod method = com.youngfeng.proxy.Flyable.class.getMethod(\"fly\");\n    \tthis.handler.invoke(this, method, null);\n    } catch(Exception e) {\n    \te.printStackTrace();\n    }\n  }\n}\n```\n\n**MyInvocationHandler.java**\n\n```\npublic class MyInvocationHandler implements InvocationHandler {\n    private Bird bird;\n\n    public MyInvocationHandler(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void invoke(Object proxy, Method method, Object[] args) {\n        long start = System.currentTimeMillis();\n\n        try {\n            method.invoke(bird, new Object[] {});\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n至此，整个方法栈的调用栈变成了这样：\n![](http://upload-images.jianshu.io/upload_images/703764-4ff1323a12cb9c39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n看到这里，估计很多同学已经晕了，在静态代理部分，我们在代理类中传入了被代理对象。可是，使用newProxyInstance生成动态代理对象的时候，我们居然不再需要传入被代理对象了。我们传入了的实际对象是InvocationHandler实现类的实例，这看起来有点像生成了InvocationHandler的代理对象，在动态生成的代理类的任意方法中都会间接调用InvocationHandler->invoke(proxy, method, args)方法。\n\n其实的确是这样。TimeProxy真正代理的对象就是InvocationHandler，不过这里设计的巧妙之处在于，InvocationHandler是一个接口，真正的实现由用户指定。另外，在每一个方法执行的时候，invoke方法都会被调用 ，这个时候如果你需要对某个方法进行自定义逻辑处理，可以根据method的特征信息进行判断分别处理。\n\n### 如何使用\n上面这段解释是告诉你在执行Proxy->newProxyInstance方法的时候真正发生的事情，而在实际使用过程中你完全可以忘掉上面的解释。按照设计者的初衷，我们做如下简单归纳：\n* Proxy->newProxyInstance(infs, handler) 用于生成代理对象\n* InvocationHandler：这个接口主要用于自定义代理逻辑处理\n* 为了完成对被代理对象的方法拦截，我们需要在InvocationHandler对象中传入被代理对象实例。\n\n查看上面的代码，你可以看到我将Bird实例已经传入到了MyInvocationHandler中，原因就是第三点。\n\n这样设计有什么好处呢？有人说，我们大费周章，饶了一大圈，最终变成了这个样子，到底图什么呢？\n\n想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！\n\n只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。\n\n事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。我们可以修改为和JDK命名一致，即$Proxy0，感兴趣的同学请自行实践，本篇文章的代码将放到我的Github仓库，文章结尾会给出代码地址。\n\n### JDK实现揭秘\n通过上面的这些步骤，我们完成了一个简易的仿JDK实现的动态代理逻辑。接下来，我们一起来看一看JDK实现的动态代理和我们到底有什么不同。\n\n**Proxy.java**\n![](http://upload-images.jianshu.io/upload_images/703764-2f5a7b2762949e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**InvocationHandler**\n![](http://upload-images.jianshu.io/upload_images/703764-9d58bd4930a28081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到，官方版本Proxy类提供的方法多一些，而我们主要使用的接口newProxyInstance参数也和我们设计的不太一样。这里给大家简单解释一下，每个参数的意义：\n* Classloader：类加载器，你可以使用自定义的类加载器，我们的实现版本为了简化，直接在代码中写死了Classloader。\n* Class<?>[]：第二个参数也和我们的实现版本不一致，这个其实很容易理解，我们应该允许我们自己实现的代理类同时实现多个接口。前面设计只传入一个接口，只是为了简化实现，让你专注核心逻辑实现而已。\n\n最后一个参数就不用说了，和我们实现的版本完全是一样的。\n\n仔细观察官方版本的InvocationHandler，它和我们自己的实现的版本也有一个细微的差别：官方版本invoke方法有返回值，而我们的版本中是没有返回值的。那么，返回值到底有什么作用呢？直接来看官方文档：\n![](http://upload-images.jianshu.io/upload_images/703764-940eef4374694714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*核心思想：这里的返回值类型必须和传入接口的返回值类型一致，或者与其封装对象的类型一致。*\n\n遗憾的是，这里并没有说明返回值的用途，其实这里稍微发挥一下想象力就知道了。在我们的版本实现中，Flyable接口的所有方法都是没有返回值的，问题是，如果有返回值呢？是的，你没有猜错，这里的invoke方法对应的就是传入接口中方法的返回值。\n\n### 答疑解惑\n##### invoke方法的第一个参数proxy到底有什么作用？\n这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。\n\n##### 动态代理到底有什么用？\n学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 [AOP](https://baike.baidu.com/item/AOP/1332219)。所谓的AOP，就像刀一样，抓住时机，趁机插入。\n![](http://upload-images.jianshu.io/upload_images/703764-4b3ff894932ec1e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n基于这样一种动态特性，我们可以用它做很多事情，例如：\n* 事务提交或回退（Web开发中很常见）\n* 权限管理\n* 自定义缓存逻辑处理\n* SDK Bug修复\n...\n\n如果你阅读过 [Android_Slide_To_Close](https://github.com/yuanhoujun/Android_Slide_To_Close) 的源码会发现，它也在某个地方使用了动态代理设计模式。\n\n### 总结\n到此为止，关于动态代理的所有讲解已经结束了，原谅我使用了一个诱导性的标题“骗”你进来阅读这篇文章。如果你不是一个久经沙场的“老司机”，10分钟完全看懂动态代理设计模式还是有一定难度的。但即使没有看懂也没关系，如果你在第一次阅读完这篇文章后依然一头雾水，就不妨再仔细阅读一次。在阅读的过程中，一定要跟着文章思路去敲代码。反反复复，一定会看懂的。我在刚刚学习动态代理设计模式的时候就反复看了不下5遍，并且亲自敲代码实践了多次。\n\n为了让你少走弯路，我认为看懂这篇文章，你至少需要学习以下知识点：\n* 至少已经理解了面向对象语言的多态特性\n* 了解简单的反射用法\n* 会简单使用 [JavaPoet](https://github.com/square/javapoet) 生成Java源码\n\n如果你在阅读文章的过程中，有任何不理解的问题或者建议，欢迎在文章下方留言告诉我！\n\n本篇文章例子代码：[https://github.com/yuanhoujun/java-dynamic-proxy](https://github.com/yuanhoujun/java-dynamic-proxy)\n\n---\n我是欧阳锋，设计模式是一种非常好的编程指导模型，它在所有编程语言中是通用的，并且是亘古不变的。我建议你在这个方面多下苦功，不要纠结在一些重复的劳动中，活用设计模式会让你的代码更显灵动。想要了解我吗？看这里：[欧阳锋档案馆](http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/)。\n","slug":"design pattern/10分钟看懂动态代理设计模式","published":1,"updated":"2019-04-28T12:39:23.522Z","_id":"cjv0x7ujm005ubkb4la8x1tmm","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>动态代理是Java语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟JDK动态代理实现，让你彻底明白动态代理设计模式的本质，文章中可能会涉及到一些你没有学习过的知识点或概念。如果恰好遇到了这些知识盲点，请先去学习这部分知识，再来阅读这篇文章。</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>从字面意思来看，代理比较好理解，无非就是代为处理的意思。举个例子，你在上大学的时候，总是喜欢逃课。因此，你拜托你的同学帮你答到，而自己却窝在宿舍玩游戏… 你的这个同学恰好就充当了代理的作用，代替你去上课。</p>\n<p>是的，你没有看错，代理就是这么简单！</p>\n<p>理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：</p>\n<ul>\n<li>怎么实现代理模式</li>\n<li>代理模式有什么实际用途</li>\n</ul>\n<p>要理解这两个问题，看一个简单的例子：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Flyable &#123;</span><br><span class=\"line\">    void fly();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Bird implements Flyable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        System.out.println(&quot;Bird is flying...&quot;);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(new Random().nextInt(1000));</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？</p>\n<p>有人说，很简单，在Bird-&gt;fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"> public void fly() &#123;</span><br><span class=\"line\">     long start = System.currentTimeMillis();</span><br><span class=\"line\">     System.out.println(&quot;Bird is flying...&quot;);</span><br><span class=\"line\">     try &#123;</span><br><span class=\"line\">         Thread.sleep(new Random().nextInt(1000));</span><br><span class=\"line\">     &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     long end = System.currentTimeMillis();</span><br><span class=\"line\">     System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？</p>\n<p>一定会有人说，我可以在调用的地方这样写：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Bird bird = new Bird();</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\">        bird.fly();</span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？</p>\n<h5 id=\"a）使用继承\"><a href=\"#a）使用继承\" class=\"headerlink\" title=\"a）使用继承\"></a>a）使用继承</h5><p>继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。<br>为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird2 extends Bird &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\">        </span><br><span class=\"line\">        super.fly();</span><br><span class=\"line\">        </span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是一种解决方案，还有一种解决方案叫做：<strong>聚合</strong>，其实也是比较容易想到的。<br>我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird3 implements Flyable &#123;</span><br><span class=\"line\">    private Bird bird;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Bird3(Bird bird) &#123;</span><br><span class=\"line\">        this.bird = bird;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        bird.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了记录Bird-&gt;fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！</p>\n<p>继续深入思考，用问题推导来解答这个问题：</p>\n<p><strong>问题一</strong>：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？<br>有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。</p>\n<p><strong>问题二</strong>：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？<br>有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。</p>\n<p>问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 是否可以避免这个问题呢？<br>答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird3 implements Flyable &#123;</span><br><span class=\"line\">    private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Bird3(Flyable flyable) &#123;</span><br><span class=\"line\">        this.flyable = flyable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BirdLogProxy implements Flyable &#123;</span><br><span class=\"line\">    private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BirdLogProxy(Flyable flyable) &#123;</span><br><span class=\"line\">        this.flyable = flyable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        System.out.println(&quot;Bird fly start...&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;Bird fly end...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Bird bird = new Bird();</span><br><span class=\"line\">    BirdLogProxy p1 = new BirdLogProxy(bird);</span><br><span class=\"line\">    BirdTimeProxy p2 = new BirdTimeProxy(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">    p2.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反过来，可以这么做：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">       Bird bird = new Bird();</span><br><span class=\"line\">       BirdTimeProxy p2 = new BirdTimeProxy(bird);</span><br><span class=\"line\">       BirdLogProxy p1 = new BirdLogProxy(p2);</span><br><span class=\"line\"></span><br><span class=\"line\">       p1.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 可以做到，而继承不行呢。我们用一张图来解释一下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2d04ad5bbcb2d25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable-&gt;fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。</p>\n<p>从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：</p>\n<ul>\n<li>如果同时代理多个类，依然会导致类无限制扩展</li>\n<li>如果类中有多个方法，同样的逻辑需要反复实现</li>\n</ul>\n<p>那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：<strong>动态代理</strong>。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>继续回到上面这个问题：是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢。</p>\n<p>这个部分需要一定的抽象思维，我想，你脑海中的第一个解决方案应该是使用反射。反射是用于获取已创建实例的方法或者属性，并对其进行调用或者赋值。很明显，在这里，反射解决不了问题。但是，再大胆一点，如果我们可以动态生成TimeProxy这个类，并且动态编译。然后，再通过反射创建对象并加载到内存中，不就实现了对任意对象进行代理了吗？为了防止你依然一头雾水，我们用一张图来描述接下来要做什么：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-0e22137ce1f0291b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>动态生成Java源文件并且排版是一个非常繁琐的工作，为了简化操作，我们使用 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 这个第三方库帮我们生成TimeProxy的源码。希望 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a>  不要成为你的负担，不理解 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 没有关系，你只要把它当成一个Java源码生成工具使用即可。</p>\n<p>PS：你记住，任何工具库的使用都不会太难，它是为了简化某些操作而出现的，目标是简化而不是繁琐。因此，只要你适应它的规则就轻车熟路了。</p>\n<h5 id=\"第一步：生成TimeProxy源码\"><a href=\"#第一步：生成TimeProxy源码\" class=\"headerlink\" title=\"第一步：生成TimeProxy源码\"></a>第一步：生成TimeProxy源码</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Proxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object newProxyInstance() throws IOException &#123;</span><br><span class=\"line\">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(&quot;TimeProxy&quot;)</span><br><span class=\"line\">                .addSuperinterface(Flyable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FieldSpec fieldSpec = FieldSpec.builder(Flyable.class, &quot;flyable&quot;, Modifier.PRIVATE).build();</span><br><span class=\"line\">        typeSpecBuilder.addField(fieldSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addParameter(Flyable.class, &quot;flyable&quot;)</span><br><span class=\"line\">                .addStatement(&quot;this.flyable = flyable&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method[] methods = Flyable.class.getDeclaredMethods();</span><br><span class=\"line\">        for (Method method : methods) &#123;</span><br><span class=\"line\">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class=\"line\">                    .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                    .addAnnotation(Override.class)</span><br><span class=\"line\">                    .returns(method.getReturnType())</span><br><span class=\"line\">                    .addStatement(&quot;long start = $T.currentTimeMillis()&quot;, System.class)</span><br><span class=\"line\">                    .addCode(&quot;\\n&quot;)</span><br><span class=\"line\">                    .addStatement(&quot;this.flyable.&quot; + method.getName() + &quot;()&quot;)</span><br><span class=\"line\">                    .addCode(&quot;\\n&quot;)</span><br><span class=\"line\">                    .addStatement(&quot;long end = $T.currentTimeMillis()&quot;, System.class)</span><br><span class=\"line\">                    .addStatement(&quot;$T.out.println(\\&quot;Fly Time =\\&quot; + (end - start))&quot;, System.class)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JavaFile javaFile = JavaFile.builder(&quot;com.youngfeng.proxy&quot;, typeSpecBuilder.build()).build();</span><br><span class=\"line\">        // 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">        javaFile.writeTo(new File(&quot;/Users/ouyangfeng/Desktop/&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在main方法中调用Proxy.newProxyInstance()，你将看到桌面已经生成了TimeProxy.java文件，生成的内容如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.youngfeng.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Override;</span><br><span class=\"line\">import java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\">class TimeProxy implements Flyable &#123;</span><br><span class=\"line\">  private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TimeProxy(Flyable flyable) &#123;</span><br><span class=\"line\">    this.flyable = flyable;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void fly() &#123;</span><br><span class=\"line\">    long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    this.flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">    long end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(&quot;Fly Time =&quot; + (end - start));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二步：编译TimeProxy源码\"><a href=\"#第二步：编译TimeProxy源码\" class=\"headerlink\" title=\"第二步：编译TimeProxy源码\"></a>第二步：编译TimeProxy源码</h5><p>编译TimeProxy源码我们直接使用JDK提供的编译工具即可，为了使你看起来更清晰，我使用一个新的辅助类来完成编译操作：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JavaCompiler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void compile(File javaFile) throws IOException &#123;</span><br><span class=\"line\">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class=\"line\">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(null, null, null);</span><br><span class=\"line\">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class=\"line\">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(null, fileManager, null, null, null, iterable);</span><br><span class=\"line\">        task.call();</span><br><span class=\"line\">        fileManager.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Proxy-&gt;newProxyInstance()方法中调用该方法，编译顺利完成：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">String sourcePath = &quot;/Users/ouyangfeng/Desktop/&quot;;</span><br><span class=\"line\">javaFile.writeTo(new File(sourcePath));</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译</span><br><span class=\"line\">JavaCompiler.compile(new File(sourcePath + &quot;/com/youngfeng/proxy/TimeProxy.java&quot;));</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-0e82c03cdd902aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h5 id=\"第三步：加载到内存中并创建对象\"><a href=\"#第三步：加载到内存中并创建对象\" class=\"headerlink\" title=\"第三步：加载到内存中并创建对象\"></a>第三步：加载到内存中并创建对象</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL[] urls = new URL[] &#123;new URL(&quot;file:/&quot; + sourcePath)&#125;;</span><br><span class=\"line\">URLClassLoader classLoader = new URLClassLoader(urls);</span><br><span class=\"line\">Class clazz = classLoader.loadClass(&quot;com.youngfeng.proxy.TimeProxy&quot;);</span><br><span class=\"line\">Constructor constructor = clazz.getConstructor(Flyable.class);</span><br><span class=\"line\">Flyable flyable = (Flyable) constructor.newInstance(new Bird());</span><br><span class=\"line\">flyable.fly();</span><br></pre></td></tr></table></figure>\n<p>通过以上三个步骤，我们至少解决了下面两个问题：</p>\n<ul>\n<li>不再需要手动创建TimeProxy</li>\n<li>可以代理任意实现了Flyable接口的类对象，并获取接口方法的执行时间</li>\n</ul>\n<p>可是，说好的任意对象呢？</p>\n<h5 id=\"第四步：增加InvocationHandler接口\"><a href=\"#第四步：增加InvocationHandler接口\" class=\"headerlink\" title=\"第四步：增加InvocationHandler接口\"></a>第四步：增加InvocationHandler接口</h5><p>查看Proxy-&gt;newProxyInstance()的源码，代理类继承的接口我们是写死的，为了增加灵活性，我们将接口类型作为参数传入：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-cd110b5720d14823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接口的灵活性问题解决了，TimeProxy的局限性依然存在，它只能用于获取方法的执行时间，而如果要在方法执行前后打印日志则需要重新创建一个代理类，显然这是不妥的！</p>\n<p>为了增加控制的灵活性，我们考虑针将代理的处理逻辑也抽离出来（这里的处理就是打印方法的执行时间）。新增<code>InvocationHandler</code>接口，用于处理自定义逻辑：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface InvocationHandler &#123;</span><br><span class=\"line\">    void invoke(Object proxy, Method method, Object[] args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想象一下，如果客户程序员需要对代理类进行自定义的处理，只要实现该接口，并在invoke方法中进行相应的处理即可。这里我们在接口中设置了三个参数（其实也是为了和JDK源码保持一致）：</p>\n<ul>\n<li>proxy =&gt; 这个参数指定动态生成的代理类，这里是<code>TimeProxy</code></li>\n<li>method =&gt; 这个参数表示传入接口中的所有Method对象</li>\n<li>args =&gt; 这个参数对应当前method方法中的参数</li>\n</ul>\n<p>引入了InvocationHandler接口之后，我们的调用顺序应该变成了这样：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyInvocationHandler handler = new MyInvocationHandler();</span><br><span class=\"line\">Flyable proxy = Proxy.newProxyInstance(Flyable.class, handler);</span><br><span class=\"line\">proxy.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">方法执行流：proxy.fly() =&gt; handler.invoke()</span><br></pre></td></tr></table></figure>\n<p>为此，我们需要在Proxy.newProxyInstance()方法中做如下改动：</p>\n<ul>\n<li>在newProxyInstance方法中传入InvocationHandler</li>\n<li>在生成的代理类中增加成员变量handler</li>\n<li>在生成的代理类方法中，调用invoke方法</li>\n</ul>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static Object newProxyInstance(Class inf, InvocationHandler handler) throws Exception &#123;</span><br><span class=\"line\">       TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(&quot;TimeProxy&quot;)</span><br><span class=\"line\">               .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">               .addSuperinterface(inf);</span><br><span class=\"line\"></span><br><span class=\"line\">       FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, &quot;handler&quot;, Modifier.PRIVATE).build();</span><br><span class=\"line\">       typeSpecBuilder.addField(fieldSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">       MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class=\"line\">               .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">               .addParameter(InvocationHandler.class, &quot;handler&quot;)</span><br><span class=\"line\">               .addStatement(&quot;this.handler = handler&quot;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\"></span><br><span class=\"line\">       typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">       Method[] methods = inf.getDeclaredMethods();</span><br><span class=\"line\">       for (Method method : methods) &#123;</span><br><span class=\"line\">           MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class=\"line\">                   .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                   .addAnnotation(Override.class)</span><br><span class=\"line\">                   .returns(method.getReturnType())</span><br><span class=\"line\">                   .addCode(&quot;try &#123;\\n&quot;)</span><br><span class=\"line\">                   .addStatement(&quot;\\t$T method = &quot; + inf.getName() + &quot;.class.getMethod(\\&quot;&quot; + method.getName() + &quot;\\&quot;)&quot;, Method.class)</span><br><span class=\"line\">                   // 为了简单起见，这里参数直接写死为空</span><br><span class=\"line\">                   .addStatement(&quot;\\tthis.handler.invoke(this, method, null)&quot;)</span><br><span class=\"line\">                   .addCode(&quot;&#125; catch(Exception e) &#123;\\n&quot;)</span><br><span class=\"line\">                   .addCode(&quot;\\te.printStackTrace();\\n&quot;)</span><br><span class=\"line\">                   .addCode(&quot;&#125;\\n&quot;)</span><br><span class=\"line\">                   .build();</span><br><span class=\"line\">           typeSpecBuilder.addMethod(methodSpec);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       JavaFile javaFile = JavaFile.builder(&quot;com.youngfeng.proxy&quot;, typeSpecBuilder.build()).build();</span><br><span class=\"line\">       // 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">       String sourcePath = &quot;/Users/ouyangfeng/Desktop/&quot;;</span><br><span class=\"line\">       javaFile.writeTo(new File(sourcePath));</span><br><span class=\"line\"></span><br><span class=\"line\">       // 编译</span><br><span class=\"line\">       JavaCompiler.compile(new File(sourcePath + &quot;/com/youngfeng/proxy/TimeProxy.java&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">       // 使用反射load到内存</span><br><span class=\"line\">       URL[] urls = new URL[] &#123;new URL(&quot;file:&quot; + sourcePath)&#125;;</span><br><span class=\"line\">       URLClassLoader classLoader = new URLClassLoader(urls);</span><br><span class=\"line\">       Class clazz = classLoader.loadClass(&quot;com.youngfeng.proxy.TimeProxy&quot;);</span><br><span class=\"line\">       Constructor constructor = clazz.getConstructor(InvocationHandler.class);</span><br><span class=\"line\">       Object obj = constructor.newInstance(handler);</span><br><span class=\"line\"></span><br><span class=\"line\">       return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码你可能看起来比较吃力，我们直接调用该方法，查看最后生成的源码。在main方法中测试newProxyInstance查看生成的TimeProxy源码：</p>\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.newProxyInstance(Flyable.class, new MyInvocationHandler(new Bird()));</span><br></pre></td></tr></table></figure>\n<p><strong>生成的TimeProxy.java源码</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.youngfeng.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Override;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TimeProxy implements Flyable &#123;</span><br><span class=\"line\">  private InvocationHandler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TimeProxy(InvocationHandler handler) &#123;</span><br><span class=\"line\">    this.handler = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void fly() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    \tMethod method = com.youngfeng.proxy.Flyable.class.getMethod(&quot;fly&quot;);</span><br><span class=\"line\">    \tthis.handler.invoke(this, method, null);</span><br><span class=\"line\">    &#125; catch(Exception e) &#123;</span><br><span class=\"line\">    \te.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MyInvocationHandler.java</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">    private Bird bird;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyInvocationHandler(Bird bird) &#123;</span><br><span class=\"line\">        this.bird = bird;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void invoke(Object proxy, Method method, Object[] args) &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            method.invoke(bird, new Object[] &#123;&#125;);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，整个方法栈的调用栈变成了这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4ff1323a12cb9c39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>看到这里，估计很多同学已经晕了，在静态代理部分，我们在代理类中传入了被代理对象。可是，使用newProxyInstance生成动态代理对象的时候，我们居然不再需要传入被代理对象了。我们传入了的实际对象是InvocationHandler实现类的实例，这看起来有点像生成了InvocationHandler的代理对象，在动态生成的代理类的任意方法中都会间接调用InvocationHandler-&gt;invoke(proxy, method, args)方法。</p>\n<p>其实的确是这样。TimeProxy真正代理的对象就是InvocationHandler，不过这里设计的巧妙之处在于，InvocationHandler是一个接口，真正的实现由用户指定。另外，在每一个方法执行的时候，invoke方法都会被调用 ，这个时候如果你需要对某个方法进行自定义逻辑处理，可以根据method的特征信息进行判断分别处理。</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>上面这段解释是告诉你在执行Proxy-&gt;newProxyInstance方法的时候真正发生的事情，而在实际使用过程中你完全可以忘掉上面的解释。按照设计者的初衷，我们做如下简单归纳：</p>\n<ul>\n<li>Proxy-&gt;newProxyInstance(infs, handler) 用于生成代理对象</li>\n<li>InvocationHandler：这个接口主要用于自定义代理逻辑处理</li>\n<li>为了完成对被代理对象的方法拦截，我们需要在InvocationHandler对象中传入被代理对象实例。</li>\n</ul>\n<p>查看上面的代码，你可以看到我将Bird实例已经传入到了MyInvocationHandler中，原因就是第三点。</p>\n<p>这样设计有什么好处呢？有人说，我们大费周章，饶了一大圈，最终变成了这个样子，到底图什么呢？</p>\n<p>想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！</p>\n<p>只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。</p>\n<p>事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。我们可以修改为和JDK命名一致，即$Proxy0，感兴趣的同学请自行实践，本篇文章的代码将放到我的Github仓库，文章结尾会给出代码地址。</p>\n<h3 id=\"JDK实现揭秘\"><a href=\"#JDK实现揭秘\" class=\"headerlink\" title=\"JDK实现揭秘\"></a>JDK实现揭秘</h3><p>通过上面的这些步骤，我们完成了一个简易的仿JDK实现的动态代理逻辑。接下来，我们一起来看一看JDK实现的动态代理和我们到底有什么不同。</p>\n<p><strong>Proxy.java</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2f5a7b2762949e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>InvocationHandler</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/703764-9d58bd4930a28081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到，官方版本Proxy类提供的方法多一些，而我们主要使用的接口newProxyInstance参数也和我们设计的不太一样。这里给大家简单解释一下，每个参数的意义：</p>\n<ul>\n<li>Classloader：类加载器，你可以使用自定义的类加载器，我们的实现版本为了简化，直接在代码中写死了Classloader。</li>\n<li>Class&lt;?&gt;[]：第二个参数也和我们的实现版本不一致，这个其实很容易理解，我们应该允许我们自己实现的代理类同时实现多个接口。前面设计只传入一个接口，只是为了简化实现，让你专注核心逻辑实现而已。</li>\n</ul>\n<p>最后一个参数就不用说了，和我们实现的版本完全是一样的。</p>\n<p>仔细观察官方版本的InvocationHandler，它和我们自己的实现的版本也有一个细微的差别：官方版本invoke方法有返回值，而我们的版本中是没有返回值的。那么，返回值到底有什么作用呢？直接来看官方文档：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-940eef4374694714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><em>核心思想：这里的返回值类型必须和传入接口的返回值类型一致，或者与其封装对象的类型一致。</em></p>\n<p>遗憾的是，这里并没有说明返回值的用途，其实这里稍微发挥一下想象力就知道了。在我们的版本实现中，Flyable接口的所有方法都是没有返回值的，问题是，如果有返回值呢？是的，你没有猜错，这里的invoke方法对应的就是传入接口中方法的返回值。</p>\n<h3 id=\"答疑解惑\"><a href=\"#答疑解惑\" class=\"headerlink\" title=\"答疑解惑\"></a>答疑解惑</h3><h5 id=\"invoke方法的第一个参数proxy到底有什么作用？\"><a href=\"#invoke方法的第一个参数proxy到底有什么作用？\" class=\"headerlink\" title=\"invoke方法的第一个参数proxy到底有什么作用？\"></a>invoke方法的第一个参数proxy到底有什么作用？</h5><p>这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。</p>\n<h5 id=\"动态代理到底有什么用？\"><a href=\"#动态代理到底有什么用？\" class=\"headerlink\" title=\"动态代理到底有什么用？\"></a>动态代理到底有什么用？</h5><p>学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 <a href=\"https://baike.baidu.com/item/AOP/1332219\" target=\"_blank\" rel=\"noopener\">AOP</a>。所谓的AOP，就像刀一样，抓住时机，趁机插入。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4b3ff894932ec1e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>基于这样一种动态特性，我们可以用它做很多事情，例如：</p>\n<ul>\n<li>事务提交或回退（Web开发中很常见）</li>\n<li>权限管理</li>\n<li>自定义缓存逻辑处理</li>\n<li>SDK Bug修复<br>…</li>\n</ul>\n<p>如果你阅读过 <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Android_Slide_To_Close</a> 的源码会发现，它也在某个地方使用了动态代理设计模式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到此为止，关于动态代理的所有讲解已经结束了，原谅我使用了一个诱导性的标题“骗”你进来阅读这篇文章。如果你不是一个久经沙场的“老司机”，10分钟完全看懂动态代理设计模式还是有一定难度的。但即使没有看懂也没关系，如果你在第一次阅读完这篇文章后依然一头雾水，就不妨再仔细阅读一次。在阅读的过程中，一定要跟着文章思路去敲代码。反反复复，一定会看懂的。我在刚刚学习动态代理设计模式的时候就反复看了不下5遍，并且亲自敲代码实践了多次。</p>\n<p>为了让你少走弯路，我认为看懂这篇文章，你至少需要学习以下知识点：</p>\n<ul>\n<li>至少已经理解了面向对象语言的多态特性</li>\n<li>了解简单的反射用法</li>\n<li>会简单使用 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 生成Java源码</li>\n</ul>\n<p>如果你在阅读文章的过程中，有任何不理解的问题或者建议，欢迎在文章下方留言告诉我！</p>\n<p>本篇文章例子代码：<a href=\"https://github.com/yuanhoujun/java-dynamic-proxy\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/java-dynamic-proxy</a></p>\n<hr>\n<p>我是欧阳锋，设计模式是一种非常好的编程指导模型，它在所有编程语言中是通用的，并且是亘古不变的。我建议你在这个方面多下苦功，不要纠结在一些重复的劳动中，活用设计模式会让你的代码更显灵动。想要了解我吗？看这里：<a href=\"http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/\" target=\"_blank\" rel=\"noopener\">欧阳锋档案馆</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>动态代理是Java语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟JDK动态代理实现，让你彻底明白动态代理设计模式的本质，文章中可能会涉及到一些你没有学习过的知识点或概念。如果恰好遇到了这些知识盲点，请先去学习这部分知识，再来阅读这篇文章。</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>从字面意思来看，代理比较好理解，无非就是代为处理的意思。举个例子，你在上大学的时候，总是喜欢逃课。因此，你拜托你的同学帮你答到，而自己却窝在宿舍玩游戏… 你的这个同学恰好就充当了代理的作用，代替你去上课。</p>\n<p>是的，你没有看错，代理就是这么简单！</p>\n<p>理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：</p>\n<ul>\n<li>怎么实现代理模式</li>\n<li>代理模式有什么实际用途</li>\n</ul>\n<p>要理解这两个问题，看一个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Flyable &#123;</span><br><span class=\"line\">    void fly();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Bird implements Flyable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        System.out.println(&quot;Bird is flying...&quot;);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(new Random().nextInt(1000));</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？</p>\n<p>有人说，很简单，在Bird-&gt;fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"> public void fly() &#123;</span><br><span class=\"line\">     long start = System.currentTimeMillis();</span><br><span class=\"line\">     System.out.println(&quot;Bird is flying...&quot;);</span><br><span class=\"line\">     try &#123;</span><br><span class=\"line\">         Thread.sleep(new Random().nextInt(1000));</span><br><span class=\"line\">     &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     long end = System.currentTimeMillis();</span><br><span class=\"line\">     System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？</p>\n<p>一定会有人说，我可以在调用的地方这样写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Bird bird = new Bird();</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\">        bird.fly();</span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？</p>\n<h5 id=\"a）使用继承\"><a href=\"#a）使用继承\" class=\"headerlink\" title=\"a）使用继承\"></a>a）使用继承</h5><p>继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。<br>为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird2 extends Bird &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\">        </span><br><span class=\"line\">        super.fly();</span><br><span class=\"line\">        </span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是一种解决方案，还有一种解决方案叫做：<strong>聚合</strong>，其实也是比较容易想到的。<br>我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird3 implements Flyable &#123;</span><br><span class=\"line\">    private Bird bird;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Bird3(Bird bird) &#123;</span><br><span class=\"line\">        this.bird = bird;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        bird.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了记录Bird-&gt;fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！</p>\n<p>继续深入思考，用问题推导来解答这个问题：</p>\n<p><strong>问题一</strong>：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？<br>有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。</p>\n<p><strong>问题二</strong>：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？<br>有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。</p>\n<p>问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 是否可以避免这个问题呢？<br>答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird3 implements Flyable &#123;</span><br><span class=\"line\">    private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Bird3(Flyable flyable) &#123;</span><br><span class=\"line\">        this.flyable = flyable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BirdLogProxy implements Flyable &#123;</span><br><span class=\"line\">    private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BirdLogProxy(Flyable flyable) &#123;</span><br><span class=\"line\">        this.flyable = flyable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void fly() &#123;</span><br><span class=\"line\">        System.out.println(&quot;Bird fly start...&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;Bird fly end...&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Bird bird = new Bird();</span><br><span class=\"line\">    BirdLogProxy p1 = new BirdLogProxy(bird);</span><br><span class=\"line\">    BirdTimeProxy p2 = new BirdTimeProxy(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">    p2.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反过来，可以这么做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">       Bird bird = new Bird();</span><br><span class=\"line\">       BirdTimeProxy p2 = new BirdTimeProxy(bird);</span><br><span class=\"line\">       BirdLogProxy p1 = new BirdLogProxy(p2);</span><br><span class=\"line\"></span><br><span class=\"line\">       p1.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 可以做到，而继承不行呢。我们用一张图来解释一下：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2d04ad5bbcb2d25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable-&gt;fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。</p>\n<p>从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：</p>\n<ul>\n<li>如果同时代理多个类，依然会导致类无限制扩展</li>\n<li>如果类中有多个方法，同样的逻辑需要反复实现</li>\n</ul>\n<p>那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：<strong>动态代理</strong>。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>继续回到上面这个问题：是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢。</p>\n<p>这个部分需要一定的抽象思维，我想，你脑海中的第一个解决方案应该是使用反射。反射是用于获取已创建实例的方法或者属性，并对其进行调用或者赋值。很明显，在这里，反射解决不了问题。但是，再大胆一点，如果我们可以动态生成TimeProxy这个类，并且动态编译。然后，再通过反射创建对象并加载到内存中，不就实现了对任意对象进行代理了吗？为了防止你依然一头雾水，我们用一张图来描述接下来要做什么：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-0e22137ce1f0291b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>动态生成Java源文件并且排版是一个非常繁琐的工作，为了简化操作，我们使用 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 这个第三方库帮我们生成TimeProxy的源码。希望 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a>  不要成为你的负担，不理解 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 没有关系，你只要把它当成一个Java源码生成工具使用即可。</p>\n<p>PS：你记住，任何工具库的使用都不会太难，它是为了简化某些操作而出现的，目标是简化而不是繁琐。因此，只要你适应它的规则就轻车熟路了。</p>\n<h5 id=\"第一步：生成TimeProxy源码\"><a href=\"#第一步：生成TimeProxy源码\" class=\"headerlink\" title=\"第一步：生成TimeProxy源码\"></a>第一步：生成TimeProxy源码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Proxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object newProxyInstance() throws IOException &#123;</span><br><span class=\"line\">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(&quot;TimeProxy&quot;)</span><br><span class=\"line\">                .addSuperinterface(Flyable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FieldSpec fieldSpec = FieldSpec.builder(Flyable.class, &quot;flyable&quot;, Modifier.PRIVATE).build();</span><br><span class=\"line\">        typeSpecBuilder.addField(fieldSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addParameter(Flyable.class, &quot;flyable&quot;)</span><br><span class=\"line\">                .addStatement(&quot;this.flyable = flyable&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method[] methods = Flyable.class.getDeclaredMethods();</span><br><span class=\"line\">        for (Method method : methods) &#123;</span><br><span class=\"line\">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class=\"line\">                    .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                    .addAnnotation(Override.class)</span><br><span class=\"line\">                    .returns(method.getReturnType())</span><br><span class=\"line\">                    .addStatement(&quot;long start = $T.currentTimeMillis()&quot;, System.class)</span><br><span class=\"line\">                    .addCode(&quot;\\n&quot;)</span><br><span class=\"line\">                    .addStatement(&quot;this.flyable.&quot; + method.getName() + &quot;()&quot;)</span><br><span class=\"line\">                    .addCode(&quot;\\n&quot;)</span><br><span class=\"line\">                    .addStatement(&quot;long end = $T.currentTimeMillis()&quot;, System.class)</span><br><span class=\"line\">                    .addStatement(&quot;$T.out.println(\\&quot;Fly Time =\\&quot; + (end - start))&quot;, System.class)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JavaFile javaFile = JavaFile.builder(&quot;com.youngfeng.proxy&quot;, typeSpecBuilder.build()).build();</span><br><span class=\"line\">        // 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">        javaFile.writeTo(new File(&quot;/Users/ouyangfeng/Desktop/&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在main方法中调用Proxy.newProxyInstance()，你将看到桌面已经生成了TimeProxy.java文件，生成的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.youngfeng.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Override;</span><br><span class=\"line\">import java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\">class TimeProxy implements Flyable &#123;</span><br><span class=\"line\">  private Flyable flyable;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TimeProxy(Flyable flyable) &#123;</span><br><span class=\"line\">    this.flyable = flyable;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void fly() &#123;</span><br><span class=\"line\">    long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    this.flyable.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">    long end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(&quot;Fly Time =&quot; + (end - start));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二步：编译TimeProxy源码\"><a href=\"#第二步：编译TimeProxy源码\" class=\"headerlink\" title=\"第二步：编译TimeProxy源码\"></a>第二步：编译TimeProxy源码</h5><p>编译TimeProxy源码我们直接使用JDK提供的编译工具即可，为了使你看起来更清晰，我使用一个新的辅助类来完成编译操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JavaCompiler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void compile(File javaFile) throws IOException &#123;</span><br><span class=\"line\">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class=\"line\">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(null, null, null);</span><br><span class=\"line\">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class=\"line\">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(null, fileManager, null, null, null, iterable);</span><br><span class=\"line\">        task.call();</span><br><span class=\"line\">        fileManager.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Proxy-&gt;newProxyInstance()方法中调用该方法，编译顺利完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">String sourcePath = &quot;/Users/ouyangfeng/Desktop/&quot;;</span><br><span class=\"line\">javaFile.writeTo(new File(sourcePath));</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译</span><br><span class=\"line\">JavaCompiler.compile(new File(sourcePath + &quot;/com/youngfeng/proxy/TimeProxy.java&quot;));</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-0e82c03cdd902aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h5 id=\"第三步：加载到内存中并创建对象\"><a href=\"#第三步：加载到内存中并创建对象\" class=\"headerlink\" title=\"第三步：加载到内存中并创建对象\"></a>第三步：加载到内存中并创建对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL[] urls = new URL[] &#123;new URL(&quot;file:/&quot; + sourcePath)&#125;;</span><br><span class=\"line\">URLClassLoader classLoader = new URLClassLoader(urls);</span><br><span class=\"line\">Class clazz = classLoader.loadClass(&quot;com.youngfeng.proxy.TimeProxy&quot;);</span><br><span class=\"line\">Constructor constructor = clazz.getConstructor(Flyable.class);</span><br><span class=\"line\">Flyable flyable = (Flyable) constructor.newInstance(new Bird());</span><br><span class=\"line\">flyable.fly();</span><br></pre></td></tr></table></figure>\n<p>通过以上三个步骤，我们至少解决了下面两个问题：</p>\n<ul>\n<li>不再需要手动创建TimeProxy</li>\n<li>可以代理任意实现了Flyable接口的类对象，并获取接口方法的执行时间</li>\n</ul>\n<p>可是，说好的任意对象呢？</p>\n<h5 id=\"第四步：增加InvocationHandler接口\"><a href=\"#第四步：增加InvocationHandler接口\" class=\"headerlink\" title=\"第四步：增加InvocationHandler接口\"></a>第四步：增加InvocationHandler接口</h5><p>查看Proxy-&gt;newProxyInstance()的源码，代理类继承的接口我们是写死的，为了增加灵活性，我们将接口类型作为参数传入：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-cd110b5720d14823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接口的灵活性问题解决了，TimeProxy的局限性依然存在，它只能用于获取方法的执行时间，而如果要在方法执行前后打印日志则需要重新创建一个代理类，显然这是不妥的！</p>\n<p>为了增加控制的灵活性，我们考虑针将代理的处理逻辑也抽离出来（这里的处理就是打印方法的执行时间）。新增<code>InvocationHandler</code>接口，用于处理自定义逻辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface InvocationHandler &#123;</span><br><span class=\"line\">    void invoke(Object proxy, Method method, Object[] args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想象一下，如果客户程序员需要对代理类进行自定义的处理，只要实现该接口，并在invoke方法中进行相应的处理即可。这里我们在接口中设置了三个参数（其实也是为了和JDK源码保持一致）：</p>\n<ul>\n<li>proxy =&gt; 这个参数指定动态生成的代理类，这里是<code>TimeProxy</code></li>\n<li>method =&gt; 这个参数表示传入接口中的所有Method对象</li>\n<li>args =&gt; 这个参数对应当前method方法中的参数</li>\n</ul>\n<p>引入了InvocationHandler接口之后，我们的调用顺序应该变成了这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyInvocationHandler handler = new MyInvocationHandler();</span><br><span class=\"line\">Flyable proxy = Proxy.newProxyInstance(Flyable.class, handler);</span><br><span class=\"line\">proxy.fly();</span><br><span class=\"line\"></span><br><span class=\"line\">方法执行流：proxy.fly() =&gt; handler.invoke()</span><br></pre></td></tr></table></figure>\n<p>为此，我们需要在Proxy.newProxyInstance()方法中做如下改动：</p>\n<ul>\n<li>在newProxyInstance方法中传入InvocationHandler</li>\n<li>在生成的代理类中增加成员变量handler</li>\n<li>在生成的代理类方法中，调用invoke方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static Object newProxyInstance(Class inf, InvocationHandler handler) throws Exception &#123;</span><br><span class=\"line\">       TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(&quot;TimeProxy&quot;)</span><br><span class=\"line\">               .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">               .addSuperinterface(inf);</span><br><span class=\"line\"></span><br><span class=\"line\">       FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, &quot;handler&quot;, Modifier.PRIVATE).build();</span><br><span class=\"line\">       typeSpecBuilder.addField(fieldSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">       MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class=\"line\">               .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">               .addParameter(InvocationHandler.class, &quot;handler&quot;)</span><br><span class=\"line\">               .addStatement(&quot;this.handler = handler&quot;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\"></span><br><span class=\"line\">       typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">       Method[] methods = inf.getDeclaredMethods();</span><br><span class=\"line\">       for (Method method : methods) &#123;</span><br><span class=\"line\">           MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class=\"line\">                   .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                   .addAnnotation(Override.class)</span><br><span class=\"line\">                   .returns(method.getReturnType())</span><br><span class=\"line\">                   .addCode(&quot;try &#123;\\n&quot;)</span><br><span class=\"line\">                   .addStatement(&quot;\\t$T method = &quot; + inf.getName() + &quot;.class.getMethod(\\&quot;&quot; + method.getName() + &quot;\\&quot;)&quot;, Method.class)</span><br><span class=\"line\">                   // 为了简单起见，这里参数直接写死为空</span><br><span class=\"line\">                   .addStatement(&quot;\\tthis.handler.invoke(this, method, null)&quot;)</span><br><span class=\"line\">                   .addCode(&quot;&#125; catch(Exception e) &#123;\\n&quot;)</span><br><span class=\"line\">                   .addCode(&quot;\\te.printStackTrace();\\n&quot;)</span><br><span class=\"line\">                   .addCode(&quot;&#125;\\n&quot;)</span><br><span class=\"line\">                   .build();</span><br><span class=\"line\">           typeSpecBuilder.addMethod(methodSpec);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       JavaFile javaFile = JavaFile.builder(&quot;com.youngfeng.proxy&quot;, typeSpecBuilder.build()).build();</span><br><span class=\"line\">       // 为了看的更清楚，我将源码文件生成到桌面</span><br><span class=\"line\">       String sourcePath = &quot;/Users/ouyangfeng/Desktop/&quot;;</span><br><span class=\"line\">       javaFile.writeTo(new File(sourcePath));</span><br><span class=\"line\"></span><br><span class=\"line\">       // 编译</span><br><span class=\"line\">       JavaCompiler.compile(new File(sourcePath + &quot;/com/youngfeng/proxy/TimeProxy.java&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">       // 使用反射load到内存</span><br><span class=\"line\">       URL[] urls = new URL[] &#123;new URL(&quot;file:&quot; + sourcePath)&#125;;</span><br><span class=\"line\">       URLClassLoader classLoader = new URLClassLoader(urls);</span><br><span class=\"line\">       Class clazz = classLoader.loadClass(&quot;com.youngfeng.proxy.TimeProxy&quot;);</span><br><span class=\"line\">       Constructor constructor = clazz.getConstructor(InvocationHandler.class);</span><br><span class=\"line\">       Object obj = constructor.newInstance(handler);</span><br><span class=\"line\"></span><br><span class=\"line\">       return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码你可能看起来比较吃力，我们直接调用该方法，查看最后生成的源码。在main方法中测试newProxyInstance查看生成的TimeProxy源码：</p>\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.newProxyInstance(Flyable.class, new MyInvocationHandler(new Bird()));</span><br></pre></td></tr></table></figure>\n<p><strong>生成的TimeProxy.java源码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.youngfeng.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Override;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TimeProxy implements Flyable &#123;</span><br><span class=\"line\">  private InvocationHandler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TimeProxy(InvocationHandler handler) &#123;</span><br><span class=\"line\">    this.handler = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void fly() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    \tMethod method = com.youngfeng.proxy.Flyable.class.getMethod(&quot;fly&quot;);</span><br><span class=\"line\">    \tthis.handler.invoke(this, method, null);</span><br><span class=\"line\">    &#125; catch(Exception e) &#123;</span><br><span class=\"line\">    \te.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MyInvocationHandler.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">    private Bird bird;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyInvocationHandler(Bird bird) &#123;</span><br><span class=\"line\">        this.bird = bird;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void invoke(Object proxy, Method method, Object[] args) &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            method.invoke(bird, new Object[] &#123;&#125;);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        long end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(&quot;Fly time = &quot; + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，整个方法栈的调用栈变成了这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4ff1323a12cb9c39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>看到这里，估计很多同学已经晕了，在静态代理部分，我们在代理类中传入了被代理对象。可是，使用newProxyInstance生成动态代理对象的时候，我们居然不再需要传入被代理对象了。我们传入了的实际对象是InvocationHandler实现类的实例，这看起来有点像生成了InvocationHandler的代理对象，在动态生成的代理类的任意方法中都会间接调用InvocationHandler-&gt;invoke(proxy, method, args)方法。</p>\n<p>其实的确是这样。TimeProxy真正代理的对象就是InvocationHandler，不过这里设计的巧妙之处在于，InvocationHandler是一个接口，真正的实现由用户指定。另外，在每一个方法执行的时候，invoke方法都会被调用 ，这个时候如果你需要对某个方法进行自定义逻辑处理，可以根据method的特征信息进行判断分别处理。</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>上面这段解释是告诉你在执行Proxy-&gt;newProxyInstance方法的时候真正发生的事情，而在实际使用过程中你完全可以忘掉上面的解释。按照设计者的初衷，我们做如下简单归纳：</p>\n<ul>\n<li>Proxy-&gt;newProxyInstance(infs, handler) 用于生成代理对象</li>\n<li>InvocationHandler：这个接口主要用于自定义代理逻辑处理</li>\n<li>为了完成对被代理对象的方法拦截，我们需要在InvocationHandler对象中传入被代理对象实例。</li>\n</ul>\n<p>查看上面的代码，你可以看到我将Bird实例已经传入到了MyInvocationHandler中，原因就是第三点。</p>\n<p>这样设计有什么好处呢？有人说，我们大费周章，饶了一大圈，最终变成了这个样子，到底图什么呢？</p>\n<p>想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！</p>\n<p>只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。</p>\n<p>事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。我们可以修改为和JDK命名一致，即$Proxy0，感兴趣的同学请自行实践，本篇文章的代码将放到我的Github仓库，文章结尾会给出代码地址。</p>\n<h3 id=\"JDK实现揭秘\"><a href=\"#JDK实现揭秘\" class=\"headerlink\" title=\"JDK实现揭秘\"></a>JDK实现揭秘</h3><p>通过上面的这些步骤，我们完成了一个简易的仿JDK实现的动态代理逻辑。接下来，我们一起来看一看JDK实现的动态代理和我们到底有什么不同。</p>\n<p><strong>Proxy.java</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/703764-2f5a7b2762949e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>InvocationHandler</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/703764-9d58bd4930a28081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到，官方版本Proxy类提供的方法多一些，而我们主要使用的接口newProxyInstance参数也和我们设计的不太一样。这里给大家简单解释一下，每个参数的意义：</p>\n<ul>\n<li>Classloader：类加载器，你可以使用自定义的类加载器，我们的实现版本为了简化，直接在代码中写死了Classloader。</li>\n<li>Class&lt;?&gt;[]：第二个参数也和我们的实现版本不一致，这个其实很容易理解，我们应该允许我们自己实现的代理类同时实现多个接口。前面设计只传入一个接口，只是为了简化实现，让你专注核心逻辑实现而已。</li>\n</ul>\n<p>最后一个参数就不用说了，和我们实现的版本完全是一样的。</p>\n<p>仔细观察官方版本的InvocationHandler，它和我们自己的实现的版本也有一个细微的差别：官方版本invoke方法有返回值，而我们的版本中是没有返回值的。那么，返回值到底有什么作用呢？直接来看官方文档：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-940eef4374694714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><em>核心思想：这里的返回值类型必须和传入接口的返回值类型一致，或者与其封装对象的类型一致。</em></p>\n<p>遗憾的是，这里并没有说明返回值的用途，其实这里稍微发挥一下想象力就知道了。在我们的版本实现中，Flyable接口的所有方法都是没有返回值的，问题是，如果有返回值呢？是的，你没有猜错，这里的invoke方法对应的就是传入接口中方法的返回值。</p>\n<h3 id=\"答疑解惑\"><a href=\"#答疑解惑\" class=\"headerlink\" title=\"答疑解惑\"></a>答疑解惑</h3><h5 id=\"invoke方法的第一个参数proxy到底有什么作用？\"><a href=\"#invoke方法的第一个参数proxy到底有什么作用？\" class=\"headerlink\" title=\"invoke方法的第一个参数proxy到底有什么作用？\"></a>invoke方法的第一个参数proxy到底有什么作用？</h5><p>这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。</p>\n<h5 id=\"动态代理到底有什么用？\"><a href=\"#动态代理到底有什么用？\" class=\"headerlink\" title=\"动态代理到底有什么用？\"></a>动态代理到底有什么用？</h5><p>学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 <a href=\"https://baike.baidu.com/item/AOP/1332219\" target=\"_blank\" rel=\"noopener\">AOP</a>。所谓的AOP，就像刀一样，抓住时机，趁机插入。<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-4b3ff894932ec1e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>基于这样一种动态特性，我们可以用它做很多事情，例如：</p>\n<ul>\n<li>事务提交或回退（Web开发中很常见）</li>\n<li>权限管理</li>\n<li>自定义缓存逻辑处理</li>\n<li>SDK Bug修复<br>…</li>\n</ul>\n<p>如果你阅读过 <a href=\"https://github.com/yuanhoujun/Android_Slide_To_Close\" target=\"_blank\" rel=\"noopener\">Android_Slide_To_Close</a> 的源码会发现，它也在某个地方使用了动态代理设计模式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到此为止，关于动态代理的所有讲解已经结束了，原谅我使用了一个诱导性的标题“骗”你进来阅读这篇文章。如果你不是一个久经沙场的“老司机”，10分钟完全看懂动态代理设计模式还是有一定难度的。但即使没有看懂也没关系，如果你在第一次阅读完这篇文章后依然一头雾水，就不妨再仔细阅读一次。在阅读的过程中，一定要跟着文章思路去敲代码。反反复复，一定会看懂的。我在刚刚学习动态代理设计模式的时候就反复看了不下5遍，并且亲自敲代码实践了多次。</p>\n<p>为了让你少走弯路，我认为看懂这篇文章，你至少需要学习以下知识点：</p>\n<ul>\n<li>至少已经理解了面向对象语言的多态特性</li>\n<li>了解简单的反射用法</li>\n<li>会简单使用 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"noopener\">JavaPoet</a> 生成Java源码</li>\n</ul>\n<p>如果你在阅读文章的过程中，有任何不理解的问题或者建议，欢迎在文章下方留言告诉我！</p>\n<p>本篇文章例子代码：<a href=\"https://github.com/yuanhoujun/java-dynamic-proxy\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/java-dynamic-proxy</a></p>\n<hr>\n<p>我是欧阳锋，设计模式是一种非常好的编程指导模型，它在所有编程语言中是通用的，并且是亘古不变的。我建议你在这个方面多下苦功，不要纠结在一些重复的劳动中，活用设计模式会让你的代码更显灵动。想要了解我吗？看这里：<a href=\"http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/\" target=\"_blank\" rel=\"noopener\">欧阳锋档案馆</a>。</p>\n"},{"title":"关于Git，你真的学会了吗？","date":"2018-02-01T14:13:00.000Z","comments":1,"_content":"\n“锋哥，Git有什么可说的，不就是`git add`添加，`git commit`提交嘛”  听说我要写一篇Git教程，小明不屑一顾地说。\n“...\"。\n\n小明是我的一个学生。目前，是一名Android开发工程师。\n\n过了几天，我又再次见到了小明。\n\n“锋哥，今天，我在Github新建了一个版本库，本地提交后推送远程的时候，却被拒绝了，是怎么回事？”\n\n以下是小明的操作记录：\n```\ngit init\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:xiaoming/xxx.git\ngit pull origin master\n```\n以上操作触发了下面的错误：\n```\nFrom git@github.com:xiaoming/xxx.git\n * branch            master     -> FETCH_HEAD\n * [new branch]      master     -> origin/master\nfatal: refusing to merge unrelated histories\n```\n“小明，注意看最后一句提示。翻译成中文的意思是 ‘拒绝合并不相关的历史’，这个问题有两个方案可以处理。\"\n\n* `git pull`命令其实是触发了拉取`git fetch`和合并`git merge`两个操作。而本地的版本库和远程版本库在第一次拉取或推送完成之前是毫不相关的，Git为了避免不必要的合并，默认不允许进行这样的操作。但你可以手动添加`--allow-unrelated-histories`强制进行合并，这是方案一。\n```\ngit pull origin master --allow-unrelated-histories\n```\n* 再来看方案二，从你上面的操作来看，你只是在本地初始化了一个版本库，并完成了基础的提交。接下来，你希望和远程版本库建立关联，将提交推送到远程。这种情况下，其实你可能并不需要远程的默认数据（通常是一个空的README文件）。所以，你可以添加`-f`参数，将提交强制提交并覆盖远程版本库。\n```\ngit push -f origin master\n```\n\n小明若有所思地点点头，这是小明第一次遇到Git问题。我想，接下来他应该会比较顺利了。\n\n没想到，过了几天，我又收到了小明的消息。这一次，他发来的是对Git的抱怨。\n\n“锋哥，Git好讨厌，提交日志出现了错误，也不能修改。你知道搜狗输入法有时候不够智能，输入太快不小心就输错了...😓” \n\n“🙂，你这孩子，别轻易下结论哈。其实，Git是允许修改提交记录的。使用Git最舒服的一点就是：Git永远都会给你反悔的机会。这一点，其它的版本控制工具是做不到的！”\n\n“哦，原来是这样啊！那快说说看，要怎么做？” 小明已经一副迫不及待的表情了。\n\n“`git commit`命令中有一个参数叫`--amend`就是为解决这个问题而生的。因此，如果是最近的提交，你只需要按照下面的命令操作即可。”\n\n```\ngit commit --amend -m \"这是新的提交日志\"\n```\n\n看完我的消息，小明给我发来一个微笑的表情。小明的抱怨让我想起一句好气又好笑的农村俗语 “屙屎不出怪茅坑”，哈哈。\n\n本以为一切可以风平浪静了。没想到，过了一个月左右，突然接到了小明的紧急电话。电话那头，小明似乎心情很急躁。\n\n“锋哥，我不小心进行了还原操作，我写的代码全丢了。几千行的代码啊，明天晚上就要发版本了，有办法找回来吗？”\n\n听到这个消息，我心里盘算，大约有50%的概率应该是找不回来了。这孩子比较粗心，可能根本就没提交到版本库。但如果他正好提交到了版本库，兴许还有救。因此，我安慰他说 “小明，别急！你打开TeamViewer，我远程帮你看看”\n\n连上机器后，我使用`history`命令看到小明在提交之后使用了`git reset --hard xxx`命令进行重置。`--hard`是`git reset`命令中唯一一个不安全的操作，它会真正地销毁数据，以至于你在`git log`中完全看不到操作日志。可是，Git真的很聪明，它还保存了另外一份日志叫`reflog`，这个日志记录了你每次修改HEAD的操作。因此，你可以通过下面的命令对数据进行还原：\n```\ngit reflog\n\n// 使用这个命令，你看到的日志大概是这样\nc8278f9 (HEAD -> master) HEAD@{0}: reset: moving to c8278f9914a91e3aca6ab0993b48073ba1e41b2b\n3e59423 HEAD@{1}: commit: a\nc8278f9 (HEAD -> master) HEAD@{2}: commit (amend): v2 update\n2dc167b HEAD@{3}: commit: v2\n2e342e9 HEAD@{4}: commit (initial): Init commit\n```\n\n可以看到，我们在版本`3e59423`进行了`git reset`操作，最新版本是`3e59423`。因此，我们可以再次通过`git reset`命令回到这个版本：\n```\ngit reset --hard 3e59423\n```\n以上操作完成后，你会惊喜地发现，丢失的数据居然神奇般地回来了。\n\n“🌺 🌺 🌺”\n\n“下次别这样操作了哈。另外，你怎么一次性丢失这么多代码。一定要记得勤提交。” 小明出现这样的问题，与平时的不规范操作也是分不开的。因此，最后我还不忘嘱咐了他一句。\n\n“好的，我知道了。对了，我一个还有比较疑惑的问题。`git checkout`和`git reset`到底有啥区别？我以前用SVN的时候`git checkout`是用来检出代码的，在Git中可以用它切换分支或者指定版本，但`git reset`同样可以做到。难道两者是完全一样的吗？” 小明在QQ中给我发来了回复消息。\n\n“这是一个比较有深度的问题，解释这个问题需要一点时间。接下来，你仔细听”\n\n## 理解Git工作空间\n理解这个问题之前，先来简单学习一些Git基础知识。Git有三种状态：\n* 已提交（commited）：数据已完全保存到本地数据库中\n* 已修改（modified）：修改了文件，但还没有保存到数据库中\n* 已暂存（staged)：对一个已修改的文件做了标记，将包含在下一次提交的版本快照中\n\n这三种状态对应Git三个工作区域：Git版本库、暂存区和工作区\n![](http://upload-images.jianshu.io/upload_images/703764-6459c27004beb536.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit版本库是Git用来保存项目的元数据和对象数据库的地方，使用`git clone`命令时拷贝的就是这里的数据。\n\n工作目录是对某个版本独立检出的内容，这些数据可以供你使用和修改。\n\n暂存区在Git内部对应一个名为index的文件，它保存了下次将要提交的文件列表信息。因此，暂存区有时候也被叫作 “索引”。\n\n一个基础的Git工作流程如下：\n1）在工作区修改文件\n2）使用`git add`将文件添加到暂存区，也就是记录到`index`文件中\n3）使用`git commit`将暂存区中记录的文件列表，使用快照永久地保存到Git版本库中\n\n## 理解HEAD\n解释这个问题，你还需要简单理解HEAD是什么。简单来说，HEAD是当前分支引用的指针，它永远指向该分支上最后一次提交。为了让你更容易理解HEAD，你可以将HEAD看作上一次提交数据的快照。\n\n如果你感兴趣，你可以使用一个底层命令来查看当前HEAD的快照信息:\n```\ngit ls-tree -r HEAD\n\n100644 blob aca4b576b7d4534266cb818ab1191d91887508b9\tdemo/src/main/java/com/youngfeng/snake/demo/Constant.java\n100644 blob b8691ec87867b180e6ffc8dd5a7e85747698630d\tdemo/src/main/java/com/youngfeng/snake/demo/SnakeApplication.java\n100644 blob 9a70557b761171ca196196a7c94a26ebbec89bb1\tdemo/src/main/java/com/youngfeng/snake/demo/activities/FirstActivity.java\n100644 blob fab8d2f5cb65129df09185c5bd210d20484154ce\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SecondActivity.java\n100644 blob a7509233ecd8fe6c646f8585f756c74842ef0216\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SplashActivity.java\n```\n\n这里简单解释一下每个字段的意思：100644表示文件模式，其对应一个普通文件。blob表示Git内部存储对象数据类型，另外还有一种数据类型tree，对应一个树对象，中间较长的字符串对应当前文件的SHA-1值，这部分不需要记住，简单了解即可。\n\n所以，简单来说，HEAD对应一个树形结构，存储了当前分支所有的Git对象快照：\n![](http://upload-images.jianshu.io/upload_images/703764-639a489c0930506a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们用一个表格简单来总结一下以上知识点：\n\nHEAD|Index(暂存区)|工作区\n:--:|:--:|:--:\n上一次提交的快照，下一次提交的父节点|预期的下一次提交快照|当前正在操作的沙盒目录\n\n理解`git reset`和`git checkout`区别主要是理解Git内部是怎么操作以上三棵树的。\n\n接下来，我们用一个简单的例子来看一下使用`git reset`到底发生了什么。先创建一个Git版本库并触发三次提交：\n```\ngit init repo\ntouch file.txt\ngit add file.txt\ngit commit -m \"v1\"\n\necho v2 > file.txt\ngit add file.txt\ngit commit -m \"v2\"\n\necho v3 > file.txt\ngit add file.txt\ngit commit -m \"v3\"\n```\n\n以上操作完成后，版本库现在看起来是这样的：\n![](http://upload-images.jianshu.io/upload_images/703764-553e3fc8b81023c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来执行命令`git reset 14ad152`看看会发生什么。以下是命令执行完成后看到的结果：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n M file.txt\n\ncat file.txt\n### This is output ###\nv3\n```\n\n可以看到版本库中文件版本回退到了V2，工作区文件内容同之前的版本V3一致；为了确认暂存区发生了什么变化，我们再使用一个底层命令对比一下暂存区数据和版本库数据是否一致：\n```\n# 查看暂存区信息\ngit ls-files -s\n### This is output ###\n100644 8c1384d825dbbe41309b7dc18ee7991a9085c46e 0\tfile.txt\n\n# 查看版本库快照信息\ngit ls-tree -r HEAD\n### This is output ###\n100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt\n```\n\n可以看到当前版本库和暂存区信息是完全一致的，HEAD指向了v2提交，用一个图形来表示整个过程，应该是这样：\n![](http://upload-images.jianshu.io/upload_images/703764-5d21495a27e774c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n看一眼上图，理解一下刚刚发生的事情：首先，HEAD指针发生了移动，指向了V2，并撤销了上一次提交。目前，版本库和暂存区都保存的是第二次提交的记录，工作区却保存了最近一次修改。稍微联想一下，你就会发现，这次的`git reset`命令恰好是最近一次提交的逆向操作。让数据完全回到了上一次提交前的状态。所以，如果你想撤销最近一次提交，可以这么做。\n\n####  增加--soft参数测试\n以上是我们对`git reset`命令的第一次尝试，在下一轮尝试前，先执行`git help reset`看看`reset`命令的用法：\n```\ngit reset [-q] [<tree-ish>] [--] <paths>...\ngit reset (--patch | -p) [<tree-ish>] [--] [<paths>...]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n```\n\n看最后一句发现，`reset`命令后面还可以接5个不同的参数: `--soft`、`--mixed`、`--hard` 、`--merge`、`--keep`。这里我们主要关注前面三个，其中`--mixed`其实刚刚已经尝试过，它和不带参数的`git reset`命令是同样的效果。换而言之，`--mixed`是`git reset`命令的默认行为。接下来执行`git reset --soft 14ad152`看看会发生什么。命令执行完成后，按照惯例，我们同样使用基础命令看看发生了什么变化：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\nM  file.txt\n\ncat file.txt\n### This is output ###\nv3\n```\n奇怪了？为什么会和上次不带任何参数的执行结果完全一致？难道Git出现了设计错误。相信你看到结果一定会有这样的疑问，其实不然！因为，这里我用文本粘贴了输出结果，忽略了命令的字体颜色，其实这里第二条命令输出结果中的M颜色与上一次执行结果是不一样的。为了让你看到不同，看下面的截图：\n![](http://upload-images.jianshu.io/upload_images/703764-c76ba02b7fb8b5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这个颜色表示：file.txt文件已经被添加到了暂存区，使用`git commit`命令就可以完成提交。为了严谨，我们依然使用上面的底层命令看看版本库和暂存区信息是否一致。注意：这里的结果应该是不一致才对，因为版本库记录的文件版本是v2，而暂存区记录的文件版本其实是v3。\n```\ngit ls-tree -r HEAD\n### This is output ###\n100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt\n\ngit ls-files -s\n### This is output ###\n100644 29ef827e8a45b1039d908884aae4490157bcb2b4 0\tfile.txt\n```\n可以看到，两个命令执行输出的SHA-1并不一致，验证了我们的猜想。\n\n这里我们可以得出一个结论：`--soft`和默认行为(`--mixed`)不一样的地方是：`--soft`会将工作区的最新文件版本再做一步操作，添加到暂存区。使用这个命令可以用来合并提交。即：如果你在某一次提交中有未完成的工作，而你反悔了，你可以使用这个命令撤销提交，等工作做完后继续一次性完成提交。\n\n####  增加--hard参数测试\n接下来我们对最后一个参数进行测试，这也是小明在使用过程出现问题的一个参数。执行命令`git reset --hard 14ad152`，看看发生了什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n>>> No output <<<\n\ncat file.txt\nv2\n```\n\n注意看，这次使用`git status -s`完全看不到输出，这就证明：当前工作区，暂存区，版本库数据是完全一致的。查看文件内容，发现文件回到了v2版本。通常情况下，如果你看到这种情况，一定会吓一跳，你最近一次提交的数据居然完全丢失了。的确，这是Git命令中少有的几个真正销毁数据的命令之一。除非你非常清楚地知道自己在做什么，否则，请尽量不要使用这个命令！\n\n我们依然用一张图，完整地描述这个命令到底发什么了什么：\n![](http://upload-images.jianshu.io/upload_images/703764-dea7f52471f35ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到，相对于默认行为，`--hard`将工作区的数据也还原到了V2版本，以至于V3版本的提交已经完全丢失。\n\n# git checkout\n接下来看`git checkout`,  按照惯例，先执行`git checkout 14ad152`看看会发生什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n>>> No output <<<\n\ncat file.txt\nv2\n```\n\n可以看到，又出现了神奇的一幕，这一次`git checkout`命令的执行结果的确和`git reset --hard`完全一致。这是否意味着两者就没有任何区别了呢？当然也不是。严格来说，两者有两个“本质”的区别：\n* 相对而言，`git checkout`对工作目录是安全的，它不会将工作区已经修改的文件还原，`git reset`则不管三七二十一一股脑全部还原。\n* 另外一个比较重要的区别是，`git checkout`并不移动HEAD分支的指向，它是通过直接修改HEAD引用来完成指针的指向。\n\n第二个不同点相对比较难理解，我们用一张图来更直观地展示二者的区别：\n![](http://upload-images.jianshu.io/upload_images/703764-c0e4b18961fe668f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简单来说，`git reset`会通过移动指针来完成HEAD的指向，而`git checkout`则通过直接修改HEAD本身来完成指向的移动。\n\n# 命令作用于部分文件\n`git reset`和`git checkout`还可以作用于一个文件，或者部分文件，即带文件路径执行。这种情况下，两个命令的表现不太一样。我们来试试看，先执行` git reset 14ad15 -- file.txt`命令尝试将文件恢复到V2版本。命令执行完成，按照惯例用一些基础命令来看看发生了什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n4521405 (HEAD -> master) v3\n14ad152 v2\nbcc49f4 v1\n\ngit status -v\n### This is output ###\ndiff --git a/file.txt b/file.txt\nindex 29ef827..8c1384d 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1 @@\n-v3\n+v2\n\ncat file.txt\nv3\n```\n\n可以看到，版本库和工作区的数据都没有发生变化。唯一发生变化的是暂存区，暂存区记录下一次提交的改动将导致数据从V3恢复到V2版本!\n![](http://upload-images.jianshu.io/upload_images/703764-d9199360f0dbe0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里我们可以这样理解：执行这条命令后，Git先将暂存区和工作区的文件版本恢复到V2，再将工作区的文件版本恢复到V3。与`--hard`不一样的地方是：这个命令并不会覆盖工作区已经修改的文件，是安全操作。\n\n执行带路径的`git checkout`命令和`git reset`命令有一些细微的差别，相对于`git reset`，`git checkout`带路径执行会覆盖工作区已经修改的内容，导致数据丢失，是一个非安全操作。\n\n针对上面的所有实验，我们用一个简单的表格来总结他们的区别，以及操作是否安全：\n#### 不带路径执行\n命令行|HEAD|暂存区|工作区|目录安全\n:---:|:---:|:---:|:---:|:---:\ngit reset [--mixed] |YES|YES|NO|YES\ngit reset --soft |YES|YES|NO|YES\ngit reset --hard |YES|YES|YES|NO\ngit checkout |Modify|YES|YES|YES\n\n#### 带路径执行\n命令行|HEAD|暂存区|工作区|目录安全\n:---:|:---:|:---:|:---:|:---:\ngit reset -- |NO|YES|NO|YES\ngit checkout|NO|YES|YES|NO\n\n**注意：执行非目录安全的命令操作的时候，一定要慎重，除非你非常清楚自己在做什么！**\n\n“小明，你明白了吗？” 消息发送过去之后，等了很久却一直没有响应。\n“哎，这孩子！估计听睡着了... 😆”\n\n自从这次问到Git的问题后，已经两年过去了，小明再没有问到关于Git的问题。而就在昨天，突然又收到了小明的消息。\n\n# 也许你应该试试Git Flow\n“锋哥，我现在已经是Android Leader了。现在安卓团队一共6个人，我们现在在做一个社交类应用，在Git管理方面我还是发现了一些问题。其中一个问题就是，现在版本库有好多分支，其中开发主要在develop分支。主干分支是master主要用于版本发布。可还有一些分支却显得非常混乱，有什么办法改善这种情况吗？”\n\n“关于Git的分支设计，目前有一个公认比较好的设计叫 [Git Flow模型](https://github.com/nvie/gitflow)。关于Git Flow模型，你可以查看这篇文章 [http://nvie.com/posts/a-successful-git-branching-model/](http://nvie.com/posts/a-successful-git-branching-model/) 了解一下\"\n\n# 一个idea，一次提交\n\"好的！还有一个困扰了我很久的问题是，大家的提交日志写的比较笼统。在查找问题的时候非常不便，而且大部分同学一次性提交好多文件，导致解决问题的时候不能准确定位到具体是哪一次提交导致的。我告诉大家，一次提交改动要尽可能小。但当别人问到具体的提交规则的时候我又不知道从何说起...\"\n\n“这是一个很好的问题 。中国程序员普遍存在的一个问题是，恨不得把这辈子能提交的代码一次性搞定。甚至有人用多次提交太麻烦的借口来搪塞问责人。简单来说，可以用一句话概括提交原则：一个idea，一次提交。另外，你说的没错，提交必须尽可能小，注释必须尽可能表述准确！”\n\n给小明讲了这么多Git，我忍不住半开玩笑地问他，“小明，你现在还觉得Git简单吗？”\n\n小明发了一个无奈的表情！说道，“以前是我才疏学浅，略知皮毛，不知道Git原来还有这么多玩法，忍不住为Git的发明者点赞了。对了，锋哥，Git到底是谁开发的？”\n\n## Git的最大功臣，其实不是Linus\n”关于Git的故事，互联网上其实已经烂大街了。我简单给你介绍一下吧！Git的诞生其实是一个偶然，其初始使命是为Linux内核代码管理服务的。早年的时候Linux内核源码是用Bitkeeper版本控制工具管理的。可是，后来因为某些利益关系，Bitkeeper要求Linux社区付费使用。这一举动激怒了Linus，也就是Linux的创始人，他决定自己开发一个分布式版本控制系统。几周时间下来，Git的雏形就诞生了，并且开始在Linux社区中应用开来。虽然Linus是Git的创始人，可是背后的最大功臣却是一个日本人 [Junio C Hamano](https://en.wikipedia.org/wiki/Junio_Hamano)。Linus在Git开源版本库的提交只有258次，而Junio C Hamano却提交了4000多次。也就是说，在Linus开发后不久项目的管理权就交给了这个日本人。关于 [Junio C Hamano](https://en.wikipedia.org/wiki/Junio_Hamano)，你感兴趣的话可以Google了解一下。他现在在Google工作，如同Linus一样非常低调。“\n\n“这个故事也告诉我：不要用技术去挑战一个程序员 @_@ ”\n\n这个故事讲完，小明与Git的故事就已经告一段落了。其实，还有一些比较常见的问题，小明并没有问到过。这里，我为你准备了一个附录，给你介绍一些常用的小命令帮你解决日常小问题。它很有用，一定要拿笔记下来，或者收藏这篇文章备用。\n\n# 常见问题\n**问题一：公司的Git服务器是搭建在一个内网服务器上面的，我想把代码同时提交到OsChina上面，以便在家拉取代码，远程办公，怎么办？**\nGit本身是一个分布式的版本管理系统，实现这个需求非常简单，使用`git remote add`命令添加多个远程版本库关联即可。\n```\ngit remote add company git@xxx\ngit remote add home git@xxx\n```\n\n**问题二：在拉取远程代码的时候，如果本地有代码还没有提交，Git就会提示先提交代码到版本库。可暂时我又不想提交，怎么办？**\n针对这个问题，Git提供了一个临时区域用于保存不想提交的记录，对应的命令是`git stash`。通常情况下，你可以这样操作：\n```\n# 将暂时还不想提交的数据保存到临时区域，保存成功后，工作区将和版本库完全一致\ngit stash\n# 还原stash数据到工作区\ngit stash apply\n# 以上操作完成后，stash数据依然保存在临时区域中，为了删除这部分数据，使用如下命令即可。\ngit stash drop\n# 如果你想在还原数据的同时从临时区域删除数据，可以这样操作：\ngit statsh pop\n# 以上两个命令如果不接任何参数将删除掉所有的临时区域数据，如果你只想删除其中一条记录，指定对应索引数据即可。\ngit stash pop/drop stash@{index}\n# 查看临时区域所有数据，使用如下命令：\ngit stash list\n```\n\n**问题三：作为项目负责人，我希望迅速找出问题代码的“元凶”，有什么办法吗？**\n针对这个问题，最好的答案是`git blame`，使用这个命令并指定具体文件它将显示文件每一行代码的最近修改记录，你可以清晰地看到最近代码的修改人。\n\n**问题四：部分Team Leader会要求使用`git rebase`合并代码，这有什么好处吗？**\n我们用一个简单的思维来理解这个问题，最常见的合并操作是使用`git merge`，而这样操作会在合并分支生成一次新的提交，并且会严格记录分支提交日志，在长期开发过程中，日志就会呈现多条线路展示，给阅读带来一定的障碍。而使用`git rebase`会使整体代码提交记录始终像在单一分支开发一样，仅使用一条线路展示。但使用`git rebase`是有一定陷阱的，这个问题需要一定的时间才能说清楚，如果需要了解两个命令的详细区别，我推荐你阅读这篇文章 [Rebase 代替合并](https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/rebase)。\n\n# 总结\nGit是一个非常优秀的版本控制系统，我极力推荐你在日常开发中使用。这篇文章从小明的角度解释了几个常见问题的解决方案，毫无悬念地，你可能还会遇到其它的一些问题。遇到问题，你可以尝试使用Google搜索解决方案；也可以在文章下方给我留言，我非常乐意为你解答Git问题。\n\n---\n我是欧阳锋，版本控制，我使用Git。了解欧阳锋，从这里开始：[欧阳锋档案馆](http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/)。\n","source":"_posts/develop tools/关于Git，你真的学会了吗？.md","raw":"title: 关于Git，你真的学会了吗？\ndate: 2018/02/01 22:13\ncomments: true\ntags:\n- Git\n- 版本控制工具\n- 开发工具\n- 命令行\ncategories:\n- 开发工具\n- Git\n---\n\n“锋哥，Git有什么可说的，不就是`git add`添加，`git commit`提交嘛”  听说我要写一篇Git教程，小明不屑一顾地说。\n“...\"。\n\n小明是我的一个学生。目前，是一名Android开发工程师。\n\n过了几天，我又再次见到了小明。\n\n“锋哥，今天，我在Github新建了一个版本库，本地提交后推送远程的时候，却被拒绝了，是怎么回事？”\n\n以下是小明的操作记录：\n```\ngit init\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:xiaoming/xxx.git\ngit pull origin master\n```\n以上操作触发了下面的错误：\n```\nFrom git@github.com:xiaoming/xxx.git\n * branch            master     -> FETCH_HEAD\n * [new branch]      master     -> origin/master\nfatal: refusing to merge unrelated histories\n```\n“小明，注意看最后一句提示。翻译成中文的意思是 ‘拒绝合并不相关的历史’，这个问题有两个方案可以处理。\"\n\n* `git pull`命令其实是触发了拉取`git fetch`和合并`git merge`两个操作。而本地的版本库和远程版本库在第一次拉取或推送完成之前是毫不相关的，Git为了避免不必要的合并，默认不允许进行这样的操作。但你可以手动添加`--allow-unrelated-histories`强制进行合并，这是方案一。\n```\ngit pull origin master --allow-unrelated-histories\n```\n* 再来看方案二，从你上面的操作来看，你只是在本地初始化了一个版本库，并完成了基础的提交。接下来，你希望和远程版本库建立关联，将提交推送到远程。这种情况下，其实你可能并不需要远程的默认数据（通常是一个空的README文件）。所以，你可以添加`-f`参数，将提交强制提交并覆盖远程版本库。\n```\ngit push -f origin master\n```\n\n小明若有所思地点点头，这是小明第一次遇到Git问题。我想，接下来他应该会比较顺利了。\n\n没想到，过了几天，我又收到了小明的消息。这一次，他发来的是对Git的抱怨。\n\n“锋哥，Git好讨厌，提交日志出现了错误，也不能修改。你知道搜狗输入法有时候不够智能，输入太快不小心就输错了...😓” \n\n“🙂，你这孩子，别轻易下结论哈。其实，Git是允许修改提交记录的。使用Git最舒服的一点就是：Git永远都会给你反悔的机会。这一点，其它的版本控制工具是做不到的！”\n\n“哦，原来是这样啊！那快说说看，要怎么做？” 小明已经一副迫不及待的表情了。\n\n“`git commit`命令中有一个参数叫`--amend`就是为解决这个问题而生的。因此，如果是最近的提交，你只需要按照下面的命令操作即可。”\n\n```\ngit commit --amend -m \"这是新的提交日志\"\n```\n\n看完我的消息，小明给我发来一个微笑的表情。小明的抱怨让我想起一句好气又好笑的农村俗语 “屙屎不出怪茅坑”，哈哈。\n\n本以为一切可以风平浪静了。没想到，过了一个月左右，突然接到了小明的紧急电话。电话那头，小明似乎心情很急躁。\n\n“锋哥，我不小心进行了还原操作，我写的代码全丢了。几千行的代码啊，明天晚上就要发版本了，有办法找回来吗？”\n\n听到这个消息，我心里盘算，大约有50%的概率应该是找不回来了。这孩子比较粗心，可能根本就没提交到版本库。但如果他正好提交到了版本库，兴许还有救。因此，我安慰他说 “小明，别急！你打开TeamViewer，我远程帮你看看”\n\n连上机器后，我使用`history`命令看到小明在提交之后使用了`git reset --hard xxx`命令进行重置。`--hard`是`git reset`命令中唯一一个不安全的操作，它会真正地销毁数据，以至于你在`git log`中完全看不到操作日志。可是，Git真的很聪明，它还保存了另外一份日志叫`reflog`，这个日志记录了你每次修改HEAD的操作。因此，你可以通过下面的命令对数据进行还原：\n```\ngit reflog\n\n// 使用这个命令，你看到的日志大概是这样\nc8278f9 (HEAD -> master) HEAD@{0}: reset: moving to c8278f9914a91e3aca6ab0993b48073ba1e41b2b\n3e59423 HEAD@{1}: commit: a\nc8278f9 (HEAD -> master) HEAD@{2}: commit (amend): v2 update\n2dc167b HEAD@{3}: commit: v2\n2e342e9 HEAD@{4}: commit (initial): Init commit\n```\n\n可以看到，我们在版本`3e59423`进行了`git reset`操作，最新版本是`3e59423`。因此，我们可以再次通过`git reset`命令回到这个版本：\n```\ngit reset --hard 3e59423\n```\n以上操作完成后，你会惊喜地发现，丢失的数据居然神奇般地回来了。\n\n“🌺 🌺 🌺”\n\n“下次别这样操作了哈。另外，你怎么一次性丢失这么多代码。一定要记得勤提交。” 小明出现这样的问题，与平时的不规范操作也是分不开的。因此，最后我还不忘嘱咐了他一句。\n\n“好的，我知道了。对了，我一个还有比较疑惑的问题。`git checkout`和`git reset`到底有啥区别？我以前用SVN的时候`git checkout`是用来检出代码的，在Git中可以用它切换分支或者指定版本，但`git reset`同样可以做到。难道两者是完全一样的吗？” 小明在QQ中给我发来了回复消息。\n\n“这是一个比较有深度的问题，解释这个问题需要一点时间。接下来，你仔细听”\n\n## 理解Git工作空间\n理解这个问题之前，先来简单学习一些Git基础知识。Git有三种状态：\n* 已提交（commited）：数据已完全保存到本地数据库中\n* 已修改（modified）：修改了文件，但还没有保存到数据库中\n* 已暂存（staged)：对一个已修改的文件做了标记，将包含在下一次提交的版本快照中\n\n这三种状态对应Git三个工作区域：Git版本库、暂存区和工作区\n![](http://upload-images.jianshu.io/upload_images/703764-6459c27004beb536.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit版本库是Git用来保存项目的元数据和对象数据库的地方，使用`git clone`命令时拷贝的就是这里的数据。\n\n工作目录是对某个版本独立检出的内容，这些数据可以供你使用和修改。\n\n暂存区在Git内部对应一个名为index的文件，它保存了下次将要提交的文件列表信息。因此，暂存区有时候也被叫作 “索引”。\n\n一个基础的Git工作流程如下：\n1）在工作区修改文件\n2）使用`git add`将文件添加到暂存区，也就是记录到`index`文件中\n3）使用`git commit`将暂存区中记录的文件列表，使用快照永久地保存到Git版本库中\n\n## 理解HEAD\n解释这个问题，你还需要简单理解HEAD是什么。简单来说，HEAD是当前分支引用的指针，它永远指向该分支上最后一次提交。为了让你更容易理解HEAD，你可以将HEAD看作上一次提交数据的快照。\n\n如果你感兴趣，你可以使用一个底层命令来查看当前HEAD的快照信息:\n```\ngit ls-tree -r HEAD\n\n100644 blob aca4b576b7d4534266cb818ab1191d91887508b9\tdemo/src/main/java/com/youngfeng/snake/demo/Constant.java\n100644 blob b8691ec87867b180e6ffc8dd5a7e85747698630d\tdemo/src/main/java/com/youngfeng/snake/demo/SnakeApplication.java\n100644 blob 9a70557b761171ca196196a7c94a26ebbec89bb1\tdemo/src/main/java/com/youngfeng/snake/demo/activities/FirstActivity.java\n100644 blob fab8d2f5cb65129df09185c5bd210d20484154ce\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SecondActivity.java\n100644 blob a7509233ecd8fe6c646f8585f756c74842ef0216\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SplashActivity.java\n```\n\n这里简单解释一下每个字段的意思：100644表示文件模式，其对应一个普通文件。blob表示Git内部存储对象数据类型，另外还有一种数据类型tree，对应一个树对象，中间较长的字符串对应当前文件的SHA-1值，这部分不需要记住，简单了解即可。\n\n所以，简单来说，HEAD对应一个树形结构，存储了当前分支所有的Git对象快照：\n![](http://upload-images.jianshu.io/upload_images/703764-639a489c0930506a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们用一个表格简单来总结一下以上知识点：\n\nHEAD|Index(暂存区)|工作区\n:--:|:--:|:--:\n上一次提交的快照，下一次提交的父节点|预期的下一次提交快照|当前正在操作的沙盒目录\n\n理解`git reset`和`git checkout`区别主要是理解Git内部是怎么操作以上三棵树的。\n\n接下来，我们用一个简单的例子来看一下使用`git reset`到底发生了什么。先创建一个Git版本库并触发三次提交：\n```\ngit init repo\ntouch file.txt\ngit add file.txt\ngit commit -m \"v1\"\n\necho v2 > file.txt\ngit add file.txt\ngit commit -m \"v2\"\n\necho v3 > file.txt\ngit add file.txt\ngit commit -m \"v3\"\n```\n\n以上操作完成后，版本库现在看起来是这样的：\n![](http://upload-images.jianshu.io/upload_images/703764-553e3fc8b81023c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来执行命令`git reset 14ad152`看看会发生什么。以下是命令执行完成后看到的结果：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n M file.txt\n\ncat file.txt\n### This is output ###\nv3\n```\n\n可以看到版本库中文件版本回退到了V2，工作区文件内容同之前的版本V3一致；为了确认暂存区发生了什么变化，我们再使用一个底层命令对比一下暂存区数据和版本库数据是否一致：\n```\n# 查看暂存区信息\ngit ls-files -s\n### This is output ###\n100644 8c1384d825dbbe41309b7dc18ee7991a9085c46e 0\tfile.txt\n\n# 查看版本库快照信息\ngit ls-tree -r HEAD\n### This is output ###\n100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt\n```\n\n可以看到当前版本库和暂存区信息是完全一致的，HEAD指向了v2提交，用一个图形来表示整个过程，应该是这样：\n![](http://upload-images.jianshu.io/upload_images/703764-5d21495a27e774c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n看一眼上图，理解一下刚刚发生的事情：首先，HEAD指针发生了移动，指向了V2，并撤销了上一次提交。目前，版本库和暂存区都保存的是第二次提交的记录，工作区却保存了最近一次修改。稍微联想一下，你就会发现，这次的`git reset`命令恰好是最近一次提交的逆向操作。让数据完全回到了上一次提交前的状态。所以，如果你想撤销最近一次提交，可以这么做。\n\n####  增加--soft参数测试\n以上是我们对`git reset`命令的第一次尝试，在下一轮尝试前，先执行`git help reset`看看`reset`命令的用法：\n```\ngit reset [-q] [<tree-ish>] [--] <paths>...\ngit reset (--patch | -p) [<tree-ish>] [--] [<paths>...]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n```\n\n看最后一句发现，`reset`命令后面还可以接5个不同的参数: `--soft`、`--mixed`、`--hard` 、`--merge`、`--keep`。这里我们主要关注前面三个，其中`--mixed`其实刚刚已经尝试过，它和不带参数的`git reset`命令是同样的效果。换而言之，`--mixed`是`git reset`命令的默认行为。接下来执行`git reset --soft 14ad152`看看会发生什么。命令执行完成后，按照惯例，我们同样使用基础命令看看发生了什么变化：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\nM  file.txt\n\ncat file.txt\n### This is output ###\nv3\n```\n奇怪了？为什么会和上次不带任何参数的执行结果完全一致？难道Git出现了设计错误。相信你看到结果一定会有这样的疑问，其实不然！因为，这里我用文本粘贴了输出结果，忽略了命令的字体颜色，其实这里第二条命令输出结果中的M颜色与上一次执行结果是不一样的。为了让你看到不同，看下面的截图：\n![](http://upload-images.jianshu.io/upload_images/703764-c76ba02b7fb8b5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这个颜色表示：file.txt文件已经被添加到了暂存区，使用`git commit`命令就可以完成提交。为了严谨，我们依然使用上面的底层命令看看版本库和暂存区信息是否一致。注意：这里的结果应该是不一致才对，因为版本库记录的文件版本是v2，而暂存区记录的文件版本其实是v3。\n```\ngit ls-tree -r HEAD\n### This is output ###\n100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt\n\ngit ls-files -s\n### This is output ###\n100644 29ef827e8a45b1039d908884aae4490157bcb2b4 0\tfile.txt\n```\n可以看到，两个命令执行输出的SHA-1并不一致，验证了我们的猜想。\n\n这里我们可以得出一个结论：`--soft`和默认行为(`--mixed`)不一样的地方是：`--soft`会将工作区的最新文件版本再做一步操作，添加到暂存区。使用这个命令可以用来合并提交。即：如果你在某一次提交中有未完成的工作，而你反悔了，你可以使用这个命令撤销提交，等工作做完后继续一次性完成提交。\n\n####  增加--hard参数测试\n接下来我们对最后一个参数进行测试，这也是小明在使用过程出现问题的一个参数。执行命令`git reset --hard 14ad152`，看看发生了什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n>>> No output <<<\n\ncat file.txt\nv2\n```\n\n注意看，这次使用`git status -s`完全看不到输出，这就证明：当前工作区，暂存区，版本库数据是完全一致的。查看文件内容，发现文件回到了v2版本。通常情况下，如果你看到这种情况，一定会吓一跳，你最近一次提交的数据居然完全丢失了。的确，这是Git命令中少有的几个真正销毁数据的命令之一。除非你非常清楚地知道自己在做什么，否则，请尽量不要使用这个命令！\n\n我们依然用一张图，完整地描述这个命令到底发什么了什么：\n![](http://upload-images.jianshu.io/upload_images/703764-dea7f52471f35ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到，相对于默认行为，`--hard`将工作区的数据也还原到了V2版本，以至于V3版本的提交已经完全丢失。\n\n# git checkout\n接下来看`git checkout`,  按照惯例，先执行`git checkout 14ad152`看看会发生什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n14ad152 (HEAD -> master) v2\nbcc49f4 v1\n\ngit status -s\n### This is output ###\n>>> No output <<<\n\ncat file.txt\nv2\n```\n\n可以看到，又出现了神奇的一幕，这一次`git checkout`命令的执行结果的确和`git reset --hard`完全一致。这是否意味着两者就没有任何区别了呢？当然也不是。严格来说，两者有两个“本质”的区别：\n* 相对而言，`git checkout`对工作目录是安全的，它不会将工作区已经修改的文件还原，`git reset`则不管三七二十一一股脑全部还原。\n* 另外一个比较重要的区别是，`git checkout`并不移动HEAD分支的指向，它是通过直接修改HEAD引用来完成指针的指向。\n\n第二个不同点相对比较难理解，我们用一张图来更直观地展示二者的区别：\n![](http://upload-images.jianshu.io/upload_images/703764-c0e4b18961fe668f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简单来说，`git reset`会通过移动指针来完成HEAD的指向，而`git checkout`则通过直接修改HEAD本身来完成指向的移动。\n\n# 命令作用于部分文件\n`git reset`和`git checkout`还可以作用于一个文件，或者部分文件，即带文件路径执行。这种情况下，两个命令的表现不太一样。我们来试试看，先执行` git reset 14ad15 -- file.txt`命令尝试将文件恢复到V2版本。命令执行完成，按照惯例用一些基础命令来看看发生了什么：\n```\ngit log --abbrev-commit --pretty=oneline\n### This is output ###\n4521405 (HEAD -> master) v3\n14ad152 v2\nbcc49f4 v1\n\ngit status -v\n### This is output ###\ndiff --git a/file.txt b/file.txt\nindex 29ef827..8c1384d 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1 @@\n-v3\n+v2\n\ncat file.txt\nv3\n```\n\n可以看到，版本库和工作区的数据都没有发生变化。唯一发生变化的是暂存区，暂存区记录下一次提交的改动将导致数据从V3恢复到V2版本!\n![](http://upload-images.jianshu.io/upload_images/703764-d9199360f0dbe0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里我们可以这样理解：执行这条命令后，Git先将暂存区和工作区的文件版本恢复到V2，再将工作区的文件版本恢复到V3。与`--hard`不一样的地方是：这个命令并不会覆盖工作区已经修改的文件，是安全操作。\n\n执行带路径的`git checkout`命令和`git reset`命令有一些细微的差别，相对于`git reset`，`git checkout`带路径执行会覆盖工作区已经修改的内容，导致数据丢失，是一个非安全操作。\n\n针对上面的所有实验，我们用一个简单的表格来总结他们的区别，以及操作是否安全：\n#### 不带路径执行\n命令行|HEAD|暂存区|工作区|目录安全\n:---:|:---:|:---:|:---:|:---:\ngit reset [--mixed] |YES|YES|NO|YES\ngit reset --soft |YES|YES|NO|YES\ngit reset --hard |YES|YES|YES|NO\ngit checkout |Modify|YES|YES|YES\n\n#### 带路径执行\n命令行|HEAD|暂存区|工作区|目录安全\n:---:|:---:|:---:|:---:|:---:\ngit reset -- |NO|YES|NO|YES\ngit checkout|NO|YES|YES|NO\n\n**注意：执行非目录安全的命令操作的时候，一定要慎重，除非你非常清楚自己在做什么！**\n\n“小明，你明白了吗？” 消息发送过去之后，等了很久却一直没有响应。\n“哎，这孩子！估计听睡着了... 😆”\n\n自从这次问到Git的问题后，已经两年过去了，小明再没有问到关于Git的问题。而就在昨天，突然又收到了小明的消息。\n\n# 也许你应该试试Git Flow\n“锋哥，我现在已经是Android Leader了。现在安卓团队一共6个人，我们现在在做一个社交类应用，在Git管理方面我还是发现了一些问题。其中一个问题就是，现在版本库有好多分支，其中开发主要在develop分支。主干分支是master主要用于版本发布。可还有一些分支却显得非常混乱，有什么办法改善这种情况吗？”\n\n“关于Git的分支设计，目前有一个公认比较好的设计叫 [Git Flow模型](https://github.com/nvie/gitflow)。关于Git Flow模型，你可以查看这篇文章 [http://nvie.com/posts/a-successful-git-branching-model/](http://nvie.com/posts/a-successful-git-branching-model/) 了解一下\"\n\n# 一个idea，一次提交\n\"好的！还有一个困扰了我很久的问题是，大家的提交日志写的比较笼统。在查找问题的时候非常不便，而且大部分同学一次性提交好多文件，导致解决问题的时候不能准确定位到具体是哪一次提交导致的。我告诉大家，一次提交改动要尽可能小。但当别人问到具体的提交规则的时候我又不知道从何说起...\"\n\n“这是一个很好的问题 。中国程序员普遍存在的一个问题是，恨不得把这辈子能提交的代码一次性搞定。甚至有人用多次提交太麻烦的借口来搪塞问责人。简单来说，可以用一句话概括提交原则：一个idea，一次提交。另外，你说的没错，提交必须尽可能小，注释必须尽可能表述准确！”\n\n给小明讲了这么多Git，我忍不住半开玩笑地问他，“小明，你现在还觉得Git简单吗？”\n\n小明发了一个无奈的表情！说道，“以前是我才疏学浅，略知皮毛，不知道Git原来还有这么多玩法，忍不住为Git的发明者点赞了。对了，锋哥，Git到底是谁开发的？”\n\n## Git的最大功臣，其实不是Linus\n”关于Git的故事，互联网上其实已经烂大街了。我简单给你介绍一下吧！Git的诞生其实是一个偶然，其初始使命是为Linux内核代码管理服务的。早年的时候Linux内核源码是用Bitkeeper版本控制工具管理的。可是，后来因为某些利益关系，Bitkeeper要求Linux社区付费使用。这一举动激怒了Linus，也就是Linux的创始人，他决定自己开发一个分布式版本控制系统。几周时间下来，Git的雏形就诞生了，并且开始在Linux社区中应用开来。虽然Linus是Git的创始人，可是背后的最大功臣却是一个日本人 [Junio C Hamano](https://en.wikipedia.org/wiki/Junio_Hamano)。Linus在Git开源版本库的提交只有258次，而Junio C Hamano却提交了4000多次。也就是说，在Linus开发后不久项目的管理权就交给了这个日本人。关于 [Junio C Hamano](https://en.wikipedia.org/wiki/Junio_Hamano)，你感兴趣的话可以Google了解一下。他现在在Google工作，如同Linus一样非常低调。“\n\n“这个故事也告诉我：不要用技术去挑战一个程序员 @_@ ”\n\n这个故事讲完，小明与Git的故事就已经告一段落了。其实，还有一些比较常见的问题，小明并没有问到过。这里，我为你准备了一个附录，给你介绍一些常用的小命令帮你解决日常小问题。它很有用，一定要拿笔记下来，或者收藏这篇文章备用。\n\n# 常见问题\n**问题一：公司的Git服务器是搭建在一个内网服务器上面的，我想把代码同时提交到OsChina上面，以便在家拉取代码，远程办公，怎么办？**\nGit本身是一个分布式的版本管理系统，实现这个需求非常简单，使用`git remote add`命令添加多个远程版本库关联即可。\n```\ngit remote add company git@xxx\ngit remote add home git@xxx\n```\n\n**问题二：在拉取远程代码的时候，如果本地有代码还没有提交，Git就会提示先提交代码到版本库。可暂时我又不想提交，怎么办？**\n针对这个问题，Git提供了一个临时区域用于保存不想提交的记录，对应的命令是`git stash`。通常情况下，你可以这样操作：\n```\n# 将暂时还不想提交的数据保存到临时区域，保存成功后，工作区将和版本库完全一致\ngit stash\n# 还原stash数据到工作区\ngit stash apply\n# 以上操作完成后，stash数据依然保存在临时区域中，为了删除这部分数据，使用如下命令即可。\ngit stash drop\n# 如果你想在还原数据的同时从临时区域删除数据，可以这样操作：\ngit statsh pop\n# 以上两个命令如果不接任何参数将删除掉所有的临时区域数据，如果你只想删除其中一条记录，指定对应索引数据即可。\ngit stash pop/drop stash@{index}\n# 查看临时区域所有数据，使用如下命令：\ngit stash list\n```\n\n**问题三：作为项目负责人，我希望迅速找出问题代码的“元凶”，有什么办法吗？**\n针对这个问题，最好的答案是`git blame`，使用这个命令并指定具体文件它将显示文件每一行代码的最近修改记录，你可以清晰地看到最近代码的修改人。\n\n**问题四：部分Team Leader会要求使用`git rebase`合并代码，这有什么好处吗？**\n我们用一个简单的思维来理解这个问题，最常见的合并操作是使用`git merge`，而这样操作会在合并分支生成一次新的提交，并且会严格记录分支提交日志，在长期开发过程中，日志就会呈现多条线路展示，给阅读带来一定的障碍。而使用`git rebase`会使整体代码提交记录始终像在单一分支开发一样，仅使用一条线路展示。但使用`git rebase`是有一定陷阱的，这个问题需要一定的时间才能说清楚，如果需要了解两个命令的详细区别，我推荐你阅读这篇文章 [Rebase 代替合并](https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/rebase)。\n\n# 总结\nGit是一个非常优秀的版本控制系统，我极力推荐你在日常开发中使用。这篇文章从小明的角度解释了几个常见问题的解决方案，毫无悬念地，你可能还会遇到其它的一些问题。遇到问题，你可以尝试使用Google搜索解决方案；也可以在文章下方给我留言，我非常乐意为你解答Git问题。\n\n---\n我是欧阳锋，版本控制，我使用Git。了解欧阳锋，从这里开始：[欧阳锋档案馆](http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/)。\n","slug":"develop tools/关于Git，你真的学会了吗？","published":1,"updated":"2019-04-28T12:39:23.522Z","_id":"cjv0x7ujn005vbkb4mkvno0qs","layout":"post","photos":[],"link":"","content":"<p>“锋哥，Git有什么可说的，不就是<code>git add</code>添加，<code>git commit</code>提交嘛”  听说我要写一篇Git教程，小明不屑一顾地说。<br>“…”。</p>\n<p>小明是我的一个学生。目前，是一名Android开发工程师。</p>\n<p>过了几天，我又再次见到了小明。</p>\n<p>“锋哥，今天，我在Github新建了一个版本库，本地提交后推送远程的时候，却被拒绝了，是怎么回事？”</p>\n<p>以下是小明的操作记录：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Init commit&quot;</span><br><span class=\"line\">git remote add origin git@github.com:xiaoming/xxx.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>以上操作触发了下面的错误：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From git@github.com:xiaoming/xxx.git</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"> * [new branch]      master     -&gt; origin/master</span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure></p>\n<p>“小明，注意看最后一句提示。翻译成中文的意思是 ‘拒绝合并不相关的历史’，这个问题有两个方案可以处理。”</p>\n<ul>\n<li><p><code>git pull</code>命令其实是触发了拉取<code>git fetch</code>和合并<code>git merge</code>两个操作。而本地的版本库和远程版本库在第一次拉取或推送完成之前是毫不相关的，Git为了避免不必要的合并，默认不允许进行这样的操作。但你可以手动添加<code>--allow-unrelated-histories</code>强制进行合并，这是方案一。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再来看方案二，从你上面的操作来看，你只是在本地初始化了一个版本库，并完成了基础的提交。接下来，你希望和远程版本库建立关联，将提交推送到远程。这种情况下，其实你可能并不需要远程的默认数据（通常是一个空的README文件）。所以，你可以添加<code>-f</code>参数，将提交强制提交并覆盖远程版本库。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>小明若有所思地点点头，这是小明第一次遇到Git问题。我想，接下来他应该会比较顺利了。</p>\n<p>没想到，过了几天，我又收到了小明的消息。这一次，他发来的是对Git的抱怨。</p>\n<p>“锋哥，Git好讨厌，提交日志出现了错误，也不能修改。你知道搜狗输入法有时候不够智能，输入太快不小心就输错了…😓” </p>\n<p>“🙂，你这孩子，别轻易下结论哈。其实，Git是允许修改提交记录的。使用Git最舒服的一点就是：Git永远都会给你反悔的机会。这一点，其它的版本控制工具是做不到的！”</p>\n<p>“哦，原来是这样啊！那快说说看，要怎么做？” 小明已经一副迫不及待的表情了。</p>\n<p>“<code>git commit</code>命令中有一个参数叫<code>--amend</code>就是为解决这个问题而生的。因此，如果是最近的提交，你只需要按照下面的命令操作即可。”</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend -m &quot;这是新的提交日志&quot;</span><br></pre></td></tr></table></figure>\n<p>看完我的消息，小明给我发来一个微笑的表情。小明的抱怨让我想起一句好气又好笑的农村俗语 “屙屎不出怪茅坑”，哈哈。</p>\n<p>本以为一切可以风平浪静了。没想到，过了一个月左右，突然接到了小明的紧急电话。电话那头，小明似乎心情很急躁。</p>\n<p>“锋哥，我不小心进行了还原操作，我写的代码全丢了。几千行的代码啊，明天晚上就要发版本了，有办法找回来吗？”</p>\n<p>听到这个消息，我心里盘算，大约有50%的概率应该是找不回来了。这孩子比较粗心，可能根本就没提交到版本库。但如果他正好提交到了版本库，兴许还有救。因此，我安慰他说 “小明，别急！你打开TeamViewer，我远程帮你看看”</p>\n<p>连上机器后，我使用<code>history</code>命令看到小明在提交之后使用了<code>git reset --hard xxx</code>命令进行重置。<code>--hard</code>是<code>git reset</code>命令中唯一一个不安全的操作，它会真正地销毁数据，以至于你在<code>git log</code>中完全看不到操作日志。可是，Git真的很聪明，它还保存了另外一份日志叫<code>reflog</code>，这个日志记录了你每次修改HEAD的操作。因此，你可以通过下面的命令对数据进行还原：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用这个命令，你看到的日志大概是这样</span><br><span class=\"line\">c8278f9 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to c8278f9914a91e3aca6ab0993b48073ba1e41b2b</span><br><span class=\"line\">3e59423 HEAD@&#123;1&#125;: commit: a</span><br><span class=\"line\">c8278f9 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (amend): v2 update</span><br><span class=\"line\">2dc167b HEAD@&#123;3&#125;: commit: v2</span><br><span class=\"line\">2e342e9 HEAD@&#123;4&#125;: commit (initial): Init commit</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，我们在版本<code>3e59423</code>进行了<code>git reset</code>操作，最新版本是<code>3e59423</code>。因此，我们可以再次通过<code>git reset</code>命令回到这个版本：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 3e59423</span><br></pre></td></tr></table></figure></p>\n<p>以上操作完成后，你会惊喜地发现，丢失的数据居然神奇般地回来了。</p>\n<p>“🌺 🌺 🌺”</p>\n<p>“下次别这样操作了哈。另外，你怎么一次性丢失这么多代码。一定要记得勤提交。” 小明出现这样的问题，与平时的不规范操作也是分不开的。因此，最后我还不忘嘱咐了他一句。</p>\n<p>“好的，我知道了。对了，我一个还有比较疑惑的问题。<code>git checkout</code>和<code>git reset</code>到底有啥区别？我以前用SVN的时候<code>git checkout</code>是用来检出代码的，在Git中可以用它切换分支或者指定版本，但<code>git reset</code>同样可以做到。难道两者是完全一样的吗？” 小明在QQ中给我发来了回复消息。</p>\n<p>“这是一个比较有深度的问题，解释这个问题需要一点时间。接下来，你仔细听”</p>\n<h2 id=\"理解Git工作空间\"><a href=\"#理解Git工作空间\" class=\"headerlink\" title=\"理解Git工作空间\"></a>理解Git工作空间</h2><p>理解这个问题之前，先来简单学习一些Git基础知识。Git有三种状态：</p>\n<ul>\n<li>已提交（commited）：数据已完全保存到本地数据库中</li>\n<li>已修改（modified）：修改了文件，但还没有保存到数据库中</li>\n<li>已暂存（staged)：对一个已修改的文件做了标记，将包含在下一次提交的版本快照中</li>\n</ul>\n<p>这三种状态对应Git三个工作区域：Git版本库、暂存区和工作区<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-6459c27004beb536.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>Git版本库是Git用来保存项目的元数据和对象数据库的地方，使用<code>git clone</code>命令时拷贝的就是这里的数据。</p>\n<p>工作目录是对某个版本独立检出的内容，这些数据可以供你使用和修改。</p>\n<p>暂存区在Git内部对应一个名为index的文件，它保存了下次将要提交的文件列表信息。因此，暂存区有时候也被叫作 “索引”。</p>\n<p>一个基础的Git工作流程如下：<br>1）在工作区修改文件<br>2）使用<code>git add</code>将文件添加到暂存区，也就是记录到<code>index</code>文件中<br>3）使用<code>git commit</code>将暂存区中记录的文件列表，使用快照永久地保存到Git版本库中</p>\n<h2 id=\"理解HEAD\"><a href=\"#理解HEAD\" class=\"headerlink\" title=\"理解HEAD\"></a>理解HEAD</h2><p>解释这个问题，你还需要简单理解HEAD是什么。简单来说，HEAD是当前分支引用的指针，它永远指向该分支上最后一次提交。为了让你更容易理解HEAD，你可以将HEAD看作上一次提交数据的快照。</p>\n<p>如果你感兴趣，你可以使用一个底层命令来查看当前HEAD的快照信息:<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">100644 blob aca4b576b7d4534266cb818ab1191d91887508b9\tdemo/src/main/java/com/youngfeng/snake/demo/Constant.java</span><br><span class=\"line\">100644 blob b8691ec87867b180e6ffc8dd5a7e85747698630d\tdemo/src/main/java/com/youngfeng/snake/demo/SnakeApplication.java</span><br><span class=\"line\">100644 blob 9a70557b761171ca196196a7c94a26ebbec89bb1\tdemo/src/main/java/com/youngfeng/snake/demo/activities/FirstActivity.java</span><br><span class=\"line\">100644 blob fab8d2f5cb65129df09185c5bd210d20484154ce\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SecondActivity.java</span><br><span class=\"line\">100644 blob a7509233ecd8fe6c646f8585f756c74842ef0216\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SplashActivity.java</span><br></pre></td></tr></table></figure></p>\n<p>这里简单解释一下每个字段的意思：100644表示文件模式，其对应一个普通文件。blob表示Git内部存储对象数据类型，另外还有一种数据类型tree，对应一个树对象，中间较长的字符串对应当前文件的SHA-1值，这部分不需要记住，简单了解即可。</p>\n<p>所以，简单来说，HEAD对应一个树形结构，存储了当前分支所有的Git对象快照：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-639a489c0930506a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>我们用一个表格简单来总结一下以上知识点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">Index(暂存区)</th>\n<th style=\"text-align:center\">工作区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">上一次提交的快照，下一次提交的父节点</td>\n<td style=\"text-align:center\">预期的下一次提交快照</td>\n<td style=\"text-align:center\">当前正在操作的沙盒目录</td>\n</tr>\n</tbody>\n</table>\n<p>理解<code>git reset</code>和<code>git checkout</code>区别主要是理解Git内部是怎么操作以上三棵树的。</p>\n<p>接下来，我们用一个简单的例子来看一下使用<code>git reset</code>到底发生了什么。先创建一个Git版本库并触发三次提交：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init repo</span><br><span class=\"line\">touch file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo v2 &gt; file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo v3 &gt; file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v3&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上操作完成后，版本库现在看起来是这样的：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-553e3fc8b81023c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接下来执行命令<code>git reset 14ad152</code>看看会发生什么。以下是命令执行完成后看到的结果：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\"> M file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>可以看到版本库中文件版本回退到了V2，工作区文件内容同之前的版本V3一致；为了确认暂存区发生了什么变化，我们再使用一个底层命令对比一下暂存区数据和版本库数据是否一致：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看暂存区信息</span><br><span class=\"line\">git ls-files -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 8c1384d825dbbe41309b7dc18ee7991a9085c46e 0\tfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本库快照信息</span><br><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt</span><br></pre></td></tr></table></figure></p>\n<p>可以看到当前版本库和暂存区信息是完全一致的，HEAD指向了v2提交，用一个图形来表示整个过程，应该是这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-5d21495a27e774c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>看一眼上图，理解一下刚刚发生的事情：首先，HEAD指针发生了移动，指向了V2，并撤销了上一次提交。目前，版本库和暂存区都保存的是第二次提交的记录，工作区却保存了最近一次修改。稍微联想一下，你就会发现，这次的<code>git reset</code>命令恰好是最近一次提交的逆向操作。让数据完全回到了上一次提交前的状态。所以，如果你想撤销最近一次提交，可以这么做。</p>\n<h4 id=\"增加–soft参数测试\"><a href=\"#增加–soft参数测试\" class=\"headerlink\" title=\"增加–soft参数测试\"></a>增加–soft参数测试</h4><p>以上是我们对<code>git reset</code>命令的第一次尝试，在下一轮尝试前，先执行<code>git help reset</code>看看<code>reset</code>命令的用法：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;...</span><br><span class=\"line\">git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;...]</span><br><span class=\"line\">git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>看最后一句发现，<code>reset</code>命令后面还可以接5个不同的参数: <code>--soft</code>、<code>--mixed</code>、<code>--hard</code> 、<code>--merge</code>、<code>--keep</code>。这里我们主要关注前面三个，其中<code>--mixed</code>其实刚刚已经尝试过，它和不带参数的<code>git reset</code>命令是同样的效果。换而言之，<code>--mixed</code>是<code>git reset</code>命令的默认行为。接下来执行<code>git reset --soft 14ad152</code>看看会发生什么。命令执行完成后，按照惯例，我们同样使用基础命令看看发生了什么变化：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">M  file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>奇怪了？为什么会和上次不带任何参数的执行结果完全一致？难道Git出现了设计错误。相信你看到结果一定会有这样的疑问，其实不然！因为，这里我用文本粘贴了输出结果，忽略了命令的字体颜色，其实这里第二条命令输出结果中的M颜色与上一次执行结果是不一样的。为了让你看到不同，看下面的截图：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-c76ba02b7fb8b5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这个颜色表示：file.txt文件已经被添加到了暂存区，使用<code>git commit</code>命令就可以完成提交。为了严谨，我们依然使用上面的底层命令看看版本库和暂存区信息是否一致。注意：这里的结果应该是不一致才对，因为版本库记录的文件版本是v2，而暂存区记录的文件版本其实是v3。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\">git ls-files -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 29ef827e8a45b1039d908884aae4490157bcb2b4 0\tfile.txt</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，两个命令执行输出的SHA-1并不一致，验证了我们的猜想。</p>\n<p>这里我们可以得出一个结论：<code>--soft</code>和默认行为(<code>--mixed</code>)不一样的地方是：<code>--soft</code>会将工作区的最新文件版本再做一步操作，添加到暂存区。使用这个命令可以用来合并提交。即：如果你在某一次提交中有未完成的工作，而你反悔了，你可以使用这个命令撤销提交，等工作做完后继续一次性完成提交。</p>\n<h4 id=\"增加–hard参数测试\"><a href=\"#增加–hard参数测试\" class=\"headerlink\" title=\"增加–hard参数测试\"></a>增加–hard参数测试</h4><p>接下来我们对最后一个参数进行测试，这也是小明在使用过程出现问题的一个参数。执行命令<code>git reset --hard 14ad152</code>，看看发生了什么：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">&gt;&gt;&gt; No output &lt;&lt;&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v2</span><br></pre></td></tr></table></figure></p>\n<p>注意看，这次使用<code>git status -s</code>完全看不到输出，这就证明：当前工作区，暂存区，版本库数据是完全一致的。查看文件内容，发现文件回到了v2版本。通常情况下，如果你看到这种情况，一定会吓一跳，你最近一次提交的数据居然完全丢失了。的确，这是Git命令中少有的几个真正销毁数据的命令之一。除非你非常清楚地知道自己在做什么，否则，请尽量不要使用这个命令！</p>\n<p>我们依然用一张图，完整地描述这个命令到底发什么了什么：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-dea7f52471f35ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到，相对于默认行为，<code>--hard</code>将工作区的数据也还原到了V2版本，以至于V3版本的提交已经完全丢失。</p>\n<h1 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h1><p>接下来看<code>git checkout</code>,  按照惯例，先执行<code>git checkout 14ad152</code>看看会发生什么：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">&gt;&gt;&gt; No output &lt;&lt;&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v2</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，又出现了神奇的一幕，这一次<code>git checkout</code>命令的执行结果的确和<code>git reset --hard</code>完全一致。这是否意味着两者就没有任何区别了呢？当然也不是。严格来说，两者有两个“本质”的区别：</p>\n<ul>\n<li>相对而言，<code>git checkout</code>对工作目录是安全的，它不会将工作区已经修改的文件还原，<code>git reset</code>则不管三七二十一一股脑全部还原。</li>\n<li>另外一个比较重要的区别是，<code>git checkout</code>并不移动HEAD分支的指向，它是通过直接修改HEAD引用来完成指针的指向。</li>\n</ul>\n<p>第二个不同点相对比较难理解，我们用一张图来更直观地展示二者的区别：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-c0e4b18961fe668f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>简单来说，<code>git reset</code>会通过移动指针来完成HEAD的指向，而<code>git checkout</code>则通过直接修改HEAD本身来完成指向的移动。</p>\n<h1 id=\"命令作用于部分文件\"><a href=\"#命令作用于部分文件\" class=\"headerlink\" title=\"命令作用于部分文件\"></a>命令作用于部分文件</h1><p><code>git reset</code>和<code>git checkout</code>还可以作用于一个文件，或者部分文件，即带文件路径执行。这种情况下，两个命令的表现不太一样。我们来试试看，先执行<code>git reset 14ad15 -- file.txt</code>命令尝试将文件恢复到V2版本。命令执行完成，按照惯例用一些基础命令来看看发生了什么：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">4521405 (HEAD -&gt; master) v3</span><br><span class=\"line\">14ad152 v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -v</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">diff --git a/file.txt b/file.txt</span><br><span class=\"line\">index 29ef827..8c1384d 100644</span><br><span class=\"line\">--- a/file.txt</span><br><span class=\"line\">+++ b/file.txt</span><br><span class=\"line\">@@ -1 +1 @@</span><br><span class=\"line\">-v3</span><br><span class=\"line\">+v2</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，版本库和工作区的数据都没有发生变化。唯一发生变化的是暂存区，暂存区记录下一次提交的改动将导致数据从V3恢复到V2版本!<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-d9199360f0dbe0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里我们可以这样理解：执行这条命令后，Git先将暂存区和工作区的文件版本恢复到V2，再将工作区的文件版本恢复到V3。与<code>--hard</code>不一样的地方是：这个命令并不会覆盖工作区已经修改的文件，是安全操作。</p>\n<p>执行带路径的<code>git checkout</code>命令和<code>git reset</code>命令有一些细微的差别，相对于<code>git reset</code>，<code>git checkout</code>带路径执行会覆盖工作区已经修改的内容，导致数据丢失，是一个非安全操作。</p>\n<p>针对上面的所有实验，我们用一个简单的表格来总结他们的区别，以及操作是否安全：</p>\n<h4 id=\"不带路径执行\"><a href=\"#不带路径执行\" class=\"headerlink\" title=\"不带路径执行\"></a>不带路径执行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令行</th>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n<th style=\"text-align:center\">目录安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git reset [–mixed]</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git reset –soft</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git reset –hard</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout</td>\n<td style=\"text-align:center\">Modify</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"带路径执行\"><a href=\"#带路径执行\" class=\"headerlink\" title=\"带路径执行\"></a>带路径执行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令行</th>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n<th style=\"text-align:center\">目录安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git reset –</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：执行非目录安全的命令操作的时候，一定要慎重，除非你非常清楚自己在做什么！</strong></p>\n<p>“小明，你明白了吗？” 消息发送过去之后，等了很久却一直没有响应。<br>“哎，这孩子！估计听睡着了… 😆”</p>\n<p>自从这次问到Git的问题后，已经两年过去了，小明再没有问到关于Git的问题。而就在昨天，突然又收到了小明的消息。</p>\n<h1 id=\"也许你应该试试Git-Flow\"><a href=\"#也许你应该试试Git-Flow\" class=\"headerlink\" title=\"也许你应该试试Git Flow\"></a>也许你应该试试Git Flow</h1><p>“锋哥，我现在已经是Android Leader了。现在安卓团队一共6个人，我们现在在做一个社交类应用，在Git管理方面我还是发现了一些问题。其中一个问题就是，现在版本库有好多分支，其中开发主要在develop分支。主干分支是master主要用于版本发布。可还有一些分支却显得非常混乱，有什么办法改善这种情况吗？”</p>\n<p>“关于Git的分支设计，目前有一个公认比较好的设计叫 <a href=\"https://github.com/nvie/gitflow\" target=\"_blank\" rel=\"noopener\">Git Flow模型</a>。关于Git Flow模型，你可以查看这篇文章 <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">http://nvie.com/posts/a-successful-git-branching-model/</a> 了解一下”</p>\n<h1 id=\"一个idea，一次提交\"><a href=\"#一个idea，一次提交\" class=\"headerlink\" title=\"一个idea，一次提交\"></a>一个idea，一次提交</h1><p>“好的！还有一个困扰了我很久的问题是，大家的提交日志写的比较笼统。在查找问题的时候非常不便，而且大部分同学一次性提交好多文件，导致解决问题的时候不能准确定位到具体是哪一次提交导致的。我告诉大家，一次提交改动要尽可能小。但当别人问到具体的提交规则的时候我又不知道从何说起…”</p>\n<p>“这是一个很好的问题 。中国程序员普遍存在的一个问题是，恨不得把这辈子能提交的代码一次性搞定。甚至有人用多次提交太麻烦的借口来搪塞问责人。简单来说，可以用一句话概括提交原则：一个idea，一次提交。另外，你说的没错，提交必须尽可能小，注释必须尽可能表述准确！”</p>\n<p>给小明讲了这么多Git，我忍不住半开玩笑地问他，“小明，你现在还觉得Git简单吗？”</p>\n<p>小明发了一个无奈的表情！说道，“以前是我才疏学浅，略知皮毛，不知道Git原来还有这么多玩法，忍不住为Git的发明者点赞了。对了，锋哥，Git到底是谁开发的？”</p>\n<h2 id=\"Git的最大功臣，其实不是Linus\"><a href=\"#Git的最大功臣，其实不是Linus\" class=\"headerlink\" title=\"Git的最大功臣，其实不是Linus\"></a>Git的最大功臣，其实不是Linus</h2><p>”关于Git的故事，互联网上其实已经烂大街了。我简单给你介绍一下吧！Git的诞生其实是一个偶然，其初始使命是为Linux内核代码管理服务的。早年的时候Linux内核源码是用Bitkeeper版本控制工具管理的。可是，后来因为某些利益关系，Bitkeeper要求Linux社区付费使用。这一举动激怒了Linus，也就是Linux的创始人，他决定自己开发一个分布式版本控制系统。几周时间下来，Git的雏形就诞生了，并且开始在Linux社区中应用开来。虽然Linus是Git的创始人，可是背后的最大功臣却是一个日本人 <a href=\"https://en.wikipedia.org/wiki/Junio_Hamano\" target=\"_blank\" rel=\"noopener\">Junio C Hamano</a>。Linus在Git开源版本库的提交只有258次，而Junio C Hamano却提交了4000多次。也就是说，在Linus开发后不久项目的管理权就交给了这个日本人。关于 <a href=\"https://en.wikipedia.org/wiki/Junio_Hamano\" target=\"_blank\" rel=\"noopener\">Junio C Hamano</a>，你感兴趣的话可以Google了解一下。他现在在Google工作，如同Linus一样非常低调。“</p>\n<p>“这个故事也告诉我：不要用技术去挑战一个程序员 @_@ ”</p>\n<p>这个故事讲完，小明与Git的故事就已经告一段落了。其实，还有一些比较常见的问题，小明并没有问到过。这里，我为你准备了一个附录，给你介绍一些常用的小命令帮你解决日常小问题。它很有用，一定要拿笔记下来，或者收藏这篇文章备用。</p>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><p><strong>问题一：公司的Git服务器是搭建在一个内网服务器上面的，我想把代码同时提交到OsChina上面，以便在家拉取代码，远程办公，怎么办？</strong><br>Git本身是一个分布式的版本管理系统，实现这个需求非常简单，使用<code>git remote add</code>命令添加多个远程版本库关联即可。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add company git@xxx</span><br><span class=\"line\">git remote add home git@xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>问题二：在拉取远程代码的时候，如果本地有代码还没有提交，Git就会提示先提交代码到版本库。可暂时我又不想提交，怎么办？</strong><br>针对这个问题，Git提供了一个临时区域用于保存不想提交的记录，对应的命令是<code>git stash</code>。通常情况下，你可以这样操作：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将暂时还不想提交的数据保存到临时区域，保存成功后，工作区将和版本库完全一致</span><br><span class=\"line\">git stash</span><br><span class=\"line\"># 还原stash数据到工作区</span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"># 以上操作完成后，stash数据依然保存在临时区域中，为了删除这部分数据，使用如下命令即可。</span><br><span class=\"line\">git stash drop</span><br><span class=\"line\"># 如果你想在还原数据的同时从临时区域删除数据，可以这样操作：</span><br><span class=\"line\">git statsh pop</span><br><span class=\"line\"># 以上两个命令如果不接任何参数将删除掉所有的临时区域数据，如果你只想删除其中一条记录，指定对应索引数据即可。</span><br><span class=\"line\">git stash pop/drop stash@&#123;index&#125;</span><br><span class=\"line\"># 查看临时区域所有数据，使用如下命令：</span><br><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure></p>\n<p><strong>问题三：作为项目负责人，我希望迅速找出问题代码的“元凶”，有什么办法吗？</strong><br>针对这个问题，最好的答案是<code>git blame</code>，使用这个命令并指定具体文件它将显示文件每一行代码的最近修改记录，你可以清晰地看到最近代码的修改人。</p>\n<p><strong>问题四：部分Team Leader会要求使用<code>git rebase</code>合并代码，这有什么好处吗？</strong><br>我们用一个简单的思维来理解这个问题，最常见的合并操作是使用<code>git merge</code>，而这样操作会在合并分支生成一次新的提交，并且会严格记录分支提交日志，在长期开发过程中，日志就会呈现多条线路展示，给阅读带来一定的障碍。而使用<code>git rebase</code>会使整体代码提交记录始终像在单一分支开发一样，仅使用一条线路展示。但使用<code>git rebase</code>是有一定陷阱的，这个问题需要一定的时间才能说清楚，如果需要了解两个命令的详细区别，我推荐你阅读这篇文章 <a href=\"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/rebase\" target=\"_blank\" rel=\"noopener\">Rebase 代替合并</a>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git是一个非常优秀的版本控制系统，我极力推荐你在日常开发中使用。这篇文章从小明的角度解释了几个常见问题的解决方案，毫无悬念地，你可能还会遇到其它的一些问题。遇到问题，你可以尝试使用Google搜索解决方案；也可以在文章下方给我留言，我非常乐意为你解答Git问题。</p>\n<hr>\n<p>我是欧阳锋，版本控制，我使用Git。了解欧阳锋，从这里开始：<a href=\"http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/\" target=\"_blank\" rel=\"noopener\">欧阳锋档案馆</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“锋哥，Git有什么可说的，不就是<code>git add</code>添加，<code>git commit</code>提交嘛”  听说我要写一篇Git教程，小明不屑一顾地说。<br>“…”。</p>\n<p>小明是我的一个学生。目前，是一名Android开发工程师。</p>\n<p>过了几天，我又再次见到了小明。</p>\n<p>“锋哥，今天，我在Github新建了一个版本库，本地提交后推送远程的时候，却被拒绝了，是怎么回事？”</p>\n<p>以下是小明的操作记录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Init commit&quot;</span><br><span class=\"line\">git remote add origin git@github.com:xiaoming/xxx.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>以上操作触发了下面的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From git@github.com:xiaoming/xxx.git</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"> * [new branch]      master     -&gt; origin/master</span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure></p>\n<p>“小明，注意看最后一句提示。翻译成中文的意思是 ‘拒绝合并不相关的历史’，这个问题有两个方案可以处理。”</p>\n<ul>\n<li><p><code>git pull</code>命令其实是触发了拉取<code>git fetch</code>和合并<code>git merge</code>两个操作。而本地的版本库和远程版本库在第一次拉取或推送完成之前是毫不相关的，Git为了避免不必要的合并，默认不允许进行这样的操作。但你可以手动添加<code>--allow-unrelated-histories</code>强制进行合并，这是方案一。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再来看方案二，从你上面的操作来看，你只是在本地初始化了一个版本库，并完成了基础的提交。接下来，你希望和远程版本库建立关联，将提交推送到远程。这种情况下，其实你可能并不需要远程的默认数据（通常是一个空的README文件）。所以，你可以添加<code>-f</code>参数，将提交强制提交并覆盖远程版本库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>小明若有所思地点点头，这是小明第一次遇到Git问题。我想，接下来他应该会比较顺利了。</p>\n<p>没想到，过了几天，我又收到了小明的消息。这一次，他发来的是对Git的抱怨。</p>\n<p>“锋哥，Git好讨厌，提交日志出现了错误，也不能修改。你知道搜狗输入法有时候不够智能，输入太快不小心就输错了…😓” </p>\n<p>“🙂，你这孩子，别轻易下结论哈。其实，Git是允许修改提交记录的。使用Git最舒服的一点就是：Git永远都会给你反悔的机会。这一点，其它的版本控制工具是做不到的！”</p>\n<p>“哦，原来是这样啊！那快说说看，要怎么做？” 小明已经一副迫不及待的表情了。</p>\n<p>“<code>git commit</code>命令中有一个参数叫<code>--amend</code>就是为解决这个问题而生的。因此，如果是最近的提交，你只需要按照下面的命令操作即可。”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend -m &quot;这是新的提交日志&quot;</span><br></pre></td></tr></table></figure>\n<p>看完我的消息，小明给我发来一个微笑的表情。小明的抱怨让我想起一句好气又好笑的农村俗语 “屙屎不出怪茅坑”，哈哈。</p>\n<p>本以为一切可以风平浪静了。没想到，过了一个月左右，突然接到了小明的紧急电话。电话那头，小明似乎心情很急躁。</p>\n<p>“锋哥，我不小心进行了还原操作，我写的代码全丢了。几千行的代码啊，明天晚上就要发版本了，有办法找回来吗？”</p>\n<p>听到这个消息，我心里盘算，大约有50%的概率应该是找不回来了。这孩子比较粗心，可能根本就没提交到版本库。但如果他正好提交到了版本库，兴许还有救。因此，我安慰他说 “小明，别急！你打开TeamViewer，我远程帮你看看”</p>\n<p>连上机器后，我使用<code>history</code>命令看到小明在提交之后使用了<code>git reset --hard xxx</code>命令进行重置。<code>--hard</code>是<code>git reset</code>命令中唯一一个不安全的操作，它会真正地销毁数据，以至于你在<code>git log</code>中完全看不到操作日志。可是，Git真的很聪明，它还保存了另外一份日志叫<code>reflog</code>，这个日志记录了你每次修改HEAD的操作。因此，你可以通过下面的命令对数据进行还原：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用这个命令，你看到的日志大概是这样</span><br><span class=\"line\">c8278f9 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to c8278f9914a91e3aca6ab0993b48073ba1e41b2b</span><br><span class=\"line\">3e59423 HEAD@&#123;1&#125;: commit: a</span><br><span class=\"line\">c8278f9 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (amend): v2 update</span><br><span class=\"line\">2dc167b HEAD@&#123;3&#125;: commit: v2</span><br><span class=\"line\">2e342e9 HEAD@&#123;4&#125;: commit (initial): Init commit</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，我们在版本<code>3e59423</code>进行了<code>git reset</code>操作，最新版本是<code>3e59423</code>。因此，我们可以再次通过<code>git reset</code>命令回到这个版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 3e59423</span><br></pre></td></tr></table></figure></p>\n<p>以上操作完成后，你会惊喜地发现，丢失的数据居然神奇般地回来了。</p>\n<p>“🌺 🌺 🌺”</p>\n<p>“下次别这样操作了哈。另外，你怎么一次性丢失这么多代码。一定要记得勤提交。” 小明出现这样的问题，与平时的不规范操作也是分不开的。因此，最后我还不忘嘱咐了他一句。</p>\n<p>“好的，我知道了。对了，我一个还有比较疑惑的问题。<code>git checkout</code>和<code>git reset</code>到底有啥区别？我以前用SVN的时候<code>git checkout</code>是用来检出代码的，在Git中可以用它切换分支或者指定版本，但<code>git reset</code>同样可以做到。难道两者是完全一样的吗？” 小明在QQ中给我发来了回复消息。</p>\n<p>“这是一个比较有深度的问题，解释这个问题需要一点时间。接下来，你仔细听”</p>\n<h2 id=\"理解Git工作空间\"><a href=\"#理解Git工作空间\" class=\"headerlink\" title=\"理解Git工作空间\"></a>理解Git工作空间</h2><p>理解这个问题之前，先来简单学习一些Git基础知识。Git有三种状态：</p>\n<ul>\n<li>已提交（commited）：数据已完全保存到本地数据库中</li>\n<li>已修改（modified）：修改了文件，但还没有保存到数据库中</li>\n<li>已暂存（staged)：对一个已修改的文件做了标记，将包含在下一次提交的版本快照中</li>\n</ul>\n<p>这三种状态对应Git三个工作区域：Git版本库、暂存区和工作区<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-6459c27004beb536.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>Git版本库是Git用来保存项目的元数据和对象数据库的地方，使用<code>git clone</code>命令时拷贝的就是这里的数据。</p>\n<p>工作目录是对某个版本独立检出的内容，这些数据可以供你使用和修改。</p>\n<p>暂存区在Git内部对应一个名为index的文件，它保存了下次将要提交的文件列表信息。因此，暂存区有时候也被叫作 “索引”。</p>\n<p>一个基础的Git工作流程如下：<br>1）在工作区修改文件<br>2）使用<code>git add</code>将文件添加到暂存区，也就是记录到<code>index</code>文件中<br>3）使用<code>git commit</code>将暂存区中记录的文件列表，使用快照永久地保存到Git版本库中</p>\n<h2 id=\"理解HEAD\"><a href=\"#理解HEAD\" class=\"headerlink\" title=\"理解HEAD\"></a>理解HEAD</h2><p>解释这个问题，你还需要简单理解HEAD是什么。简单来说，HEAD是当前分支引用的指针，它永远指向该分支上最后一次提交。为了让你更容易理解HEAD，你可以将HEAD看作上一次提交数据的快照。</p>\n<p>如果你感兴趣，你可以使用一个底层命令来查看当前HEAD的快照信息:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">100644 blob aca4b576b7d4534266cb818ab1191d91887508b9\tdemo/src/main/java/com/youngfeng/snake/demo/Constant.java</span><br><span class=\"line\">100644 blob b8691ec87867b180e6ffc8dd5a7e85747698630d\tdemo/src/main/java/com/youngfeng/snake/demo/SnakeApplication.java</span><br><span class=\"line\">100644 blob 9a70557b761171ca196196a7c94a26ebbec89bb1\tdemo/src/main/java/com/youngfeng/snake/demo/activities/FirstActivity.java</span><br><span class=\"line\">100644 blob fab8d2f5cb65129df09185c5bd210d20484154ce\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SecondActivity.java</span><br><span class=\"line\">100644 blob a7509233ecd8fe6c646f8585f756c74842ef0216\tdemo/src/main/java/com/youngfeng/snake/demo/activities/SplashActivity.java</span><br></pre></td></tr></table></figure></p>\n<p>这里简单解释一下每个字段的意思：100644表示文件模式，其对应一个普通文件。blob表示Git内部存储对象数据类型，另外还有一种数据类型tree，对应一个树对象，中间较长的字符串对应当前文件的SHA-1值，这部分不需要记住，简单了解即可。</p>\n<p>所以，简单来说，HEAD对应一个树形结构，存储了当前分支所有的Git对象快照：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-639a489c0930506a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>我们用一个表格简单来总结一下以上知识点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">Index(暂存区)</th>\n<th style=\"text-align:center\">工作区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">上一次提交的快照，下一次提交的父节点</td>\n<td style=\"text-align:center\">预期的下一次提交快照</td>\n<td style=\"text-align:center\">当前正在操作的沙盒目录</td>\n</tr>\n</tbody>\n</table>\n<p>理解<code>git reset</code>和<code>git checkout</code>区别主要是理解Git内部是怎么操作以上三棵树的。</p>\n<p>接下来，我们用一个简单的例子来看一下使用<code>git reset</code>到底发生了什么。先创建一个Git版本库并触发三次提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init repo</span><br><span class=\"line\">touch file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo v2 &gt; file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo v3 &gt; file.txt</span><br><span class=\"line\">git add file.txt</span><br><span class=\"line\">git commit -m &quot;v3&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上操作完成后，版本库现在看起来是这样的：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-553e3fc8b81023c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>接下来执行命令<code>git reset 14ad152</code>看看会发生什么。以下是命令执行完成后看到的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\"> M file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>可以看到版本库中文件版本回退到了V2，工作区文件内容同之前的版本V3一致；为了确认暂存区发生了什么变化，我们再使用一个底层命令对比一下暂存区数据和版本库数据是否一致：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看暂存区信息</span><br><span class=\"line\">git ls-files -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 8c1384d825dbbe41309b7dc18ee7991a9085c46e 0\tfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本库快照信息</span><br><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt</span><br></pre></td></tr></table></figure></p>\n<p>可以看到当前版本库和暂存区信息是完全一致的，HEAD指向了v2提交，用一个图形来表示整个过程，应该是这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-5d21495a27e774c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>看一眼上图，理解一下刚刚发生的事情：首先，HEAD指针发生了移动，指向了V2，并撤销了上一次提交。目前，版本库和暂存区都保存的是第二次提交的记录，工作区却保存了最近一次修改。稍微联想一下，你就会发现，这次的<code>git reset</code>命令恰好是最近一次提交的逆向操作。让数据完全回到了上一次提交前的状态。所以，如果你想撤销最近一次提交，可以这么做。</p>\n<h4 id=\"增加–soft参数测试\"><a href=\"#增加–soft参数测试\" class=\"headerlink\" title=\"增加–soft参数测试\"></a>增加–soft参数测试</h4><p>以上是我们对<code>git reset</code>命令的第一次尝试，在下一轮尝试前，先执行<code>git help reset</code>看看<code>reset</code>命令的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;...</span><br><span class=\"line\">git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;...]</span><br><span class=\"line\">git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>看最后一句发现，<code>reset</code>命令后面还可以接5个不同的参数: <code>--soft</code>、<code>--mixed</code>、<code>--hard</code> 、<code>--merge</code>、<code>--keep</code>。这里我们主要关注前面三个，其中<code>--mixed</code>其实刚刚已经尝试过，它和不带参数的<code>git reset</code>命令是同样的效果。换而言之，<code>--mixed</code>是<code>git reset</code>命令的默认行为。接下来执行<code>git reset --soft 14ad152</code>看看会发生什么。命令执行完成后，按照惯例，我们同样使用基础命令看看发生了什么变化：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">M  file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>奇怪了？为什么会和上次不带任何参数的执行结果完全一致？难道Git出现了设计错误。相信你看到结果一定会有这样的疑问，其实不然！因为，这里我用文本粘贴了输出结果，忽略了命令的字体颜色，其实这里第二条命令输出结果中的M颜色与上一次执行结果是不一样的。为了让你看到不同，看下面的截图：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-c76ba02b7fb8b5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这个颜色表示：file.txt文件已经被添加到了暂存区，使用<code>git commit</code>命令就可以完成提交。为了严谨，我们依然使用上面的底层命令看看版本库和暂存区信息是否一致。注意：这里的结果应该是不一致才对，因为版本库记录的文件版本是v2，而暂存区记录的文件版本其实是v3。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r HEAD</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 blob 8c1384d825dbbe41309b7dc18ee7991a9085c46e\tfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\">git ls-files -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">100644 29ef827e8a45b1039d908884aae4490157bcb2b4 0\tfile.txt</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，两个命令执行输出的SHA-1并不一致，验证了我们的猜想。</p>\n<p>这里我们可以得出一个结论：<code>--soft</code>和默认行为(<code>--mixed</code>)不一样的地方是：<code>--soft</code>会将工作区的最新文件版本再做一步操作，添加到暂存区。使用这个命令可以用来合并提交。即：如果你在某一次提交中有未完成的工作，而你反悔了，你可以使用这个命令撤销提交，等工作做完后继续一次性完成提交。</p>\n<h4 id=\"增加–hard参数测试\"><a href=\"#增加–hard参数测试\" class=\"headerlink\" title=\"增加–hard参数测试\"></a>增加–hard参数测试</h4><p>接下来我们对最后一个参数进行测试，这也是小明在使用过程出现问题的一个参数。执行命令<code>git reset --hard 14ad152</code>，看看发生了什么：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">&gt;&gt;&gt; No output &lt;&lt;&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v2</span><br></pre></td></tr></table></figure></p>\n<p>注意看，这次使用<code>git status -s</code>完全看不到输出，这就证明：当前工作区，暂存区，版本库数据是完全一致的。查看文件内容，发现文件回到了v2版本。通常情况下，如果你看到这种情况，一定会吓一跳，你最近一次提交的数据居然完全丢失了。的确，这是Git命令中少有的几个真正销毁数据的命令之一。除非你非常清楚地知道自己在做什么，否则，请尽量不要使用这个命令！</p>\n<p>我们依然用一张图，完整地描述这个命令到底发什么了什么：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-dea7f52471f35ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到，相对于默认行为，<code>--hard</code>将工作区的数据也还原到了V2版本，以至于V3版本的提交已经完全丢失。</p>\n<h1 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h1><p>接下来看<code>git checkout</code>,  按照惯例，先执行<code>git checkout 14ad152</code>看看会发生什么：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">14ad152 (HEAD -&gt; master) v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -s</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">&gt;&gt;&gt; No output &lt;&lt;&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v2</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，又出现了神奇的一幕，这一次<code>git checkout</code>命令的执行结果的确和<code>git reset --hard</code>完全一致。这是否意味着两者就没有任何区别了呢？当然也不是。严格来说，两者有两个“本质”的区别：</p>\n<ul>\n<li>相对而言，<code>git checkout</code>对工作目录是安全的，它不会将工作区已经修改的文件还原，<code>git reset</code>则不管三七二十一一股脑全部还原。</li>\n<li>另外一个比较重要的区别是，<code>git checkout</code>并不移动HEAD分支的指向，它是通过直接修改HEAD引用来完成指针的指向。</li>\n</ul>\n<p>第二个不同点相对比较难理解，我们用一张图来更直观地展示二者的区别：<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-c0e4b18961fe668f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>简单来说，<code>git reset</code>会通过移动指针来完成HEAD的指向，而<code>git checkout</code>则通过直接修改HEAD本身来完成指向的移动。</p>\n<h1 id=\"命令作用于部分文件\"><a href=\"#命令作用于部分文件\" class=\"headerlink\" title=\"命令作用于部分文件\"></a>命令作用于部分文件</h1><p><code>git reset</code>和<code>git checkout</code>还可以作用于一个文件，或者部分文件，即带文件路径执行。这种情况下，两个命令的表现不太一样。我们来试试看，先执行<code>git reset 14ad15 -- file.txt</code>命令尝试将文件恢复到V2版本。命令执行完成，按照惯例用一些基础命令来看看发生了什么：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --abbrev-commit --pretty=oneline</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">4521405 (HEAD -&gt; master) v3</span><br><span class=\"line\">14ad152 v2</span><br><span class=\"line\">bcc49f4 v1</span><br><span class=\"line\"></span><br><span class=\"line\">git status -v</span><br><span class=\"line\">### This is output ###</span><br><span class=\"line\">diff --git a/file.txt b/file.txt</span><br><span class=\"line\">index 29ef827..8c1384d 100644</span><br><span class=\"line\">--- a/file.txt</span><br><span class=\"line\">+++ b/file.txt</span><br><span class=\"line\">@@ -1 +1 @@</span><br><span class=\"line\">-v3</span><br><span class=\"line\">+v2</span><br><span class=\"line\"></span><br><span class=\"line\">cat file.txt</span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，版本库和工作区的数据都没有发生变化。唯一发生变化的是暂存区，暂存区记录下一次提交的改动将导致数据从V3恢复到V2版本!<br><img src=\"http://upload-images.jianshu.io/upload_images/703764-d9199360f0dbe0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里我们可以这样理解：执行这条命令后，Git先将暂存区和工作区的文件版本恢复到V2，再将工作区的文件版本恢复到V3。与<code>--hard</code>不一样的地方是：这个命令并不会覆盖工作区已经修改的文件，是安全操作。</p>\n<p>执行带路径的<code>git checkout</code>命令和<code>git reset</code>命令有一些细微的差别，相对于<code>git reset</code>，<code>git checkout</code>带路径执行会覆盖工作区已经修改的内容，导致数据丢失，是一个非安全操作。</p>\n<p>针对上面的所有实验，我们用一个简单的表格来总结他们的区别，以及操作是否安全：</p>\n<h4 id=\"不带路径执行\"><a href=\"#不带路径执行\" class=\"headerlink\" title=\"不带路径执行\"></a>不带路径执行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令行</th>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n<th style=\"text-align:center\">目录安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git reset [–mixed]</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git reset –soft</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git reset –hard</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout</td>\n<td style=\"text-align:center\">Modify</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"带路径执行\"><a href=\"#带路径执行\" class=\"headerlink\" title=\"带路径执行\"></a>带路径执行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令行</th>\n<th style=\"text-align:center\">HEAD</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n<th style=\"text-align:center\">目录安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git reset –</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">YES</td>\n<td style=\"text-align:center\">NO</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：执行非目录安全的命令操作的时候，一定要慎重，除非你非常清楚自己在做什么！</strong></p>\n<p>“小明，你明白了吗？” 消息发送过去之后，等了很久却一直没有响应。<br>“哎，这孩子！估计听睡着了… 😆”</p>\n<p>自从这次问到Git的问题后，已经两年过去了，小明再没有问到关于Git的问题。而就在昨天，突然又收到了小明的消息。</p>\n<h1 id=\"也许你应该试试Git-Flow\"><a href=\"#也许你应该试试Git-Flow\" class=\"headerlink\" title=\"也许你应该试试Git Flow\"></a>也许你应该试试Git Flow</h1><p>“锋哥，我现在已经是Android Leader了。现在安卓团队一共6个人，我们现在在做一个社交类应用，在Git管理方面我还是发现了一些问题。其中一个问题就是，现在版本库有好多分支，其中开发主要在develop分支。主干分支是master主要用于版本发布。可还有一些分支却显得非常混乱，有什么办法改善这种情况吗？”</p>\n<p>“关于Git的分支设计，目前有一个公认比较好的设计叫 <a href=\"https://github.com/nvie/gitflow\" target=\"_blank\" rel=\"noopener\">Git Flow模型</a>。关于Git Flow模型，你可以查看这篇文章 <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">http://nvie.com/posts/a-successful-git-branching-model/</a> 了解一下”</p>\n<h1 id=\"一个idea，一次提交\"><a href=\"#一个idea，一次提交\" class=\"headerlink\" title=\"一个idea，一次提交\"></a>一个idea，一次提交</h1><p>“好的！还有一个困扰了我很久的问题是，大家的提交日志写的比较笼统。在查找问题的时候非常不便，而且大部分同学一次性提交好多文件，导致解决问题的时候不能准确定位到具体是哪一次提交导致的。我告诉大家，一次提交改动要尽可能小。但当别人问到具体的提交规则的时候我又不知道从何说起…”</p>\n<p>“这是一个很好的问题 。中国程序员普遍存在的一个问题是，恨不得把这辈子能提交的代码一次性搞定。甚至有人用多次提交太麻烦的借口来搪塞问责人。简单来说，可以用一句话概括提交原则：一个idea，一次提交。另外，你说的没错，提交必须尽可能小，注释必须尽可能表述准确！”</p>\n<p>给小明讲了这么多Git，我忍不住半开玩笑地问他，“小明，你现在还觉得Git简单吗？”</p>\n<p>小明发了一个无奈的表情！说道，“以前是我才疏学浅，略知皮毛，不知道Git原来还有这么多玩法，忍不住为Git的发明者点赞了。对了，锋哥，Git到底是谁开发的？”</p>\n<h2 id=\"Git的最大功臣，其实不是Linus\"><a href=\"#Git的最大功臣，其实不是Linus\" class=\"headerlink\" title=\"Git的最大功臣，其实不是Linus\"></a>Git的最大功臣，其实不是Linus</h2><p>”关于Git的故事，互联网上其实已经烂大街了。我简单给你介绍一下吧！Git的诞生其实是一个偶然，其初始使命是为Linux内核代码管理服务的。早年的时候Linux内核源码是用Bitkeeper版本控制工具管理的。可是，后来因为某些利益关系，Bitkeeper要求Linux社区付费使用。这一举动激怒了Linus，也就是Linux的创始人，他决定自己开发一个分布式版本控制系统。几周时间下来，Git的雏形就诞生了，并且开始在Linux社区中应用开来。虽然Linus是Git的创始人，可是背后的最大功臣却是一个日本人 <a href=\"https://en.wikipedia.org/wiki/Junio_Hamano\" target=\"_blank\" rel=\"noopener\">Junio C Hamano</a>。Linus在Git开源版本库的提交只有258次，而Junio C Hamano却提交了4000多次。也就是说，在Linus开发后不久项目的管理权就交给了这个日本人。关于 <a href=\"https://en.wikipedia.org/wiki/Junio_Hamano\" target=\"_blank\" rel=\"noopener\">Junio C Hamano</a>，你感兴趣的话可以Google了解一下。他现在在Google工作，如同Linus一样非常低调。“</p>\n<p>“这个故事也告诉我：不要用技术去挑战一个程序员 @_@ ”</p>\n<p>这个故事讲完，小明与Git的故事就已经告一段落了。其实，还有一些比较常见的问题，小明并没有问到过。这里，我为你准备了一个附录，给你介绍一些常用的小命令帮你解决日常小问题。它很有用，一定要拿笔记下来，或者收藏这篇文章备用。</p>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><p><strong>问题一：公司的Git服务器是搭建在一个内网服务器上面的，我想把代码同时提交到OsChina上面，以便在家拉取代码，远程办公，怎么办？</strong><br>Git本身是一个分布式的版本管理系统，实现这个需求非常简单，使用<code>git remote add</code>命令添加多个远程版本库关联即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add company git@xxx</span><br><span class=\"line\">git remote add home git@xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>问题二：在拉取远程代码的时候，如果本地有代码还没有提交，Git就会提示先提交代码到版本库。可暂时我又不想提交，怎么办？</strong><br>针对这个问题，Git提供了一个临时区域用于保存不想提交的记录，对应的命令是<code>git stash</code>。通常情况下，你可以这样操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将暂时还不想提交的数据保存到临时区域，保存成功后，工作区将和版本库完全一致</span><br><span class=\"line\">git stash</span><br><span class=\"line\"># 还原stash数据到工作区</span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"># 以上操作完成后，stash数据依然保存在临时区域中，为了删除这部分数据，使用如下命令即可。</span><br><span class=\"line\">git stash drop</span><br><span class=\"line\"># 如果你想在还原数据的同时从临时区域删除数据，可以这样操作：</span><br><span class=\"line\">git statsh pop</span><br><span class=\"line\"># 以上两个命令如果不接任何参数将删除掉所有的临时区域数据，如果你只想删除其中一条记录，指定对应索引数据即可。</span><br><span class=\"line\">git stash pop/drop stash@&#123;index&#125;</span><br><span class=\"line\"># 查看临时区域所有数据，使用如下命令：</span><br><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure></p>\n<p><strong>问题三：作为项目负责人，我希望迅速找出问题代码的“元凶”，有什么办法吗？</strong><br>针对这个问题，最好的答案是<code>git blame</code>，使用这个命令并指定具体文件它将显示文件每一行代码的最近修改记录，你可以清晰地看到最近代码的修改人。</p>\n<p><strong>问题四：部分Team Leader会要求使用<code>git rebase</code>合并代码，这有什么好处吗？</strong><br>我们用一个简单的思维来理解这个问题，最常见的合并操作是使用<code>git merge</code>，而这样操作会在合并分支生成一次新的提交，并且会严格记录分支提交日志，在长期开发过程中，日志就会呈现多条线路展示，给阅读带来一定的障碍。而使用<code>git rebase</code>会使整体代码提交记录始终像在单一分支开发一样，仅使用一条线路展示。但使用<code>git rebase</code>是有一定陷阱的，这个问题需要一定的时间才能说清楚，如果需要了解两个命令的详细区别，我推荐你阅读这篇文章 <a href=\"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/rebase\" target=\"_blank\" rel=\"noopener\">Rebase 代替合并</a>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git是一个非常优秀的版本控制系统，我极力推荐你在日常开发中使用。这篇文章从小明的角度解释了几个常见问题的解决方案，毫无悬念地，你可能还会遇到其它的一些问题。遇到问题，你可以尝试使用Google搜索解决方案；也可以在文章下方给我留言，我非常乐意为你解答Git问题。</p>\n<hr>\n<p>我是欧阳锋，版本控制，我使用Git。了解欧阳锋，从这里开始：<a href=\"http://www.youngfeng.com/2018/02/28/about%20ouyangfeng/%E6%AC%A7%E9%98%B3%E9%94%8B%E6%A1%A3%E6%A1%88%E9%A6%86/\" target=\"_blank\" rel=\"noopener\">欧阳锋档案馆</a>。</p>\n"},{"title":"技术相对论之软件架构","date":"2018-03-19T14:13:00.000Z","comments":1,"_content":"\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-5db8da4fcacbc730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>有同学问我，你是怎样学习编程的呢？为了回答你的这个问题，今天，我们一起来做一件非常有意思的事情。我们以[MVC](https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&fromid=85990)架构为基，从服务端编程开始，依次类推iOS、Android，并最终完成登录、注册功能。\n\n## What is MVC ？\n正文开始之前，我们先来简单了解一下MVC架构。\n\nMVC全称是Model-View-Controller，是上个世纪80年底[Xerox PARC](https://baike.baidu.com/item/Xerox%20PARC)为其编程语言SmallTalk发明的一直软件设计模式。我们可以用一张图来表示MVC架构模型：\n![](https://upload-images.jianshu.io/upload_images/703764-7d67880a273efe49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nMVC的核心思想是希望通过控制层管理视图呈现，从将逻辑层和视图层进行分离。\n\n服务端编程其实就是MVC的最佳实践，理解了MVC架构之后，我们马上开始服务端编程。\n\n## 服务端编程\n服务端编程也叫后端编程，主要用于为前端提供数据源以及完成必要的业务逻辑处理。\n\n这个部分我们使用Java语言开发，MVC框架使用最常用的 [Spring MVC](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#spring-web)，完整配置请参考下方表格：\n\nIDE|编程语言|框架|数据库|服务器\n:---:|:---:|:---:|:---:|:---:\nIntelliJ IDEA|Java 1.8|Spring MVC|MySQL|Tomcat 7.0.57\n\n为了简化数据库的访问，我们再增加一个轻量级的数据库访问框架 [MyBatis](https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin)。\n\n这里假设你已经正确安装了MySQL数据库和Tomcat服务器，如果你对具体的安装步骤有疑问，请在文章下方评论告诉我。\n\n在开始编程之前，我们需要完成以下准备工作：\n#### 第一步：创建数据库d_user以及用户表t_user用于保存用户数据\n\n```\ncreate database d_server;\nuse d_server;\nCREATE TABLE `t_user` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `username` varchar(20) NOT NULL,\n  `pwd` varchar(32) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `username` (`username`)\n)\n```\n\n#### 第二步：使用IntelliJ IDE创建一个Gradle依赖工程\n![](https://upload-images.jianshu.io/upload_images/703764-ae0d24bbbe86dfc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-587a2fa067aa755e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-44c52a25c8312669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后一个步骤选择工作目录确定即可。\n\n#### 第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖\n\n```\ncompile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.4.RELEASE'\ncompile group: 'org.mybatis', name: 'mybatis', version: '3.4.6'\n```\n\n#### 第四步：关联本地Tomcat服务器\na）编辑运行设置，选择本地Tomcat服务器\n![](https://upload-images.jianshu.io/upload_images/703764-eae80e8a4aaeecbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-ef76202829b3858a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nb）选择以war包的方式部署到Tomcat\n![](https://upload-images.jianshu.io/upload_images/703764-0f086367e866edf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nc）在浏览器中输入[http://localhost:8080](http://localhost:8080)测试工作是否正常\n![](https://upload-images.jianshu.io/upload_images/703764-1fc056188c7b5f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果看到下面这个界面，证明一切工作正常\n![](https://upload-images.jianshu.io/upload_images/703764-1ae45edff27cc030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 第五步：配置Spring MVC\n备注：参考官方文档 [Web on Servlet Stack](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html)\n\na）在webapp目录下面生成WEB-INF/web.xml配置文件\n选择菜单File->Project Structure进入如下界面：\n![](https://upload-images.jianshu.io/upload_images/703764-31704ef71bb60539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在弹出的界面中设置路径为.../webapp/WEB-INF即可。\n\nb）在web.xml文件中添加如下配置信息\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/app-context.xml</param-value>\n    </context-param>\n\n    <servlet>\n        <servlet-name>/</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value></param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>/</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n上面这部分配置主要是使用Spring MVC的DispatcherServlet完成请求的拦截分发。配置文件中引用了另外一个配置文件app-context.xml，这个配置文件主要是完成Spring的依赖注入。\n\nc）在app-context.xml配置文件中添加如下信息\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n  \n   <!-- 添加扫描注解的包 -->\n    <context:component-scan base-package=\"com.youngfeng.server\"/>\n    \n   <!-- 使用注解完成依赖注入 -->\n    <mvc:annotation-driven />\n\n</beans>\n```\n\nd）添加jackson依赖用于Spring实现Json自动解析\n\n```\ncompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'\ncompile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3'\n```\n\nPS：不得不承认，Java后端开发的xml文件配置实在是一件繁琐至极的事情，尽管我们只需要配置一次。为了简化配置，Spring官方推出了一个重磅产品 [Spring Boot](https://projects.spring.io/spring-boot/)。不过，这不是本文讨论的重点，感兴趣的同学请自行了解。\n\n虽然我们已经完成了Spring的配置，但MyBatis的配置工作才刚刚开始。\n### 配置MyBatis\n为了简化Spring中MyBatis的配置，我们再增加一个MyBatis官方的提供的 [mybatis-spring](http://www.mybatis.org/spring/zh/getting-started.html) 库。\n\n```\ncompile group: 'org.mybatis', name: 'mybatis-spring', version: '1.3.2'\n```\n\n备注：参考官方文档 [mybatis-spring](http://www.mybatis.org/spring/zh/getting-started.html)\n\na）在spring配置文件app-context.xml配置文件中添加如下bean配置:\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n```\n\nb）指定数据源\n\nb1) 添加Spring JDBC与MySQL Connector依赖\n\n```\ncompile group: 'org.springframework', name: 'spring-jdbc', version: '5.0.4.RELEASE'\ncompile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'\n```\n\n注意：因为部分依赖包只存在于JCenter，需要在build.gradle脚本中添加jcenter maven源\n\n```\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n```\n\nb2）在app-context.xml文件中添加如下配置：\n\n```\n    <context:property-placeholder location=\"classpath:db.properties\"/>\n    \n    <bean id=\"dataSource\"\n          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"driverClassName\">\n            <value>${jdbc.driverClassName}</value>\n        </property>\n        <property name=\"url\">\n            <value>${jdbc.url}</value>\n        </property>\n        <property name=\"username\">\n            <value>${jdbc.username}</value>\n        </property>\n        <property name=\"password\">\n            <value>${jdbc.password}</value>\n        </property>\n    </bean>\n```\n\nb3）在类路径目录下创建db.properties文件指定MySQL数据库信息\n\n```\njdbc.driverClassName = com.mysql.jdbc.Driver\njdbc.url = jdbc:mysql://localhost:3306/d_server\njdbc.username = root\njdbc.password = root\n```\n\n至此，所有的配置工作终于完成了，接下来进入最重要的编码阶段。\n\n由于控制层需要依赖模型层的代码，因此，我们按照从下往上的原则进行编码。\na）先完成数据库的访问部分（DAO）\n\n```\npublic interface UserDAO {\n    @Select(\"select * from t_user where username = #{username}\")\n    User findByUsername(@Param(\"username\") String username);\n\n    @Select(\"select * from t_user where username = #{username} and pwd = #{pwd}\")\n    User findUser(@Param(\"username\") String username, @Param(\"pwd\") String pwd);\n\n    @Insert(\"insert into t_user(username, pwd) values(#{username}, #{pwd})\")\n    void insert(@Param(\"username\") String username, @Param(\"pwd\") String pwd);\n}\n```\n\n结合MyBatis，这个部分的工作很简单，甚至DAO的实现都不需要手动编码。\n\n为了实现DAO的依赖注入，我们在app-context.xml配置文件中添加如下配置：\n\n```\n<bean id=\"userDAO\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n     <property name=\"mapperInterface\" value=\"com.youngfeng.server.dao.UserDAO\"/>\n     <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/>\n</bean>\n```\n\nb）Service层编码（也叫Domain层）\nService部分是控制层直接调用的接口，从抽象思维来说，也应该使用面向接口的方式编码。这里为了简化，Service部分我们直接使用一个类来实现了。\n\n```\n@Component(\"userService\")\npublic class UserService {\n    @Autowired\n    UserDAO userDAO;\n\n    public boolean isExist(String username) {\n        return null != userDAO.findByUsername(username);\n    }\n\n    public boolean isExist(String username, String pwd) {\n        return null != userDAO.findUser(username, pwd);\n    }\n\n    public void saveUser(String username, String pwd) {\n        this.userDAO.insert(username, pwd);\n    }\n}\n```\n\nc）控制层编码\n\n```\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    UserService userService;\n\n    @ResponseBody\n    @GetMapping(\"/login\")\n    public Response login(@RequestParam(\"username\") String username, @RequestParam(\"pwd\") String pwd) {\n        Response response = new Response();\n  \n        // 先判断用户名是否存在，给定不同Code用于区分不同错误\n        boolean isExist = userService.isExist(username);\n        if(!isExist) {\n            response.setCode(Response.CODE_USER_NOT_EXIST);\n            response.setMsg(\"用户不存在或密码错误\");\n        }\n      \n        // 判断用户名和密码是否匹配\n        isExist = userService.isExist(username, pwd);\n\n        if(!isExist) {\n            response.setCode(Response.CODE_USER_PWD_ERR);\n            response.setMsg(\"用户不存在或密码错误\");\n        }\n\n        return response;\n    }\n\n    @ResponseBody\n    @GetMapping(\"/register\")\n    public Response register(@RequestParam(\"username\") String username, @RequestParam(\"pwd\") String pwd) {\n        Response response = new Response();\n       \n        // 注册之前，判断用户名是否已存在\n        boolean isExist = userService.isExist(username);\n        if(isExist) {\n           response.setCode(Response.CODE_USER_HAS_EXIST);\n           response.setMsg(\"用户名已存在\");\n        } else {\n            userService.saveUser(username, pwd);\n        }\n\n        return response;\n    }\n\n}\n```\n\n想必大家应该已经注意到了，控制层部分请求类型我使用了GET，这是为了方便在浏览器上面测试。测试通过后，要修改为POST请求类型。\n\n以上代码，我已经在浏览器上测试通过。接下来，我们马上进入iOS客户端编程。\n\n## iOS客户端编程\niOS部分开发工具我们使用Xcode 9.2，其实你也可以使用AppCode，这是基于IntelliJ IDE开发的一款IDE，使用习惯完全接近IntelliJ IDE。\n\n为了防止部分同学对Swift语言不熟悉，我们使用最常见的编程语言OC。\n\n完整配置请参考如下表格：\n\nIDE|编程语言|网络框架\n:---:|:---:|:---:\nXcode 9.2|Objective C|[AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\n打开Xcode，依次选择Create new Xcode Project->Single View App\n\n下一步填入如下信息，语言选择OC\n![](https://upload-images.jianshu.io/upload_images/703764-f6a1ff84a9e9cf73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 第一步：完成UI部分\n这一部分参考苹果官方文档，按照苹果官方推荐，我们使用Storyboard进行布局。由于我们只是完成一个简单的Demo，所有的页面将在同一个Storyboard中完成。实际开发过程中，要根据功能划分Storyboard，方便进行小组开发。\n\n![](https://upload-images.jianshu.io/upload_images/703764-8056508c93505be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n使用约束布局我们很快完成了UI的构建，接下来进入最重要的编码阶段。约束布局的意思就是为一个控件添加N个约束，使其固定在某个位置。这个部分只要稍加尝试，就能掌握。具体的使用方法，请参考官方文档。\n\n#### 第二步：创建控制器，并关联UI\n从服务器编程类推，iOS编程模型中应该也有一个叫Controller的东西。果不其然，在iOS新创建的工程中就有一个叫做ViewController的类，其父类是UIViewController。没错，这就是传说中的控制器。\n\n```\n#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController\n\n\n@end\n```\n\n完成登录、注册功能，我们至少需要三个控制器：LoginViewController、RegisterViewController、MainViewController，分别代表登录、注册、首页三个页面。\n\n接下来，将控制器与UI进行关联。\n\nUI关联控制器部分，如果你不知道，请先参考苹果官方文档。\n\n事实上，Xcode的Interface Builder非常好用。按照下图操作即可：\n![](https://upload-images.jianshu.io/upload_images/703764-f2291caac92d81d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后，关联按钮点击事件以及输入框。\n\n选中控件并按住鼠标右键拖拽到控制器源码中，松开，并选择相应类型即可：\n![](https://upload-images.jianshu.io/upload_images/703764-56c073cdf8d97c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以登录控制器为例，拖拽完成后的源码如下：\n\n```\n@interface LoginViewController ()\n@property (weak, nonatomic) IBOutlet UITextField *mUsernameTextField;\n@property (weak, nonatomic) IBOutlet UITextField *mPwdTextField;\n\n@end\n\n@implementation LoginViewController\n\n- (IBAction)login:(id)sender {\n}\n\n- (IBAction)goToRegister:(id)sender {\n}\n```\n\n接下来进入网络部分编程。\n\n为了简化网络部分编程，我们引入AFNetworking框架。还记得服务端编程是怎么引入依赖的吗？没错，是Gradle。iOS端也有类似的依赖管理工具[Cocoapods](https://cocoapods.org/)，这个部分如果不会依然请你参考官方文档。\n\n使用如下步骤安装依赖（这里假设你已经正确安装了Cocoapod）：\na）在根目录下面创建Podfile文件，并添加如下内容：\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\n\ntarget 'IOSClient' do\npod 'AFNetworking', '~> 3.0'\nend\n```\n\nb）安装依赖\n\n```\npod install\n```\n\nPS：可能有人会问，为什么服务端编程没有安装依赖的步骤。其实，很简单，intelliJ IDE非常智能，它自动检测了build.gradle文件的修改。一旦发现修改，自动安装依赖。因此，看起来就像没有依赖安装这个步骤一样。事实上，Cocoapod并非苹果官方的产品，如果产品来自苹果官方，恐怕Xcode也会支持自动安装依赖。\n\n依赖安装完成后，为了更好地服务我们的业务。我们对网络请求做一点简单封装，增加HttpClient类，仅提供一个POST请求接口即可。\n\n```\n//\n//  HttpClient.m\n//  IOSClient\n//\n//  Created by 欧阳锋 on 17/03/2018.\n//  Copyright © 2018 xbdx. All rights reserved.\n//\n\n#import \"HttpClient.h\"\n#import <AFNetworking.h>\n#import \"Response.h\"\n\n@implementation HttpClient\n\nstatic const NSString *BASE_URL = @\"http://192.168.31.146:8080\";\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.baseUrl = BASE_URL;\n    }\n    return self;\n}\n\n+ (HttpClient *)initWithBaseUrl:(NSString *)baseUrl {\n    HttpClient *client = [[HttpClient alloc] init];\n    client.baseUrl = baseUrl;\n    \n    return client;\n}\n\n+ (HttpClient *)sharedInstance {\n    static HttpClient *client = nil;\n    static dispatch_once_t once;\n    dispatch_once(&once, ^{\n        client = [[self alloc] init];\n    });\n    return client;\n}\n\n- (void)POST:(NSString *)url params:(NSDictionary *)params success:(void (^)(NSString *, id))success error:(void (^)(NSString *, NSInteger, NSInteger, NSString *))error {\n    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n    manager.responseSerializer = [AFJSONResponseSerializer serializer];\n    [[AFHTTPSessionManager manager] POST: [_baseUrl stringByAppendingString:url]\n                              parameters: params\n                                progress: nil\n                                 success: ^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n                                     if(nil != success) {\n                                         if(nil != responseObject) {\n                                             if([responseObject isKindOfClass: [NSDictionary class]]) {\n                                                 NSInteger code = ((NSDictionary *)responseObject)[@\"code\"];\n                                                 \n                                                 if(SUCCESS == code) {\n                                                     success(url, responseObject);\n                                                 } else {\n                                                     if(nil != error) {\n                                                         NSString *msg = ((NSDictionary *)responseObject)[@\"msg\"];\n                                                         error(url, SC_OK, code, msg);\n                                                     }\n                                                 }\n                                             }\n                                         }\n                                     }\n                                 }\n                                 failure: ^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull nsError) {\n                                     if(nil != nsError) {\n                                         error(url, nsError.code, nil, nsError.description);\n                                     }\n                                 }];\n    \n}\n\n@end\n```\n\n为了简化JSON解析，我们增加一个最常见的Json解析库 [jsonmodel](https://github.com/jsonmodel/jsonmodel) 库。等待对话框也使用最常见的第三方库 [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)。\n\n```\npod 'JSONModel'\npod 'SVProgressHUD'\n```\n\n安装依赖使用同样的命令pod install即可。\n\n接下来，我们添加登录注册逻辑，完成最后部分编码：\n\n```\n// 登录部分逻辑\n- (IBAction)login:(id)sender {\n    [SVProgressHUD show];\n    HttpClient *client = [HttpClient sharedInstance];\n    [client POST: @\"/user/login\"\n          params: @{@\"username\" : _mUsernameTextField.text, @\"pwd\" : _mPwdTextField.text}\n         success:^(NSString *url, id data) {\n             [SVProgressHUD dismiss];\n             \n             if([data isKindOfClass: [NSDictionary class]]) {\n                 // 例子代码，这里不做严格判断了\n                 User *user = [[User alloc] initWithDictionary: data[@\"data\"] error: nil];\n                 [self pushToMainViewController: user];\n             }\n         } error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) {\n             [SVProgressHUD dismiss];\n             \n             [self promptError: error];\n         }];\n}\n\n- (void)pushToMainViewController: (User *) user {\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName: @\"Main\" bundle: [NSBundle mainBundle]];\n    MainViewController *mainViewController = [storyboard instantiateViewControllerWithIdentifier: @\"mainViewController\"];\n    mainViewController.user = user;\n    [self.navigationController presentViewController: mainViewController animated: YES completion: nil];\n}\n\n// 注册部分逻辑\n- (IBAction)register:(id)sender {\n    NSString *username = _mUsernameTextField.text;\n    NSString *pwd = _mPwdTextField.text;\n    NSString *confrimPwd = _mConfirmTextField.text;\n    \n    if([StringUtil isBlankString: username]) {\n        [self promptError: @\"请输入用户名\"];\n        return;\n    }\n    \n    if([StringUtil isBlankString: pwd]) {\n        [self promptError: @\"请输入用户密码\"];\n        return;\n    }\n    \n    if([StringUtil isBlankString: confrimPwd]) {\n        [self promptError: @\"请输入确认密码\"];\n        return;\n    }\n    \n    if(![pwd isEqualToString: confrimPwd]) {\n        [self promptError: @\"两次密码输入不一致，请重新输入\"];\n        return;\n    }\n    \n    HttpClient *client = [HttpClient sharedInstance];\n    [client POST: @\"/user/register\" params: @{@\"username\" : username, @\"pwd\" : pwd} success:^(NSString *url, id data) {\n        [self promptError: @\"注册成功\" handler:^(UIAlertAction *action) {\n            [self.navigationController popViewControllerAnimated: YES];\n        }];\n    } error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) {\n        [self promptError: error];\n    }];\n}\n```\n\n通过上面的步骤，我们已经完成了iOS客户端的开发。苹果官方默认支持的就是经典的MVC模式。因此，我们完全参考服务端开发模式完成了iOS客户端的开发。你唯一需要克服的是对新语言的恐惧，以及适应UI开发的节奏。事实上，大部分服务端程序员都害怕UI编程。\n\n最后，我们进入Android客户端编程。\n\n## Android客户端编程\nAndroid部分开发工具，我们使用Android Studio，网络框架使用[Retrofit](https://github.com/square/retrofit)，完整配置参考下方表格：\n\nIDE|编程语言|网络框架\n:---:|:---:|:---:\nAndroid Studio|Java 1.8|Retrofit\n\n打开Android Studio，选择Start a new Android Studio Project，在打开的页面中填入以下信息：\n![](https://upload-images.jianshu.io/upload_images/703764-b77a95d69f27f1ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n剩下步骤全部选择默认。\n\n按照iOS编码部分类推，Android端应该也有一个类似UIViewController的控制器。果不其然，在模板工程中就有一个MainActivity，其父类是AppCompatActivity，这就是Android的控制器。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\nPS：事实上Android早期版本的控制器就叫Activity，由于系统设计不断变更，最终诞生了兼容性子类AppCompatActivity。这都是早期设计不够严谨，导致的问题。相对而言，iOS端的设计就靠谱了许多。\n\n同样地，在开始编码之前，我们加入所需的第三方依赖。那么，问题来了。Android端如何添加依赖呢？\n\n碰巧，Android端主要的开发语言就是Java。因此，我们依然可以使用Gradle进行依赖管理。碰巧，Android Studio默认支持的就是使用Gradle进行依赖管理。\n\n首先，在app模块目录的build.gradle添加 [Retrofit](https://github.com/square/retrofit) 依赖：\n\n```\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\n```\n\n添加完成后，点击文件右上方Sync now下载依赖：\n![](https://upload-images.jianshu.io/upload_images/703764-07a786274c95d9c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n相对于AFNetworking，Retrofit设计的更加精妙。参考Retrofit官方文档，我们开始加入登录注册逻辑：\n\n```\npublic interface UserService {\n    \n    @FormUrlEncoded\n    @POST(\"user/login\")\n    Call<User> login(@Field(\"username\") String username, @Field(\"pwd\") String pwd);\n\n    @FormUrlEncoded\n    @POST(\"user/register\")\n    Call<User> register(@Field(\"username\") String username, @Field(\"pwd\") String pwd);\n}\n```\n\nRetrofit设计的其中一个巧妙之处在于：你只需要定义好接口，具体的实现交给Retrofit。你可以看到，上面的代码中我们仅仅定义了请求的类型，以及请求所需要的参数就已经完成了网络部分的所有工作。\n\n不过，操作这个接口实现，需要使用Retrofit实例。接下来，我们参考官方文档生成一个我们需要的Retrofit实例。\n\n在生成Retrofit实例之前，还需要注意一个事情。还记得iOS端我们是怎么完成JSON解析的吗？是的，我们使用了第三方库jsonmodel。\n\n在Json解析的设计上，Retrofit也相当巧妙。Retrofit提供了一个转换适配器用于实现Json数据的自动转换。使用它，你可以自定义自己的Json转换适配器；也可以使用官方已经实现好的适配器。一旦添加了这个适配器，所有的Json解析工作Retrofit就会自动帮忙完成。不再需要像AFNetworking一样在回调里面反复进行Json解析操作。\n\n因此，我们增加一个官方版本的Json转换适配器依赖 converter-json：\n\n```\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\n```\n\n加入Json适配器之后，我们使用一个新的Retrofit管理类RetrofitManager用于生成项目所需要的Retrofit实例。完整代码如下：\n\n```\npublic class RetrofitManager {\n    private static final String BASE_URL = \"http://192.168.31.146:8080\";\n\n    public static Retrofit create(String baseUrl) {\n        return new Retrofit.Builder()\n                          .baseUrl(baseUrl)\n                          .addConverterFactory(GsonConverterFactory.create())\n                          .build();\n    }\n    \n    public static Retrofit createDefault() {\n        return create(BASE_URL);\n    }\n}\n```\n\n接下来，我们尝试在MainActivity中测试登录接口，确定是否编写正确。我们在MainActivity的onCreate方法中加入如下代码：\n\n```\nRetrofit retrofit = RetrofitManager.createDefault();\n\nUserService userService = retrofit.create(UserService.class);\nCall < User > call = userService.login(\"1\", \"1\");\ncall.enqueue(new Callback < User > () {\n  \n    @Override \n    public void onResponse(Call < User > call, Response < User > response) {\n        Log.e(\"MainActivity\", call + \"\" + response);\n    }\n\n    @Override \n    public void onFailure(Call < User > call, Throwable t) {\n        Log.e(\"MainActivity\", call + \"\" + t);\n    }\n});\n```\n\n打开模拟器，运行，你将看到以下错误：\n\n```\n03-18 04:03:24.546 7277-7277/com.youngfeng.androidclient D/NetworkSecurityConfig: No Network Security Config specified, using platform default\n03-18 04:03:24.574 7277-7277/com.youngfeng.androidclient W/System.err: java.net.SocketException: Permission denied\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.createImpl(Socket.java:454)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.getImpl(Socket.java:517)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.setSoTimeout(Socket.java:1108)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:238)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:160)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n```\n\n提示我们权限被拒绝，这是和iOS平台不一样的地方。如果你的应用需要使用网络，你需要在清单文件中手动指定使用网络权限。为此，我们在AndroidManifest.xml文件中添加如下配置：\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n再次运行，一切正常。\n\n注意：这里的service部分和服务端的service不一样，它只是Retrofit用于将网络接口分模块处理的一种手段，不要混淆。\n\n上面说到，Android里面的AppCompatActivity就是MVC中的控制器，接下来我们就完成最重要的控制器以及UI部分编码。\n\na）创建LoginActivity以及布局文件activity_login.xml，在其onCreate方法中使用setContentView接口进行关联。\n\nb）UI编程\n你相信吗？一旦你学会了一门新的技术，你的技能就会Double。\n\niOS UI部分我们使用了约束布局的方式完成了整体布局，Android是否也可以使用约束布局呢？答案是：当然可以。\n\n事实上，Android官方也推荐使用这种布局方式进行页面布局。\n\n切换到可视化布局模式，我们依然使用拖拽UI的方式完成整个布局，完整代码请参考文章最后的附录部分：\n![](https://upload-images.jianshu.io/upload_images/703764-583b7db343adee31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nPS：目前，Android端的约束布局相对iOS逊色不少，希望后面官方能够提供更多功能支持。\n\n按照同样的方式完成注册页面和首页布局，UI部分开发完成后，尝试跳转到指定控制器。你会发现，出错了。这也是和iOS不一样的地方，Android端四大组件必须在清单文件中注册。具体是什么原因，请自行思考，这不是本文研究的重点。\n\n因此，我们首先在清单文件中对所有控制器进行注册：\n\n```\n    <activity android:name=\".login.LoginActivity\"\n            android:screenOrientation=\"portrait\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n        <activity android:name=\".MainActivity\"\n            android:screenOrientation=\"portrait\"/>\n\n        <activity android:name=\".register.RegisterActivity\"\n            android:screenOrientation=\"portrait\"/>\n```\n\n然后，以登录为例，我们在控制器中完善登录逻辑：\n\n```\npublic class LoginActivity extends BaseActivity {\n    private EditText mUsernameEdit;\n    private EditText mPwdEdit;\n    private Button mLoginBtn;\n    private Button mRegisterBtn;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        mUsernameEdit = findViewById(R.id.edit_username);\n        mPwdEdit = findViewById(R.id.edit_pwd);\n        mLoginBtn = findViewById(R.id.btn_login);\n        mRegisterBtn = findViewById(R.id.btn_register);\n\n        mLoginBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                login(mUsernameEdit.getText().toString(), mPwdEdit.getText().toString());\n            }\n        });\n\n        mRegisterBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);\n                startActivity(intent);\n            }\n        });\n    }\n\n    private void login(String username, String pwd) {\n        Retrofit retrofit = RetrofitManager.createDefault();\n        UserService userService = retrofit.create(UserService.class);\n        Call<HttpResponse<User>> call = userService.login(username, pwd);\n\n        showLoading(true);\n        call.enqueue(new Callback<HttpResponse<User>>() {\n            @Override\n            public void onResponse(Call<HttpResponse<User>> call, Response<HttpResponse<User>> response) {\n                showLoading(false);\n\n                // 例子代码，暂时忽略空值判断\n                if(HttpResponse.CODE_SUCCESS != response.body().getCode()) {\n                    promptError(response.body().getMsg() + \"\");\n                } else {\n                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);\n                    intent.putExtra(MainActivity.KEY_USER, response.body().getData());\n                    startActivity(intent);\n                    finish();\n                }\n            }\n\n            @Override\n            public void onFailure(Call<HttpResponse<User>> call, Throwable t) {\n                showLoading(false);\n\n                promptError(t.getMessage() + \"\");\n            }\n        });\n    }\n}\n```\n\n至此，按照iOS的开发模式，我们完成了Android客户端的开发。与iOS不同的地方是，Android端控制器必须在清单文件中注册。程序员不能主动创建Activity，只能间接使用intent进行通信。而对于布局，两者都可以使用约束管理的方式完成。从这个角度来说，Android端和iOS端开发切换的难度还是比较低的。\n\n## 距离全栈还差最后一步\n至此，我们已经完成了文章开头定下的目标。以MVC架构为基础，完成了服务端、iOS客户端、Android客户端编码。\n\n然而，很多同学希望成为一个全栈工程师。按照现在的主流开发分支来说，成为一个全栈工程师，你还需要掌握Web前端开发。那么，问题来了，Web前端开发是否也是使用MVC架构呢？\n\n事实上，如果你使用 [Angular](https://github.com/angular/angular)，你应该早就习惯了MVC。而如果你偏爱React，你恐怕会搭配Redux，使用这种响应式的数据流框架编码。如果你使用Vue，你恐怕也会选择MVC或者MVVM架构。\n\n如果你选择使用MVC，你依然可以按照类推的方式来学习。由于文章篇幅的原因，这部分就不予展示了。\n\n## 编后说\n这篇文章我们以MVC为架构，从服务端编程开始，使用类推的方式依次完成了iOS客户端、Android客户端的开发。\n\n有人可能会说，文章中的例子太简单，没有实际意义。事实上，在学习一门新技术的时候，就要从最基础的部分出发，建立对这门技术的最初印象。很多同学容易一开始就陷入细节当中无法自拔，产生的最直观的结果就是对新技术产生恐惧。因此，你常常可以看到一个程序员面对新东西骂娘，无怪乎。\n\n其实，如果你慢慢进入到细节编程中，你会发现技术之间越来越多的相似性。这个时候你的积极性就会越来越高，编码也会更加得心应手。\n\n我在学习一门新技术的时候，都是先从相似性开始。然后，再去攻克不同的部分。从不同的部分中去提炼相同的思想，这样在面对不同问题的时候，我始终可以使用同样的思想去解决。\n\n当然，我想，你应该会说。虽然克服了框架问题，可是不同的编程语言千差万别。我们无法从一门语言快速过渡到另外一门语言，这在学习新技术的时候才是最大的拦路虎。\n\n你说的很对，这恰好是下一个我想和你分享的问题。\n\n**扫描下方二维码，关注欧阳锋工作室，回复“相对论”抢先阅读相对论系列下一篇文章《技术相对论之编程语言》。**\n\n## 附录\n本篇例子完整代码：[https://github.com/yuanhoujun/it-theory-of-relativity](https://github.com/yuanhoujun/it-theory-of-relativity)\nIntelliJ IDEA下载地址：[https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\nTomcat下载地址：[http://tomcat.apache.org/](http://tomcat.apache.org/)\niOS开发者官网：[https://developer.apple.com/](https://developer.apple.com/)\nAndroid开发者官网：[https://developer.android.com/index.html](https://developer.android.com/index.html)","source":"_posts/comprehensive article/技术相对论之软件架构.md","raw":"title: 技术相对论之软件架构\ndate: 2018/3/19 22:13\ncomments: true\ntags:\n- 相对论\n- 编程\ncategories:\n- 随文杂记\n---\n\n![文 | 欧阳锋](http://upload-images.jianshu.io/upload_images/703764-5db8da4fcacbc730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>有同学问我，你是怎样学习编程的呢？为了回答你的这个问题，今天，我们一起来做一件非常有意思的事情。我们以[MVC](https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&fromid=85990)架构为基，从服务端编程开始，依次类推iOS、Android，并最终完成登录、注册功能。\n\n## What is MVC ？\n正文开始之前，我们先来简单了解一下MVC架构。\n\nMVC全称是Model-View-Controller，是上个世纪80年底[Xerox PARC](https://baike.baidu.com/item/Xerox%20PARC)为其编程语言SmallTalk发明的一直软件设计模式。我们可以用一张图来表示MVC架构模型：\n![](https://upload-images.jianshu.io/upload_images/703764-7d67880a273efe49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nMVC的核心思想是希望通过控制层管理视图呈现，从将逻辑层和视图层进行分离。\n\n服务端编程其实就是MVC的最佳实践，理解了MVC架构之后，我们马上开始服务端编程。\n\n## 服务端编程\n服务端编程也叫后端编程，主要用于为前端提供数据源以及完成必要的业务逻辑处理。\n\n这个部分我们使用Java语言开发，MVC框架使用最常用的 [Spring MVC](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#spring-web)，完整配置请参考下方表格：\n\nIDE|编程语言|框架|数据库|服务器\n:---:|:---:|:---:|:---:|:---:\nIntelliJ IDEA|Java 1.8|Spring MVC|MySQL|Tomcat 7.0.57\n\n为了简化数据库的访问，我们再增加一个轻量级的数据库访问框架 [MyBatis](https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin)。\n\n这里假设你已经正确安装了MySQL数据库和Tomcat服务器，如果你对具体的安装步骤有疑问，请在文章下方评论告诉我。\n\n在开始编程之前，我们需要完成以下准备工作：\n#### 第一步：创建数据库d_user以及用户表t_user用于保存用户数据\n\n```\ncreate database d_server;\nuse d_server;\nCREATE TABLE `t_user` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `username` varchar(20) NOT NULL,\n  `pwd` varchar(32) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `username` (`username`)\n)\n```\n\n#### 第二步：使用IntelliJ IDE创建一个Gradle依赖工程\n![](https://upload-images.jianshu.io/upload_images/703764-ae0d24bbbe86dfc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-587a2fa067aa755e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-44c52a25c8312669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后一个步骤选择工作目录确定即可。\n\n#### 第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖\n\n```\ncompile group: 'org.springframework', name: 'spring-webmvc', version: '5.0.4.RELEASE'\ncompile group: 'org.mybatis', name: 'mybatis', version: '3.4.6'\n```\n\n#### 第四步：关联本地Tomcat服务器\na）编辑运行设置，选择本地Tomcat服务器\n![](https://upload-images.jianshu.io/upload_images/703764-eae80e8a4aaeecbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/703764-ef76202829b3858a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nb）选择以war包的方式部署到Tomcat\n![](https://upload-images.jianshu.io/upload_images/703764-0f086367e866edf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nc）在浏览器中输入[http://localhost:8080](http://localhost:8080)测试工作是否正常\n![](https://upload-images.jianshu.io/upload_images/703764-1fc056188c7b5f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果看到下面这个界面，证明一切工作正常\n![](https://upload-images.jianshu.io/upload_images/703764-1ae45edff27cc030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 第五步：配置Spring MVC\n备注：参考官方文档 [Web on Servlet Stack](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html)\n\na）在webapp目录下面生成WEB-INF/web.xml配置文件\n选择菜单File->Project Structure进入如下界面：\n![](https://upload-images.jianshu.io/upload_images/703764-31704ef71bb60539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在弹出的界面中设置路径为.../webapp/WEB-INF即可。\n\nb）在web.xml文件中添加如下配置信息\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/app-context.xml</param-value>\n    </context-param>\n\n    <servlet>\n        <servlet-name>/</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value></param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>/</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n上面这部分配置主要是使用Spring MVC的DispatcherServlet完成请求的拦截分发。配置文件中引用了另外一个配置文件app-context.xml，这个配置文件主要是完成Spring的依赖注入。\n\nc）在app-context.xml配置文件中添加如下信息\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n  \n   <!-- 添加扫描注解的包 -->\n    <context:component-scan base-package=\"com.youngfeng.server\"/>\n    \n   <!-- 使用注解完成依赖注入 -->\n    <mvc:annotation-driven />\n\n</beans>\n```\n\nd）添加jackson依赖用于Spring实现Json自动解析\n\n```\ncompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'\ncompile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3'\n```\n\nPS：不得不承认，Java后端开发的xml文件配置实在是一件繁琐至极的事情，尽管我们只需要配置一次。为了简化配置，Spring官方推出了一个重磅产品 [Spring Boot](https://projects.spring.io/spring-boot/)。不过，这不是本文讨论的重点，感兴趣的同学请自行了解。\n\n虽然我们已经完成了Spring的配置，但MyBatis的配置工作才刚刚开始。\n### 配置MyBatis\n为了简化Spring中MyBatis的配置，我们再增加一个MyBatis官方的提供的 [mybatis-spring](http://www.mybatis.org/spring/zh/getting-started.html) 库。\n\n```\ncompile group: 'org.mybatis', name: 'mybatis-spring', version: '1.3.2'\n```\n\n备注：参考官方文档 [mybatis-spring](http://www.mybatis.org/spring/zh/getting-started.html)\n\na）在spring配置文件app-context.xml配置文件中添加如下bean配置:\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n```\n\nb）指定数据源\n\nb1) 添加Spring JDBC与MySQL Connector依赖\n\n```\ncompile group: 'org.springframework', name: 'spring-jdbc', version: '5.0.4.RELEASE'\ncompile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'\n```\n\n注意：因为部分依赖包只存在于JCenter，需要在build.gradle脚本中添加jcenter maven源\n\n```\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n```\n\nb2）在app-context.xml文件中添加如下配置：\n\n```\n    <context:property-placeholder location=\"classpath:db.properties\"/>\n    \n    <bean id=\"dataSource\"\n          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"driverClassName\">\n            <value>${jdbc.driverClassName}</value>\n        </property>\n        <property name=\"url\">\n            <value>${jdbc.url}</value>\n        </property>\n        <property name=\"username\">\n            <value>${jdbc.username}</value>\n        </property>\n        <property name=\"password\">\n            <value>${jdbc.password}</value>\n        </property>\n    </bean>\n```\n\nb3）在类路径目录下创建db.properties文件指定MySQL数据库信息\n\n```\njdbc.driverClassName = com.mysql.jdbc.Driver\njdbc.url = jdbc:mysql://localhost:3306/d_server\njdbc.username = root\njdbc.password = root\n```\n\n至此，所有的配置工作终于完成了，接下来进入最重要的编码阶段。\n\n由于控制层需要依赖模型层的代码，因此，我们按照从下往上的原则进行编码。\na）先完成数据库的访问部分（DAO）\n\n```\npublic interface UserDAO {\n    @Select(\"select * from t_user where username = #{username}\")\n    User findByUsername(@Param(\"username\") String username);\n\n    @Select(\"select * from t_user where username = #{username} and pwd = #{pwd}\")\n    User findUser(@Param(\"username\") String username, @Param(\"pwd\") String pwd);\n\n    @Insert(\"insert into t_user(username, pwd) values(#{username}, #{pwd})\")\n    void insert(@Param(\"username\") String username, @Param(\"pwd\") String pwd);\n}\n```\n\n结合MyBatis，这个部分的工作很简单，甚至DAO的实现都不需要手动编码。\n\n为了实现DAO的依赖注入，我们在app-context.xml配置文件中添加如下配置：\n\n```\n<bean id=\"userDAO\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n     <property name=\"mapperInterface\" value=\"com.youngfeng.server.dao.UserDAO\"/>\n     <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/>\n</bean>\n```\n\nb）Service层编码（也叫Domain层）\nService部分是控制层直接调用的接口，从抽象思维来说，也应该使用面向接口的方式编码。这里为了简化，Service部分我们直接使用一个类来实现了。\n\n```\n@Component(\"userService\")\npublic class UserService {\n    @Autowired\n    UserDAO userDAO;\n\n    public boolean isExist(String username) {\n        return null != userDAO.findByUsername(username);\n    }\n\n    public boolean isExist(String username, String pwd) {\n        return null != userDAO.findUser(username, pwd);\n    }\n\n    public void saveUser(String username, String pwd) {\n        this.userDAO.insert(username, pwd);\n    }\n}\n```\n\nc）控制层编码\n\n```\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    UserService userService;\n\n    @ResponseBody\n    @GetMapping(\"/login\")\n    public Response login(@RequestParam(\"username\") String username, @RequestParam(\"pwd\") String pwd) {\n        Response response = new Response();\n  \n        // 先判断用户名是否存在，给定不同Code用于区分不同错误\n        boolean isExist = userService.isExist(username);\n        if(!isExist) {\n            response.setCode(Response.CODE_USER_NOT_EXIST);\n            response.setMsg(\"用户不存在或密码错误\");\n        }\n      \n        // 判断用户名和密码是否匹配\n        isExist = userService.isExist(username, pwd);\n\n        if(!isExist) {\n            response.setCode(Response.CODE_USER_PWD_ERR);\n            response.setMsg(\"用户不存在或密码错误\");\n        }\n\n        return response;\n    }\n\n    @ResponseBody\n    @GetMapping(\"/register\")\n    public Response register(@RequestParam(\"username\") String username, @RequestParam(\"pwd\") String pwd) {\n        Response response = new Response();\n       \n        // 注册之前，判断用户名是否已存在\n        boolean isExist = userService.isExist(username);\n        if(isExist) {\n           response.setCode(Response.CODE_USER_HAS_EXIST);\n           response.setMsg(\"用户名已存在\");\n        } else {\n            userService.saveUser(username, pwd);\n        }\n\n        return response;\n    }\n\n}\n```\n\n想必大家应该已经注意到了，控制层部分请求类型我使用了GET，这是为了方便在浏览器上面测试。测试通过后，要修改为POST请求类型。\n\n以上代码，我已经在浏览器上测试通过。接下来，我们马上进入iOS客户端编程。\n\n## iOS客户端编程\niOS部分开发工具我们使用Xcode 9.2，其实你也可以使用AppCode，这是基于IntelliJ IDE开发的一款IDE，使用习惯完全接近IntelliJ IDE。\n\n为了防止部分同学对Swift语言不熟悉，我们使用最常见的编程语言OC。\n\n完整配置请参考如下表格：\n\nIDE|编程语言|网络框架\n:---:|:---:|:---:\nXcode 9.2|Objective C|[AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\n打开Xcode，依次选择Create new Xcode Project->Single View App\n\n下一步填入如下信息，语言选择OC\n![](https://upload-images.jianshu.io/upload_images/703764-f6a1ff84a9e9cf73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 第一步：完成UI部分\n这一部分参考苹果官方文档，按照苹果官方推荐，我们使用Storyboard进行布局。由于我们只是完成一个简单的Demo，所有的页面将在同一个Storyboard中完成。实际开发过程中，要根据功能划分Storyboard，方便进行小组开发。\n\n![](https://upload-images.jianshu.io/upload_images/703764-8056508c93505be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n使用约束布局我们很快完成了UI的构建，接下来进入最重要的编码阶段。约束布局的意思就是为一个控件添加N个约束，使其固定在某个位置。这个部分只要稍加尝试，就能掌握。具体的使用方法，请参考官方文档。\n\n#### 第二步：创建控制器，并关联UI\n从服务器编程类推，iOS编程模型中应该也有一个叫Controller的东西。果不其然，在iOS新创建的工程中就有一个叫做ViewController的类，其父类是UIViewController。没错，这就是传说中的控制器。\n\n```\n#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController\n\n\n@end\n```\n\n完成登录、注册功能，我们至少需要三个控制器：LoginViewController、RegisterViewController、MainViewController，分别代表登录、注册、首页三个页面。\n\n接下来，将控制器与UI进行关联。\n\nUI关联控制器部分，如果你不知道，请先参考苹果官方文档。\n\n事实上，Xcode的Interface Builder非常好用。按照下图操作即可：\n![](https://upload-images.jianshu.io/upload_images/703764-f2291caac92d81d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后，关联按钮点击事件以及输入框。\n\n选中控件并按住鼠标右键拖拽到控制器源码中，松开，并选择相应类型即可：\n![](https://upload-images.jianshu.io/upload_images/703764-56c073cdf8d97c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以登录控制器为例，拖拽完成后的源码如下：\n\n```\n@interface LoginViewController ()\n@property (weak, nonatomic) IBOutlet UITextField *mUsernameTextField;\n@property (weak, nonatomic) IBOutlet UITextField *mPwdTextField;\n\n@end\n\n@implementation LoginViewController\n\n- (IBAction)login:(id)sender {\n}\n\n- (IBAction)goToRegister:(id)sender {\n}\n```\n\n接下来进入网络部分编程。\n\n为了简化网络部分编程，我们引入AFNetworking框架。还记得服务端编程是怎么引入依赖的吗？没错，是Gradle。iOS端也有类似的依赖管理工具[Cocoapods](https://cocoapods.org/)，这个部分如果不会依然请你参考官方文档。\n\n使用如下步骤安装依赖（这里假设你已经正确安装了Cocoapod）：\na）在根目录下面创建Podfile文件，并添加如下内容：\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\n\ntarget 'IOSClient' do\npod 'AFNetworking', '~> 3.0'\nend\n```\n\nb）安装依赖\n\n```\npod install\n```\n\nPS：可能有人会问，为什么服务端编程没有安装依赖的步骤。其实，很简单，intelliJ IDE非常智能，它自动检测了build.gradle文件的修改。一旦发现修改，自动安装依赖。因此，看起来就像没有依赖安装这个步骤一样。事实上，Cocoapod并非苹果官方的产品，如果产品来自苹果官方，恐怕Xcode也会支持自动安装依赖。\n\n依赖安装完成后，为了更好地服务我们的业务。我们对网络请求做一点简单封装，增加HttpClient类，仅提供一个POST请求接口即可。\n\n```\n//\n//  HttpClient.m\n//  IOSClient\n//\n//  Created by 欧阳锋 on 17/03/2018.\n//  Copyright © 2018 xbdx. All rights reserved.\n//\n\n#import \"HttpClient.h\"\n#import <AFNetworking.h>\n#import \"Response.h\"\n\n@implementation HttpClient\n\nstatic const NSString *BASE_URL = @\"http://192.168.31.146:8080\";\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.baseUrl = BASE_URL;\n    }\n    return self;\n}\n\n+ (HttpClient *)initWithBaseUrl:(NSString *)baseUrl {\n    HttpClient *client = [[HttpClient alloc] init];\n    client.baseUrl = baseUrl;\n    \n    return client;\n}\n\n+ (HttpClient *)sharedInstance {\n    static HttpClient *client = nil;\n    static dispatch_once_t once;\n    dispatch_once(&once, ^{\n        client = [[self alloc] init];\n    });\n    return client;\n}\n\n- (void)POST:(NSString *)url params:(NSDictionary *)params success:(void (^)(NSString *, id))success error:(void (^)(NSString *, NSInteger, NSInteger, NSString *))error {\n    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n    manager.responseSerializer = [AFJSONResponseSerializer serializer];\n    [[AFHTTPSessionManager manager] POST: [_baseUrl stringByAppendingString:url]\n                              parameters: params\n                                progress: nil\n                                 success: ^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n                                     if(nil != success) {\n                                         if(nil != responseObject) {\n                                             if([responseObject isKindOfClass: [NSDictionary class]]) {\n                                                 NSInteger code = ((NSDictionary *)responseObject)[@\"code\"];\n                                                 \n                                                 if(SUCCESS == code) {\n                                                     success(url, responseObject);\n                                                 } else {\n                                                     if(nil != error) {\n                                                         NSString *msg = ((NSDictionary *)responseObject)[@\"msg\"];\n                                                         error(url, SC_OK, code, msg);\n                                                     }\n                                                 }\n                                             }\n                                         }\n                                     }\n                                 }\n                                 failure: ^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull nsError) {\n                                     if(nil != nsError) {\n                                         error(url, nsError.code, nil, nsError.description);\n                                     }\n                                 }];\n    \n}\n\n@end\n```\n\n为了简化JSON解析，我们增加一个最常见的Json解析库 [jsonmodel](https://github.com/jsonmodel/jsonmodel) 库。等待对话框也使用最常见的第三方库 [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)。\n\n```\npod 'JSONModel'\npod 'SVProgressHUD'\n```\n\n安装依赖使用同样的命令pod install即可。\n\n接下来，我们添加登录注册逻辑，完成最后部分编码：\n\n```\n// 登录部分逻辑\n- (IBAction)login:(id)sender {\n    [SVProgressHUD show];\n    HttpClient *client = [HttpClient sharedInstance];\n    [client POST: @\"/user/login\"\n          params: @{@\"username\" : _mUsernameTextField.text, @\"pwd\" : _mPwdTextField.text}\n         success:^(NSString *url, id data) {\n             [SVProgressHUD dismiss];\n             \n             if([data isKindOfClass: [NSDictionary class]]) {\n                 // 例子代码，这里不做严格判断了\n                 User *user = [[User alloc] initWithDictionary: data[@\"data\"] error: nil];\n                 [self pushToMainViewController: user];\n             }\n         } error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) {\n             [SVProgressHUD dismiss];\n             \n             [self promptError: error];\n         }];\n}\n\n- (void)pushToMainViewController: (User *) user {\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName: @\"Main\" bundle: [NSBundle mainBundle]];\n    MainViewController *mainViewController = [storyboard instantiateViewControllerWithIdentifier: @\"mainViewController\"];\n    mainViewController.user = user;\n    [self.navigationController presentViewController: mainViewController animated: YES completion: nil];\n}\n\n// 注册部分逻辑\n- (IBAction)register:(id)sender {\n    NSString *username = _mUsernameTextField.text;\n    NSString *pwd = _mPwdTextField.text;\n    NSString *confrimPwd = _mConfirmTextField.text;\n    \n    if([StringUtil isBlankString: username]) {\n        [self promptError: @\"请输入用户名\"];\n        return;\n    }\n    \n    if([StringUtil isBlankString: pwd]) {\n        [self promptError: @\"请输入用户密码\"];\n        return;\n    }\n    \n    if([StringUtil isBlankString: confrimPwd]) {\n        [self promptError: @\"请输入确认密码\"];\n        return;\n    }\n    \n    if(![pwd isEqualToString: confrimPwd]) {\n        [self promptError: @\"两次密码输入不一致，请重新输入\"];\n        return;\n    }\n    \n    HttpClient *client = [HttpClient sharedInstance];\n    [client POST: @\"/user/register\" params: @{@\"username\" : username, @\"pwd\" : pwd} success:^(NSString *url, id data) {\n        [self promptError: @\"注册成功\" handler:^(UIAlertAction *action) {\n            [self.navigationController popViewControllerAnimated: YES];\n        }];\n    } error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) {\n        [self promptError: error];\n    }];\n}\n```\n\n通过上面的步骤，我们已经完成了iOS客户端的开发。苹果官方默认支持的就是经典的MVC模式。因此，我们完全参考服务端开发模式完成了iOS客户端的开发。你唯一需要克服的是对新语言的恐惧，以及适应UI开发的节奏。事实上，大部分服务端程序员都害怕UI编程。\n\n最后，我们进入Android客户端编程。\n\n## Android客户端编程\nAndroid部分开发工具，我们使用Android Studio，网络框架使用[Retrofit](https://github.com/square/retrofit)，完整配置参考下方表格：\n\nIDE|编程语言|网络框架\n:---:|:---:|:---:\nAndroid Studio|Java 1.8|Retrofit\n\n打开Android Studio，选择Start a new Android Studio Project，在打开的页面中填入以下信息：\n![](https://upload-images.jianshu.io/upload_images/703764-b77a95d69f27f1ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n剩下步骤全部选择默认。\n\n按照iOS编码部分类推，Android端应该也有一个类似UIViewController的控制器。果不其然，在模板工程中就有一个MainActivity，其父类是AppCompatActivity，这就是Android的控制器。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\nPS：事实上Android早期版本的控制器就叫Activity，由于系统设计不断变更，最终诞生了兼容性子类AppCompatActivity。这都是早期设计不够严谨，导致的问题。相对而言，iOS端的设计就靠谱了许多。\n\n同样地，在开始编码之前，我们加入所需的第三方依赖。那么，问题来了。Android端如何添加依赖呢？\n\n碰巧，Android端主要的开发语言就是Java。因此，我们依然可以使用Gradle进行依赖管理。碰巧，Android Studio默认支持的就是使用Gradle进行依赖管理。\n\n首先，在app模块目录的build.gradle添加 [Retrofit](https://github.com/square/retrofit) 依赖：\n\n```\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\n```\n\n添加完成后，点击文件右上方Sync now下载依赖：\n![](https://upload-images.jianshu.io/upload_images/703764-07a786274c95d9c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n相对于AFNetworking，Retrofit设计的更加精妙。参考Retrofit官方文档，我们开始加入登录注册逻辑：\n\n```\npublic interface UserService {\n    \n    @FormUrlEncoded\n    @POST(\"user/login\")\n    Call<User> login(@Field(\"username\") String username, @Field(\"pwd\") String pwd);\n\n    @FormUrlEncoded\n    @POST(\"user/register\")\n    Call<User> register(@Field(\"username\") String username, @Field(\"pwd\") String pwd);\n}\n```\n\nRetrofit设计的其中一个巧妙之处在于：你只需要定义好接口，具体的实现交给Retrofit。你可以看到，上面的代码中我们仅仅定义了请求的类型，以及请求所需要的参数就已经完成了网络部分的所有工作。\n\n不过，操作这个接口实现，需要使用Retrofit实例。接下来，我们参考官方文档生成一个我们需要的Retrofit实例。\n\n在生成Retrofit实例之前，还需要注意一个事情。还记得iOS端我们是怎么完成JSON解析的吗？是的，我们使用了第三方库jsonmodel。\n\n在Json解析的设计上，Retrofit也相当巧妙。Retrofit提供了一个转换适配器用于实现Json数据的自动转换。使用它，你可以自定义自己的Json转换适配器；也可以使用官方已经实现好的适配器。一旦添加了这个适配器，所有的Json解析工作Retrofit就会自动帮忙完成。不再需要像AFNetworking一样在回调里面反复进行Json解析操作。\n\n因此，我们增加一个官方版本的Json转换适配器依赖 converter-json：\n\n```\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\n```\n\n加入Json适配器之后，我们使用一个新的Retrofit管理类RetrofitManager用于生成项目所需要的Retrofit实例。完整代码如下：\n\n```\npublic class RetrofitManager {\n    private static final String BASE_URL = \"http://192.168.31.146:8080\";\n\n    public static Retrofit create(String baseUrl) {\n        return new Retrofit.Builder()\n                          .baseUrl(baseUrl)\n                          .addConverterFactory(GsonConverterFactory.create())\n                          .build();\n    }\n    \n    public static Retrofit createDefault() {\n        return create(BASE_URL);\n    }\n}\n```\n\n接下来，我们尝试在MainActivity中测试登录接口，确定是否编写正确。我们在MainActivity的onCreate方法中加入如下代码：\n\n```\nRetrofit retrofit = RetrofitManager.createDefault();\n\nUserService userService = retrofit.create(UserService.class);\nCall < User > call = userService.login(\"1\", \"1\");\ncall.enqueue(new Callback < User > () {\n  \n    @Override \n    public void onResponse(Call < User > call, Response < User > response) {\n        Log.e(\"MainActivity\", call + \"\" + response);\n    }\n\n    @Override \n    public void onFailure(Call < User > call, Throwable t) {\n        Log.e(\"MainActivity\", call + \"\" + t);\n    }\n});\n```\n\n打开模拟器，运行，你将看到以下错误：\n\n```\n03-18 04:03:24.546 7277-7277/com.youngfeng.androidclient D/NetworkSecurityConfig: No Network Security Config specified, using platform default\n03-18 04:03:24.574 7277-7277/com.youngfeng.androidclient W/System.err: java.net.SocketException: Permission denied\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.createImpl(Socket.java:454)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.getImpl(Socket.java:517)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.setSoTimeout(Socket.java:1108)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:238)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:160)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n```\n\n提示我们权限被拒绝，这是和iOS平台不一样的地方。如果你的应用需要使用网络，你需要在清单文件中手动指定使用网络权限。为此，我们在AndroidManifest.xml文件中添加如下配置：\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n再次运行，一切正常。\n\n注意：这里的service部分和服务端的service不一样，它只是Retrofit用于将网络接口分模块处理的一种手段，不要混淆。\n\n上面说到，Android里面的AppCompatActivity就是MVC中的控制器，接下来我们就完成最重要的控制器以及UI部分编码。\n\na）创建LoginActivity以及布局文件activity_login.xml，在其onCreate方法中使用setContentView接口进行关联。\n\nb）UI编程\n你相信吗？一旦你学会了一门新的技术，你的技能就会Double。\n\niOS UI部分我们使用了约束布局的方式完成了整体布局，Android是否也可以使用约束布局呢？答案是：当然可以。\n\n事实上，Android官方也推荐使用这种布局方式进行页面布局。\n\n切换到可视化布局模式，我们依然使用拖拽UI的方式完成整个布局，完整代码请参考文章最后的附录部分：\n![](https://upload-images.jianshu.io/upload_images/703764-583b7db343adee31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nPS：目前，Android端的约束布局相对iOS逊色不少，希望后面官方能够提供更多功能支持。\n\n按照同样的方式完成注册页面和首页布局，UI部分开发完成后，尝试跳转到指定控制器。你会发现，出错了。这也是和iOS不一样的地方，Android端四大组件必须在清单文件中注册。具体是什么原因，请自行思考，这不是本文研究的重点。\n\n因此，我们首先在清单文件中对所有控制器进行注册：\n\n```\n    <activity android:name=\".login.LoginActivity\"\n            android:screenOrientation=\"portrait\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n        <activity android:name=\".MainActivity\"\n            android:screenOrientation=\"portrait\"/>\n\n        <activity android:name=\".register.RegisterActivity\"\n            android:screenOrientation=\"portrait\"/>\n```\n\n然后，以登录为例，我们在控制器中完善登录逻辑：\n\n```\npublic class LoginActivity extends BaseActivity {\n    private EditText mUsernameEdit;\n    private EditText mPwdEdit;\n    private Button mLoginBtn;\n    private Button mRegisterBtn;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        mUsernameEdit = findViewById(R.id.edit_username);\n        mPwdEdit = findViewById(R.id.edit_pwd);\n        mLoginBtn = findViewById(R.id.btn_login);\n        mRegisterBtn = findViewById(R.id.btn_register);\n\n        mLoginBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                login(mUsernameEdit.getText().toString(), mPwdEdit.getText().toString());\n            }\n        });\n\n        mRegisterBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);\n                startActivity(intent);\n            }\n        });\n    }\n\n    private void login(String username, String pwd) {\n        Retrofit retrofit = RetrofitManager.createDefault();\n        UserService userService = retrofit.create(UserService.class);\n        Call<HttpResponse<User>> call = userService.login(username, pwd);\n\n        showLoading(true);\n        call.enqueue(new Callback<HttpResponse<User>>() {\n            @Override\n            public void onResponse(Call<HttpResponse<User>> call, Response<HttpResponse<User>> response) {\n                showLoading(false);\n\n                // 例子代码，暂时忽略空值判断\n                if(HttpResponse.CODE_SUCCESS != response.body().getCode()) {\n                    promptError(response.body().getMsg() + \"\");\n                } else {\n                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);\n                    intent.putExtra(MainActivity.KEY_USER, response.body().getData());\n                    startActivity(intent);\n                    finish();\n                }\n            }\n\n            @Override\n            public void onFailure(Call<HttpResponse<User>> call, Throwable t) {\n                showLoading(false);\n\n                promptError(t.getMessage() + \"\");\n            }\n        });\n    }\n}\n```\n\n至此，按照iOS的开发模式，我们完成了Android客户端的开发。与iOS不同的地方是，Android端控制器必须在清单文件中注册。程序员不能主动创建Activity，只能间接使用intent进行通信。而对于布局，两者都可以使用约束管理的方式完成。从这个角度来说，Android端和iOS端开发切换的难度还是比较低的。\n\n## 距离全栈还差最后一步\n至此，我们已经完成了文章开头定下的目标。以MVC架构为基础，完成了服务端、iOS客户端、Android客户端编码。\n\n然而，很多同学希望成为一个全栈工程师。按照现在的主流开发分支来说，成为一个全栈工程师，你还需要掌握Web前端开发。那么，问题来了，Web前端开发是否也是使用MVC架构呢？\n\n事实上，如果你使用 [Angular](https://github.com/angular/angular)，你应该早就习惯了MVC。而如果你偏爱React，你恐怕会搭配Redux，使用这种响应式的数据流框架编码。如果你使用Vue，你恐怕也会选择MVC或者MVVM架构。\n\n如果你选择使用MVC，你依然可以按照类推的方式来学习。由于文章篇幅的原因，这部分就不予展示了。\n\n## 编后说\n这篇文章我们以MVC为架构，从服务端编程开始，使用类推的方式依次完成了iOS客户端、Android客户端的开发。\n\n有人可能会说，文章中的例子太简单，没有实际意义。事实上，在学习一门新技术的时候，就要从最基础的部分出发，建立对这门技术的最初印象。很多同学容易一开始就陷入细节当中无法自拔，产生的最直观的结果就是对新技术产生恐惧。因此，你常常可以看到一个程序员面对新东西骂娘，无怪乎。\n\n其实，如果你慢慢进入到细节编程中，你会发现技术之间越来越多的相似性。这个时候你的积极性就会越来越高，编码也会更加得心应手。\n\n我在学习一门新技术的时候，都是先从相似性开始。然后，再去攻克不同的部分。从不同的部分中去提炼相同的思想，这样在面对不同问题的时候，我始终可以使用同样的思想去解决。\n\n当然，我想，你应该会说。虽然克服了框架问题，可是不同的编程语言千差万别。我们无法从一门语言快速过渡到另外一门语言，这在学习新技术的时候才是最大的拦路虎。\n\n你说的很对，这恰好是下一个我想和你分享的问题。\n\n**扫描下方二维码，关注欧阳锋工作室，回复“相对论”抢先阅读相对论系列下一篇文章《技术相对论之编程语言》。**\n\n## 附录\n本篇例子完整代码：[https://github.com/yuanhoujun/it-theory-of-relativity](https://github.com/yuanhoujun/it-theory-of-relativity)\nIntelliJ IDEA下载地址：[https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\nTomcat下载地址：[http://tomcat.apache.org/](http://tomcat.apache.org/)\niOS开发者官网：[https://developer.apple.com/](https://developer.apple.com/)\nAndroid开发者官网：[https://developer.android.com/index.html](https://developer.android.com/index.html)","slug":"comprehensive article/技术相对论之软件架构","published":1,"updated":"2019-04-28T12:39:23.521Z","_id":"cjv0x7ujs0066bkb4l2wrz53k","layout":"post","photos":[],"link":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-5db8da4fcacbc730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>有同学问我，你是怎样学习编程的呢？为了回答你的这个问题，今天，我们一起来做一件非常有意思的事情。我们以<a href=\"https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&amp;fromid=85990\" target=\"_blank\" rel=\"noopener\">MVC</a>架构为基，从服务端编程开始，依次类推iOS、Android，并最终完成登录、注册功能。</p>\n</blockquote>\n<h2 id=\"What-is-MVC-？\"><a href=\"#What-is-MVC-？\" class=\"headerlink\" title=\"What is MVC ？\"></a>What is MVC ？</h2><p>正文开始之前，我们先来简单了解一下MVC架构。</p>\n<p>MVC全称是Model-View-Controller，是上个世纪80年底<a href=\"https://baike.baidu.com/item/Xerox%20PARC\" target=\"_blank\" rel=\"noopener\">Xerox PARC</a>为其编程语言SmallTalk发明的一直软件设计模式。我们可以用一张图来表示MVC架构模型：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-7d67880a273efe49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>MVC的核心思想是希望通过控制层管理视图呈现，从将逻辑层和视图层进行分离。</p>\n<p>服务端编程其实就是MVC的最佳实践，理解了MVC架构之后，我们马上开始服务端编程。</p>\n<h2 id=\"服务端编程\"><a href=\"#服务端编程\" class=\"headerlink\" title=\"服务端编程\"></a>服务端编程</h2><p>服务端编程也叫后端编程，主要用于为前端提供数据源以及完成必要的业务逻辑处理。</p>\n<p>这个部分我们使用Java语言开发，MVC框架使用最常用的 <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener\">Spring MVC</a>，完整配置请参考下方表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">框架</th>\n<th style=\"text-align:center\">数据库</th>\n<th style=\"text-align:center\">服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IntelliJ IDEA</td>\n<td style=\"text-align:center\">Java 1.8</td>\n<td style=\"text-align:center\">Spring MVC</td>\n<td style=\"text-align:center\">MySQL</td>\n<td style=\"text-align:center\">Tomcat 7.0.57</td>\n</tr>\n</tbody>\n</table>\n<p>为了简化数据库的访问，我们再增加一个轻量级的数据库访问框架 <a href=\"https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin\" target=\"_blank\" rel=\"noopener\">MyBatis</a>。</p>\n<p>这里假设你已经正确安装了MySQL数据库和Tomcat服务器，如果你对具体的安装步骤有疑问，请在文章下方评论告诉我。</p>\n<p>在开始编程之前，我们需要完成以下准备工作：</p>\n<h4 id=\"第一步：创建数据库d-user以及用户表t-user用于保存用户数据\"><a href=\"#第一步：创建数据库d-user以及用户表t-user用于保存用户数据\" class=\"headerlink\" title=\"第一步：创建数据库d_user以及用户表t_user用于保存用户数据\"></a>第一步：创建数据库d_user以及用户表t_user用于保存用户数据</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database d_server;</span><br><span class=\"line\">use d_server;</span><br><span class=\"line\">CREATE TABLE `t_user` (</span><br><span class=\"line\">  `id` int(10) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `username` varchar(20) NOT NULL,</span><br><span class=\"line\">  `pwd` varchar(32) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `username` (`username`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步：使用IntelliJ-IDE创建一个Gradle依赖工程\"><a href=\"#第二步：使用IntelliJ-IDE创建一个Gradle依赖工程\" class=\"headerlink\" title=\"第二步：使用IntelliJ IDE创建一个Gradle依赖工程\"></a>第二步：使用IntelliJ IDE创建一个Gradle依赖工程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ae0d24bbbe86dfc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-587a2fa067aa755e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-44c52a25c8312669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后一个步骤选择工作目录确定即可。</p>\n<h4 id=\"第三步：在build-gradle脚本文件中添加Spring-MVC以及MyBatis依赖\"><a href=\"#第三步：在build-gradle脚本文件中添加Spring-MVC以及MyBatis依赖\" class=\"headerlink\" title=\"第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖\"></a>第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.springframework&apos;, name: &apos;spring-webmvc&apos;, version: &apos;5.0.4.RELEASE&apos;</span><br><span class=\"line\">compile group: &apos;org.mybatis&apos;, name: &apos;mybatis&apos;, version: &apos;3.4.6&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步：关联本地Tomcat服务器\"><a href=\"#第四步：关联本地Tomcat服务器\" class=\"headerlink\" title=\"第四步：关联本地Tomcat服务器\"></a>第四步：关联本地Tomcat服务器</h4><p>a）编辑运行设置，选择本地Tomcat服务器<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-eae80e8a4aaeecbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ef76202829b3858a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>b）选择以war包的方式部署到Tomcat<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-0f086367e866edf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>c）在浏览器中输入<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>测试工作是否正常<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-1fc056188c7b5f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如果看到下面这个界面，证明一切工作正常<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-1ae45edff27cc030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"第五步：配置Spring-MVC\"><a href=\"#第五步：配置Spring-MVC\" class=\"headerlink\" title=\"第五步：配置Spring MVC\"></a>第五步：配置Spring MVC</h4><p>备注：参考官方文档 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\" target=\"_blank\" rel=\"noopener\">Web on Servlet Stack</a></p>\n<p>a）在webapp目录下面生成WEB-INF/web.xml配置文件<br>选择菜单File-&gt;Project Structure进入如下界面：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-31704ef71bb60539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>在弹出的界面中设置路径为…/webapp/WEB-INF即可。</p>\n<p>b）在web.xml文件中添加如下配置信息</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class=\"line\">         version=&quot;3.1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;listener&gt;</span><br><span class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">    &lt;/listener&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;context-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;/WEB-INF/app-context.xml&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/context-param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;/&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;&lt;/param-value&gt;</span><br><span class=\"line\">        &lt;/init-param&gt;</span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">    &lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;/&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这部分配置主要是使用Spring MVC的DispatcherServlet完成请求的拦截分发。配置文件中引用了另外一个配置文件app-context.xml，这个配置文件主要是完成Spring的依赖注入。</p>\n<p>c）在app-context.xml配置文件中添加如下信息</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/mvc</span><br><span class=\"line\">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">   &lt;!-- 添加扫描注解的包 --&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-package=&quot;com.youngfeng.server&quot;/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">   &lt;!-- 使用注解完成依赖注入 --&gt;</span><br><span class=\"line\">    &lt;mvc:annotation-driven /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>d）添加jackson依赖用于Spring实现Json自动解析</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-databind&apos;, version: &apos;2.9.4&apos;</span><br><span class=\"line\">compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-core&apos;, version: &apos;2.2.3&apos;</span><br></pre></td></tr></table></figure>\n<p>PS：不得不承认，Java后端开发的xml文件配置实在是一件繁琐至极的事情，尽管我们只需要配置一次。为了简化配置，Spring官方推出了一个重磅产品 <a href=\"https://projects.spring.io/spring-boot/\" target=\"_blank\" rel=\"noopener\">Spring Boot</a>。不过，这不是本文讨论的重点，感兴趣的同学请自行了解。</p>\n<p>虽然我们已经完成了Spring的配置，但MyBatis的配置工作才刚刚开始。</p>\n<h3 id=\"配置MyBatis\"><a href=\"#配置MyBatis\" class=\"headerlink\" title=\"配置MyBatis\"></a>配置MyBatis</h3><p>为了简化Spring中MyBatis的配置，我们再增加一个MyBatis官方的提供的 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">mybatis-spring</a> 库。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.mybatis&apos;, name: &apos;mybatis-spring&apos;, version: &apos;1.3.2&apos;</span><br></pre></td></tr></table></figure>\n<p>备注：参考官方文档 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">mybatis-spring</a></p>\n<p>a）在spring配置文件app-context.xml配置文件中添加如下bean配置:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b）指定数据源</p>\n<p>b1) 添加Spring JDBC与MySQL Connector依赖</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.springframework&apos;, name: &apos;spring-jdbc&apos;, version: &apos;5.0.4.RELEASE&apos;</span><br><span class=\"line\">compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;6.0.6&apos;</span><br></pre></td></tr></table></figure>\n<p>注意：因为部分依赖包只存在于JCenter，需要在build.gradle脚本中添加jcenter maven源</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>b2）在app-context.xml文件中添加如下配置：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot;</span><br><span class=\"line\">      class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;driverClassName&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.driverClassName&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.url&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.username&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.password&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b3）在类路径目录下创建db.properties文件指定MySQL数据库信息</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName = com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url = jdbc:mysql://localhost:3306/d_server</span><br><span class=\"line\">jdbc.username = root</span><br><span class=\"line\">jdbc.password = root</span><br></pre></td></tr></table></figure>\n<p>至此，所有的配置工作终于完成了，接下来进入最重要的编码阶段。</p>\n<p>由于控制层需要依赖模型层的代码，因此，我们按照从下往上的原则进行编码。<br>a）先完成数据库的访问部分（DAO）</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDAO &#123;</span><br><span class=\"line\">    @Select(&quot;select * from t_user where username = #&#123;username&#125;&quot;)</span><br><span class=\"line\">    User findByUsername(@Param(&quot;username&quot;) String username);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Select(&quot;select * from t_user where username = #&#123;username&#125; and pwd = #&#123;pwd&#125;&quot;)</span><br><span class=\"line\">    User findUser(@Param(&quot;username&quot;) String username, @Param(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Insert(&quot;insert into t_user(username, pwd) values(#&#123;username&#125;, #&#123;pwd&#125;)&quot;)</span><br><span class=\"line\">    void insert(@Param(&quot;username&quot;) String username, @Param(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结合MyBatis，这个部分的工作很简单，甚至DAO的实现都不需要手动编码。</p>\n<p>为了实现DAO的依赖注入，我们在app-context.xml配置文件中添加如下配置：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userDAO&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class=\"line\">     &lt;property name=&quot;mapperInterface&quot; value=&quot;com.youngfeng.server.dao.UserDAO&quot;/&gt;</span><br><span class=\"line\">     &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b）Service层编码（也叫Domain层）<br>Service部分是控制层直接调用的接口，从抽象思维来说，也应该使用面向接口的方式编码。这里为了简化，Service部分我们直接使用一个类来实现了。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;userService&quot;)</span><br><span class=\"line\">public class UserService &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserDAO userDAO;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isExist(String username) &#123;</span><br><span class=\"line\">        return null != userDAO.findByUsername(username);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isExist(String username, String pwd) &#123;</span><br><span class=\"line\">        return null != userDAO.findUser(username, pwd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveUser(String username, String pwd) &#123;</span><br><span class=\"line\">        this.userDAO.insert(username, pwd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c）控制层编码</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@RequestMapping(&quot;/user&quot;)</span><br><span class=\"line\">public class UserController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @GetMapping(&quot;/login&quot;)</span><br><span class=\"line\">    public Response login(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;pwd&quot;) String pwd) &#123;</span><br><span class=\"line\">        Response response = new Response();</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 先判断用户名是否存在，给定不同Code用于区分不同错误</span><br><span class=\"line\">        boolean isExist = userService.isExist(username);</span><br><span class=\"line\">        if(!isExist) &#123;</span><br><span class=\"line\">            response.setCode(Response.CODE_USER_NOT_EXIST);</span><br><span class=\"line\">            response.setMsg(&quot;用户不存在或密码错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        // 判断用户名和密码是否匹配</span><br><span class=\"line\">        isExist = userService.isExist(username, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">        if(!isExist) &#123;</span><br><span class=\"line\">            response.setCode(Response.CODE_USER_PWD_ERR);</span><br><span class=\"line\">            response.setMsg(&quot;用户不存在或密码错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @GetMapping(&quot;/register&quot;)</span><br><span class=\"line\">    public Response register(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;pwd&quot;) String pwd) &#123;</span><br><span class=\"line\">        Response response = new Response();</span><br><span class=\"line\">       </span><br><span class=\"line\">        // 注册之前，判断用户名是否已存在</span><br><span class=\"line\">        boolean isExist = userService.isExist(username);</span><br><span class=\"line\">        if(isExist) &#123;</span><br><span class=\"line\">           response.setCode(Response.CODE_USER_HAS_EXIST);</span><br><span class=\"line\">           response.setMsg(&quot;用户名已存在&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            userService.saveUser(username, pwd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想必大家应该已经注意到了，控制层部分请求类型我使用了GET，这是为了方便在浏览器上面测试。测试通过后，要修改为POST请求类型。</p>\n<p>以上代码，我已经在浏览器上测试通过。接下来，我们马上进入iOS客户端编程。</p>\n<h2 id=\"iOS客户端编程\"><a href=\"#iOS客户端编程\" class=\"headerlink\" title=\"iOS客户端编程\"></a>iOS客户端编程</h2><p>iOS部分开发工具我们使用Xcode 9.2，其实你也可以使用AppCode，这是基于IntelliJ IDE开发的一款IDE，使用习惯完全接近IntelliJ IDE。</p>\n<p>为了防止部分同学对Swift语言不熟悉，我们使用最常见的编程语言OC。</p>\n<p>完整配置请参考如下表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">网络框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Xcode 9.2</td>\n<td style=\"text-align:center\">Objective C</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></td>\n</tr>\n</tbody>\n</table>\n<p>打开Xcode，依次选择Create new Xcode Project-&gt;Single View App</p>\n<p>下一步填入如下信息，语言选择OC<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-f6a1ff84a9e9cf73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"第一步：完成UI部分\"><a href=\"#第一步：完成UI部分\" class=\"headerlink\" title=\"第一步：完成UI部分\"></a>第一步：完成UI部分</h4><p>这一部分参考苹果官方文档，按照苹果官方推荐，我们使用Storyboard进行布局。由于我们只是完成一个简单的Demo，所有的页面将在同一个Storyboard中完成。实际开发过程中，要根据功能划分Storyboard，方便进行小组开发。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-8056508c93505be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>使用约束布局我们很快完成了UI的构建，接下来进入最重要的编码阶段。约束布局的意思就是为一个控件添加N个约束，使其固定在某个位置。这个部分只要稍加尝试，就能掌握。具体的使用方法，请参考官方文档。</p>\n<h4 id=\"第二步：创建控制器，并关联UI\"><a href=\"#第二步：创建控制器，并关联UI\" class=\"headerlink\" title=\"第二步：创建控制器，并关联UI\"></a>第二步：创建控制器，并关联UI</h4><p>从服务器编程类推，iOS编程模型中应该也有一个叫Controller的东西。果不其然，在iOS新创建的工程中就有一个叫做ViewController的类，其父类是UIViewController。没错，这就是传说中的控制器。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit/UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController : UIViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>完成登录、注册功能，我们至少需要三个控制器：LoginViewController、RegisterViewController、MainViewController，分别代表登录、注册、首页三个页面。</p>\n<p>接下来，将控制器与UI进行关联。</p>\n<p>UI关联控制器部分，如果你不知道，请先参考苹果官方文档。</p>\n<p>事实上，Xcode的Interface Builder非常好用。按照下图操作即可：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-f2291caac92d81d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后，关联按钮点击事件以及输入框。</p>\n<p>选中控件并按住鼠标右键拖拽到控制器源码中，松开，并选择相应类型即可：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-56c073cdf8d97c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>以登录控制器为例，拖拽完成后的源码如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface LoginViewController ()</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITextField *mUsernameTextField;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITextField *mPwdTextField;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation LoginViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)login:(id)sender &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)goToRegister:(id)sender &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进入网络部分编程。</p>\n<p>为了简化网络部分编程，我们引入AFNetworking框架。还记得服务端编程是怎么引入依赖的吗？没错，是Gradle。iOS端也有类似的依赖管理工具<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"noopener\">Cocoapods</a>，这个部分如果不会依然请你参考官方文档。</p>\n<p>使用如下步骤安装依赖（这里假设你已经正确安装了Cocoapod）：<br>a）在根目录下面创建Podfile文件，并添加如下内容：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;8.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;IOSClient&apos; do</span><br><span class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>b）安装依赖</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>PS：可能有人会问，为什么服务端编程没有安装依赖的步骤。其实，很简单，intelliJ IDE非常智能，它自动检测了build.gradle文件的修改。一旦发现修改，自动安装依赖。因此，看起来就像没有依赖安装这个步骤一样。事实上，Cocoapod并非苹果官方的产品，如果产品来自苹果官方，恐怕Xcode也会支持自动安装依赖。</p>\n<p>依赖安装完成后，为了更好地服务我们的业务。我们对网络请求做一点简单封装，增加HttpClient类，仅提供一个POST请求接口即可。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  HttpClient.m</span><br><span class=\"line\">//  IOSClient</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by 欧阳锋 on 17/03/2018.</span><br><span class=\"line\">//  Copyright © 2018 xbdx. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;HttpClient.h&quot;</span><br><span class=\"line\">#import &lt;AFNetworking.h&gt;</span><br><span class=\"line\">#import &quot;Response.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation HttpClient</span><br><span class=\"line\"></span><br><span class=\"line\">static const NSString *BASE_URL = @&quot;http://192.168.31.146:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)init &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.baseUrl = BASE_URL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (HttpClient *)initWithBaseUrl:(NSString *)baseUrl &#123;</span><br><span class=\"line\">    HttpClient *client = [[HttpClient alloc] init];</span><br><span class=\"line\">    client.baseUrl = baseUrl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return client;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (HttpClient *)sharedInstance &#123;</span><br><span class=\"line\">    static HttpClient *client = nil;</span><br><span class=\"line\">    static dispatch_once_t once;</span><br><span class=\"line\">    dispatch_once(&amp;once, ^&#123;</span><br><span class=\"line\">        client = [[self alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return client;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)POST:(NSString *)url params:(NSDictionary *)params success:(void (^)(NSString *, id))success error:(void (^)(NSString *, NSInteger, NSInteger, NSString *))error &#123;</span><br><span class=\"line\">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class=\"line\">    manager.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class=\"line\">    [[AFHTTPSessionManager manager] POST: [_baseUrl stringByAppendingString:url]</span><br><span class=\"line\">                              parameters: params</span><br><span class=\"line\">                                progress: nil</span><br><span class=\"line\">                                 success: ^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</span><br><span class=\"line\">                                     if(nil != success) &#123;</span><br><span class=\"line\">                                         if(nil != responseObject) &#123;</span><br><span class=\"line\">                                             if([responseObject isKindOfClass: [NSDictionary class]]) &#123;</span><br><span class=\"line\">                                                 NSInteger code = ((NSDictionary *)responseObject)[@&quot;code&quot;];</span><br><span class=\"line\">                                                 </span><br><span class=\"line\">                                                 if(SUCCESS == code) &#123;</span><br><span class=\"line\">                                                     success(url, responseObject);</span><br><span class=\"line\">                                                 &#125; else &#123;</span><br><span class=\"line\">                                                     if(nil != error) &#123;</span><br><span class=\"line\">                                                         NSString *msg = ((NSDictionary *)responseObject)[@&quot;msg&quot;];</span><br><span class=\"line\">                                                         error(url, SC_OK, code, msg);</span><br><span class=\"line\">                                                     &#125;</span><br><span class=\"line\">                                                 &#125;</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;</span><br><span class=\"line\">                                 failure: ^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull nsError) &#123;</span><br><span class=\"line\">                                     if(nil != nsError) &#123;</span><br><span class=\"line\">                                         error(url, nsError.code, nil, nsError.description);</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>为了简化JSON解析，我们增加一个最常见的Json解析库 <a href=\"https://github.com/jsonmodel/jsonmodel\" target=\"_blank\" rel=\"noopener\">jsonmodel</a> 库。等待对话框也使用最常见的第三方库 <a href=\"https://github.com/SVProgressHUD/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a>。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;JSONModel&apos;</span><br><span class=\"line\">pod &apos;SVProgressHUD&apos;</span><br></pre></td></tr></table></figure>\n<p>安装依赖使用同样的命令pod install即可。</p>\n<p>接下来，我们添加登录注册逻辑，完成最后部分编码：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 登录部分逻辑</span><br><span class=\"line\">- (IBAction)login:(id)sender &#123;</span><br><span class=\"line\">    [SVProgressHUD show];</span><br><span class=\"line\">    HttpClient *client = [HttpClient sharedInstance];</span><br><span class=\"line\">    [client POST: @&quot;/user/login&quot;</span><br><span class=\"line\">          params: @&#123;@&quot;username&quot; : _mUsernameTextField.text, @&quot;pwd&quot; : _mPwdTextField.text&#125;</span><br><span class=\"line\">         success:^(NSString *url, id data) &#123;</span><br><span class=\"line\">             [SVProgressHUD dismiss];</span><br><span class=\"line\">             </span><br><span class=\"line\">             if([data isKindOfClass: [NSDictionary class]]) &#123;</span><br><span class=\"line\">                 // 例子代码，这里不做严格判断了</span><br><span class=\"line\">                 User *user = [[User alloc] initWithDictionary: data[@&quot;data&quot;] error: nil];</span><br><span class=\"line\">                 [self pushToMainViewController: user];</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) &#123;</span><br><span class=\"line\">             [SVProgressHUD dismiss];</span><br><span class=\"line\">             </span><br><span class=\"line\">             [self promptError: error];</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)pushToMainViewController: (User *) user &#123;</span><br><span class=\"line\">    UIStoryboard *storyboard = [UIStoryboard storyboardWithName: @&quot;Main&quot; bundle: [NSBundle mainBundle]];</span><br><span class=\"line\">    MainViewController *mainViewController = [storyboard instantiateViewControllerWithIdentifier: @&quot;mainViewController&quot;];</span><br><span class=\"line\">    mainViewController.user = user;</span><br><span class=\"line\">    [self.navigationController presentViewController: mainViewController animated: YES completion: nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注册部分逻辑</span><br><span class=\"line\">- (IBAction)register:(id)sender &#123;</span><br><span class=\"line\">    NSString *username = _mUsernameTextField.text;</span><br><span class=\"line\">    NSString *pwd = _mPwdTextField.text;</span><br><span class=\"line\">    NSString *confrimPwd = _mConfirmTextField.text;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: username]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入用户名&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: pwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入用户密码&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: confrimPwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入确认密码&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(![pwd isEqualToString: confrimPwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;两次密码输入不一致，请重新输入&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    HttpClient *client = [HttpClient sharedInstance];</span><br><span class=\"line\">    [client POST: @&quot;/user/register&quot; params: @&#123;@&quot;username&quot; : username, @&quot;pwd&quot; : pwd&#125; success:^(NSString *url, id data) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;注册成功&quot; handler:^(UIAlertAction *action) &#123;</span><br><span class=\"line\">            [self.navigationController popViewControllerAnimated: YES];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) &#123;</span><br><span class=\"line\">        [self promptError: error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的步骤，我们已经完成了iOS客户端的开发。苹果官方默认支持的就是经典的MVC模式。因此，我们完全参考服务端开发模式完成了iOS客户端的开发。你唯一需要克服的是对新语言的恐惧，以及适应UI开发的节奏。事实上，大部分服务端程序员都害怕UI编程。</p>\n<p>最后，我们进入Android客户端编程。</p>\n<h2 id=\"Android客户端编程\"><a href=\"#Android客户端编程\" class=\"headerlink\" title=\"Android客户端编程\"></a>Android客户端编程</h2><p>Android部分开发工具，我们使用Android Studio，网络框架使用<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a>，完整配置参考下方表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">网络框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Android Studio</td>\n<td style=\"text-align:center\">Java 1.8</td>\n<td style=\"text-align:center\">Retrofit</td>\n</tr>\n</tbody>\n</table>\n<p>打开Android Studio，选择Start a new Android Studio Project，在打开的页面中填入以下信息：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-b77a95d69f27f1ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>剩下步骤全部选择默认。</p>\n<p>按照iOS编码部分类推，Android端应该也有一个类似UIViewController的控制器。果不其然，在模板工程中就有一个MainActivity，其父类是AppCompatActivity，这就是Android的控制器。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PS：事实上Android早期版本的控制器就叫Activity，由于系统设计不断变更，最终诞生了兼容性子类AppCompatActivity。这都是早期设计不够严谨，导致的问题。相对而言，iOS端的设计就靠谱了许多。</p>\n<p>同样地，在开始编码之前，我们加入所需的第三方依赖。那么，问题来了。Android端如何添加依赖呢？</p>\n<p>碰巧，Android端主要的开发语言就是Java。因此，我们依然可以使用Gradle进行依赖管理。碰巧，Android Studio默认支持的就是使用Gradle进行依赖管理。</p>\n<p>首先，在app模块目录的build.gradle添加 <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a> 依赖：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &apos;com.squareup.retrofit2:retrofit:2.4.0&apos;</span><br></pre></td></tr></table></figure>\n<p>添加完成后，点击文件右上方Sync now下载依赖：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-07a786274c95d9c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>相对于AFNetworking，Retrofit设计的更加精妙。参考Retrofit官方文档，我们开始加入登录注册逻辑：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @FormUrlEncoded</span><br><span class=\"line\">    @POST(&quot;user/login&quot;)</span><br><span class=\"line\">    Call&lt;User&gt; login(@Field(&quot;username&quot;) String username, @Field(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    @FormUrlEncoded</span><br><span class=\"line\">    @POST(&quot;user/register&quot;)</span><br><span class=\"line\">    Call&lt;User&gt; register(@Field(&quot;username&quot;) String username, @Field(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Retrofit设计的其中一个巧妙之处在于：你只需要定义好接口，具体的实现交给Retrofit。你可以看到，上面的代码中我们仅仅定义了请求的类型，以及请求所需要的参数就已经完成了网络部分的所有工作。</p>\n<p>不过，操作这个接口实现，需要使用Retrofit实例。接下来，我们参考官方文档生成一个我们需要的Retrofit实例。</p>\n<p>在生成Retrofit实例之前，还需要注意一个事情。还记得iOS端我们是怎么完成JSON解析的吗？是的，我们使用了第三方库jsonmodel。</p>\n<p>在Json解析的设计上，Retrofit也相当巧妙。Retrofit提供了一个转换适配器用于实现Json数据的自动转换。使用它，你可以自定义自己的Json转换适配器；也可以使用官方已经实现好的适配器。一旦添加了这个适配器，所有的Json解析工作Retrofit就会自动帮忙完成。不再需要像AFNetworking一样在回调里面反复进行Json解析操作。</p>\n<p>因此，我们增加一个官方版本的Json转换适配器依赖 converter-json：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &apos;com.squareup.retrofit2:converter-gson:2.4.0&apos;</span><br></pre></td></tr></table></figure>\n<p>加入Json适配器之后，我们使用一个新的Retrofit管理类RetrofitManager用于生成项目所需要的Retrofit实例。完整代码如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RetrofitManager &#123;</span><br><span class=\"line\">    private static final String BASE_URL = &quot;http://192.168.31.146:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Retrofit create(String baseUrl) &#123;</span><br><span class=\"line\">        return new Retrofit.Builder()</span><br><span class=\"line\">                          .baseUrl(baseUrl)</span><br><span class=\"line\">                          .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                          .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static Retrofit createDefault() &#123;</span><br><span class=\"line\">        return create(BASE_URL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们尝试在MainActivity中测试登录接口，确定是否编写正确。我们在MainActivity的onCreate方法中加入如下代码：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = RetrofitManager.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">UserService userService = retrofit.create(UserService.class);</span><br><span class=\"line\">Call &lt; User &gt; call = userService.login(&quot;1&quot;, &quot;1&quot;);</span><br><span class=\"line\">call.enqueue(new Callback &lt; User &gt; () &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Override </span><br><span class=\"line\">    public void onResponse(Call &lt; User &gt; call, Response &lt; User &gt; response) &#123;</span><br><span class=\"line\">        Log.e(&quot;MainActivity&quot;, call + &quot;&quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override </span><br><span class=\"line\">    public void onFailure(Call &lt; User &gt; call, Throwable t) &#123;</span><br><span class=\"line\">        Log.e(&quot;MainActivity&quot;, call + &quot;&quot; + t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>打开模拟器，运行，你将看到以下错误：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-18 04:03:24.546 7277-7277/com.youngfeng.androidclient D/NetworkSecurityConfig: No Network Security Config specified, using platform default</span><br><span class=\"line\">03-18 04:03:24.574 7277-7277/com.youngfeng.androidclient W/System.err: java.net.SocketException: Permission denied</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.createImpl(Socket.java:454)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.getImpl(Socket.java:517)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.setSoTimeout(Socket.java:1108)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:238)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:160)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br></pre></td></tr></table></figure>\n<p>提示我们权限被拒绝，这是和iOS平台不一样的地方。如果你的应用需要使用网络，你需要在清单文件中手动指定使用网络权限。为此，我们在AndroidManifest.xml文件中添加如下配置：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>再次运行，一切正常。</p>\n<p>注意：这里的service部分和服务端的service不一样，它只是Retrofit用于将网络接口分模块处理的一种手段，不要混淆。</p>\n<p>上面说到，Android里面的AppCompatActivity就是MVC中的控制器，接下来我们就完成最重要的控制器以及UI部分编码。</p>\n<p>a）创建LoginActivity以及布局文件activity_login.xml，在其onCreate方法中使用setContentView接口进行关联。</p>\n<p>b）UI编程<br>你相信吗？一旦你学会了一门新的技术，你的技能就会Double。</p>\n<p>iOS UI部分我们使用了约束布局的方式完成了整体布局，Android是否也可以使用约束布局呢？答案是：当然可以。</p>\n<p>事实上，Android官方也推荐使用这种布局方式进行页面布局。</p>\n<p>切换到可视化布局模式，我们依然使用拖拽UI的方式完成整个布局，完整代码请参考文章最后的附录部分：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-583b7db343adee31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>PS：目前，Android端的约束布局相对iOS逊色不少，希望后面官方能够提供更多功能支持。</p>\n<p>按照同样的方式完成注册页面和首页布局，UI部分开发完成后，尝试跳转到指定控制器。你会发现，出错了。这也是和iOS不一样的地方，Android端四大组件必须在清单文件中注册。具体是什么原因，请自行思考，这不是本文研究的重点。</p>\n<p>因此，我们首先在清单文件中对所有控制器进行注册：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.login.LoginActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;&gt;</span><br><span class=\"line\">        &lt;intent-filter&gt;</span><br><span class=\"line\">            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class=\"line\">        &lt;/intent-filter&gt;</span><br><span class=\"line\">    &lt;/activity&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;activity android:name=&quot;.MainActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;activity android:name=&quot;.register.RegisterActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，以登录为例，我们在控制器中完善登录逻辑：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LoginActivity extends BaseActivity &#123;</span><br><span class=\"line\">    private EditText mUsernameEdit;</span><br><span class=\"line\">    private EditText mPwdEdit;</span><br><span class=\"line\">    private Button mLoginBtn;</span><br><span class=\"line\">    private Button mRegisterBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_login);</span><br><span class=\"line\"></span><br><span class=\"line\">        mUsernameEdit = findViewById(R.id.edit_username);</span><br><span class=\"line\">        mPwdEdit = findViewById(R.id.edit_pwd);</span><br><span class=\"line\">        mLoginBtn = findViewById(R.id.btn_login);</span><br><span class=\"line\">        mRegisterBtn = findViewById(R.id.btn_register);</span><br><span class=\"line\"></span><br><span class=\"line\">        mLoginBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                login(mUsernameEdit.getText().toString(), mPwdEdit.getText().toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        mRegisterBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void login(String username, String pwd) &#123;</span><br><span class=\"line\">        Retrofit retrofit = RetrofitManager.createDefault();</span><br><span class=\"line\">        UserService userService = retrofit.create(UserService.class);</span><br><span class=\"line\">        Call&lt;HttpResponse&lt;User&gt;&gt; call = userService.login(username, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">        showLoading(true);</span><br><span class=\"line\">        call.enqueue(new Callback&lt;HttpResponse&lt;User&gt;&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onResponse(Call&lt;HttpResponse&lt;User&gt;&gt; call, Response&lt;HttpResponse&lt;User&gt;&gt; response) &#123;</span><br><span class=\"line\">                showLoading(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例子代码，暂时忽略空值判断</span><br><span class=\"line\">                if(HttpResponse.CODE_SUCCESS != response.body().getCode()) &#123;</span><br><span class=\"line\">                    promptError(response.body().getMsg() + &quot;&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);</span><br><span class=\"line\">                    intent.putExtra(MainActivity.KEY_USER, response.body().getData());</span><br><span class=\"line\">                    startActivity(intent);</span><br><span class=\"line\">                    finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFailure(Call&lt;HttpResponse&lt;User&gt;&gt; call, Throwable t) &#123;</span><br><span class=\"line\">                showLoading(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                promptError(t.getMessage() + &quot;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，按照iOS的开发模式，我们完成了Android客户端的开发。与iOS不同的地方是，Android端控制器必须在清单文件中注册。程序员不能主动创建Activity，只能间接使用intent进行通信。而对于布局，两者都可以使用约束管理的方式完成。从这个角度来说，Android端和iOS端开发切换的难度还是比较低的。</p>\n<h2 id=\"距离全栈还差最后一步\"><a href=\"#距离全栈还差最后一步\" class=\"headerlink\" title=\"距离全栈还差最后一步\"></a>距离全栈还差最后一步</h2><p>至此，我们已经完成了文章开头定下的目标。以MVC架构为基础，完成了服务端、iOS客户端、Android客户端编码。</p>\n<p>然而，很多同学希望成为一个全栈工程师。按照现在的主流开发分支来说，成为一个全栈工程师，你还需要掌握Web前端开发。那么，问题来了，Web前端开发是否也是使用MVC架构呢？</p>\n<p>事实上，如果你使用 <a href=\"https://github.com/angular/angular\" target=\"_blank\" rel=\"noopener\">Angular</a>，你应该早就习惯了MVC。而如果你偏爱React，你恐怕会搭配Redux，使用这种响应式的数据流框架编码。如果你使用Vue，你恐怕也会选择MVC或者MVVM架构。</p>\n<p>如果你选择使用MVC，你依然可以按照类推的方式来学习。由于文章篇幅的原因，这部分就不予展示了。</p>\n<h2 id=\"编后说\"><a href=\"#编后说\" class=\"headerlink\" title=\"编后说\"></a>编后说</h2><p>这篇文章我们以MVC为架构，从服务端编程开始，使用类推的方式依次完成了iOS客户端、Android客户端的开发。</p>\n<p>有人可能会说，文章中的例子太简单，没有实际意义。事实上，在学习一门新技术的时候，就要从最基础的部分出发，建立对这门技术的最初印象。很多同学容易一开始就陷入细节当中无法自拔，产生的最直观的结果就是对新技术产生恐惧。因此，你常常可以看到一个程序员面对新东西骂娘，无怪乎。</p>\n<p>其实，如果你慢慢进入到细节编程中，你会发现技术之间越来越多的相似性。这个时候你的积极性就会越来越高，编码也会更加得心应手。</p>\n<p>我在学习一门新技术的时候，都是先从相似性开始。然后，再去攻克不同的部分。从不同的部分中去提炼相同的思想，这样在面对不同问题的时候，我始终可以使用同样的思想去解决。</p>\n<p>当然，我想，你应该会说。虽然克服了框架问题，可是不同的编程语言千差万别。我们无法从一门语言快速过渡到另外一门语言，这在学习新技术的时候才是最大的拦路虎。</p>\n<p>你说的很对，这恰好是下一个我想和你分享的问题。</p>\n<p><strong>扫描下方二维码，关注欧阳锋工作室，回复“相对论”抢先阅读相对论系列下一篇文章《技术相对论之编程语言》。</strong></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>本篇例子完整代码：<a href=\"https://github.com/yuanhoujun/it-theory-of-relativity\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/it-theory-of-relativity</a><br>IntelliJ IDEA下载地址：<a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/idea/</a><br>Tomcat下载地址：<a href=\"http://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">http://tomcat.apache.org/</a><br>iOS开发者官网：<a href=\"https://developer.apple.com/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/</a><br>Android开发者官网：<a href=\"https://developer.android.com/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/703764-5db8da4fcacbc730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文 | 欧阳锋\"></p>\n<blockquote>\n<p>有同学问我，你是怎样学习编程的呢？为了回答你的这个问题，今天，我们一起来做一件非常有意思的事情。我们以<a href=\"https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&amp;fromid=85990\" target=\"_blank\" rel=\"noopener\">MVC</a>架构为基，从服务端编程开始，依次类推iOS、Android，并最终完成登录、注册功能。</p>\n</blockquote>\n<h2 id=\"What-is-MVC-？\"><a href=\"#What-is-MVC-？\" class=\"headerlink\" title=\"What is MVC ？\"></a>What is MVC ？</h2><p>正文开始之前，我们先来简单了解一下MVC架构。</p>\n<p>MVC全称是Model-View-Controller，是上个世纪80年底<a href=\"https://baike.baidu.com/item/Xerox%20PARC\" target=\"_blank\" rel=\"noopener\">Xerox PARC</a>为其编程语言SmallTalk发明的一直软件设计模式。我们可以用一张图来表示MVC架构模型：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-7d67880a273efe49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>MVC的核心思想是希望通过控制层管理视图呈现，从将逻辑层和视图层进行分离。</p>\n<p>服务端编程其实就是MVC的最佳实践，理解了MVC架构之后，我们马上开始服务端编程。</p>\n<h2 id=\"服务端编程\"><a href=\"#服务端编程\" class=\"headerlink\" title=\"服务端编程\"></a>服务端编程</h2><p>服务端编程也叫后端编程，主要用于为前端提供数据源以及完成必要的业务逻辑处理。</p>\n<p>这个部分我们使用Java语言开发，MVC框架使用最常用的 <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener\">Spring MVC</a>，完整配置请参考下方表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">框架</th>\n<th style=\"text-align:center\">数据库</th>\n<th style=\"text-align:center\">服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IntelliJ IDEA</td>\n<td style=\"text-align:center\">Java 1.8</td>\n<td style=\"text-align:center\">Spring MVC</td>\n<td style=\"text-align:center\">MySQL</td>\n<td style=\"text-align:center\">Tomcat 7.0.57</td>\n</tr>\n</tbody>\n</table>\n<p>为了简化数据库的访问，我们再增加一个轻量级的数据库访问框架 <a href=\"https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin\" target=\"_blank\" rel=\"noopener\">MyBatis</a>。</p>\n<p>这里假设你已经正确安装了MySQL数据库和Tomcat服务器，如果你对具体的安装步骤有疑问，请在文章下方评论告诉我。</p>\n<p>在开始编程之前，我们需要完成以下准备工作：</p>\n<h4 id=\"第一步：创建数据库d-user以及用户表t-user用于保存用户数据\"><a href=\"#第一步：创建数据库d-user以及用户表t-user用于保存用户数据\" class=\"headerlink\" title=\"第一步：创建数据库d_user以及用户表t_user用于保存用户数据\"></a>第一步：创建数据库d_user以及用户表t_user用于保存用户数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database d_server;</span><br><span class=\"line\">use d_server;</span><br><span class=\"line\">CREATE TABLE `t_user` (</span><br><span class=\"line\">  `id` int(10) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `username` varchar(20) NOT NULL,</span><br><span class=\"line\">  `pwd` varchar(32) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `username` (`username`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步：使用IntelliJ-IDE创建一个Gradle依赖工程\"><a href=\"#第二步：使用IntelliJ-IDE创建一个Gradle依赖工程\" class=\"headerlink\" title=\"第二步：使用IntelliJ IDE创建一个Gradle依赖工程\"></a>第二步：使用IntelliJ IDE创建一个Gradle依赖工程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ae0d24bbbe86dfc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-587a2fa067aa755e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-44c52a25c8312669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后一个步骤选择工作目录确定即可。</p>\n<h4 id=\"第三步：在build-gradle脚本文件中添加Spring-MVC以及MyBatis依赖\"><a href=\"#第三步：在build-gradle脚本文件中添加Spring-MVC以及MyBatis依赖\" class=\"headerlink\" title=\"第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖\"></a>第三步：在build.gradle脚本文件中添加Spring MVC以及MyBatis依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.springframework&apos;, name: &apos;spring-webmvc&apos;, version: &apos;5.0.4.RELEASE&apos;</span><br><span class=\"line\">compile group: &apos;org.mybatis&apos;, name: &apos;mybatis&apos;, version: &apos;3.4.6&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步：关联本地Tomcat服务器\"><a href=\"#第四步：关联本地Tomcat服务器\" class=\"headerlink\" title=\"第四步：关联本地Tomcat服务器\"></a>第四步：关联本地Tomcat服务器</h4><p>a）编辑运行设置，选择本地Tomcat服务器<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-eae80e8a4aaeecbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-ef76202829b3858a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>b）选择以war包的方式部署到Tomcat<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-0f086367e866edf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>c）在浏览器中输入<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>测试工作是否正常<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-1fc056188c7b5f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如果看到下面这个界面，证明一切工作正常<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-1ae45edff27cc030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"第五步：配置Spring-MVC\"><a href=\"#第五步：配置Spring-MVC\" class=\"headerlink\" title=\"第五步：配置Spring MVC\"></a>第五步：配置Spring MVC</h4><p>备注：参考官方文档 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\" target=\"_blank\" rel=\"noopener\">Web on Servlet Stack</a></p>\n<p>a）在webapp目录下面生成WEB-INF/web.xml配置文件<br>选择菜单File-&gt;Project Structure进入如下界面：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-31704ef71bb60539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>在弹出的界面中设置路径为…/webapp/WEB-INF即可。</p>\n<p>b）在web.xml文件中添加如下配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class=\"line\">         version=&quot;3.1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;listener&gt;</span><br><span class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">    &lt;/listener&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;context-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;/WEB-INF/app-context.xml&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/context-param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;/&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;&lt;/param-value&gt;</span><br><span class=\"line\">        &lt;/init-param&gt;</span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">    &lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;/&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这部分配置主要是使用Spring MVC的DispatcherServlet完成请求的拦截分发。配置文件中引用了另外一个配置文件app-context.xml，这个配置文件主要是完成Spring的依赖注入。</p>\n<p>c）在app-context.xml配置文件中添加如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/mvc</span><br><span class=\"line\">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">   &lt;!-- 添加扫描注解的包 --&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-package=&quot;com.youngfeng.server&quot;/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">   &lt;!-- 使用注解完成依赖注入 --&gt;</span><br><span class=\"line\">    &lt;mvc:annotation-driven /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>d）添加jackson依赖用于Spring实现Json自动解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-databind&apos;, version: &apos;2.9.4&apos;</span><br><span class=\"line\">compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-core&apos;, version: &apos;2.2.3&apos;</span><br></pre></td></tr></table></figure>\n<p>PS：不得不承认，Java后端开发的xml文件配置实在是一件繁琐至极的事情，尽管我们只需要配置一次。为了简化配置，Spring官方推出了一个重磅产品 <a href=\"https://projects.spring.io/spring-boot/\" target=\"_blank\" rel=\"noopener\">Spring Boot</a>。不过，这不是本文讨论的重点，感兴趣的同学请自行了解。</p>\n<p>虽然我们已经完成了Spring的配置，但MyBatis的配置工作才刚刚开始。</p>\n<h3 id=\"配置MyBatis\"><a href=\"#配置MyBatis\" class=\"headerlink\" title=\"配置MyBatis\"></a>配置MyBatis</h3><p>为了简化Spring中MyBatis的配置，我们再增加一个MyBatis官方的提供的 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">mybatis-spring</a> 库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.mybatis&apos;, name: &apos;mybatis-spring&apos;, version: &apos;1.3.2&apos;</span><br></pre></td></tr></table></figure>\n<p>备注：参考官方文档 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">mybatis-spring</a></p>\n<p>a）在spring配置文件app-context.xml配置文件中添加如下bean配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b）指定数据源</p>\n<p>b1) 添加Spring JDBC与MySQL Connector依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile group: &apos;org.springframework&apos;, name: &apos;spring-jdbc&apos;, version: &apos;5.0.4.RELEASE&apos;</span><br><span class=\"line\">compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;6.0.6&apos;</span><br></pre></td></tr></table></figure>\n<p>注意：因为部分依赖包只存在于JCenter，需要在build.gradle脚本中添加jcenter maven源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>b2）在app-context.xml文件中添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot;</span><br><span class=\"line\">      class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;driverClassName&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.driverClassName&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.url&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.username&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot;&gt;</span><br><span class=\"line\">        &lt;value&gt;$&#123;jdbc.password&#125;&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b3）在类路径目录下创建db.properties文件指定MySQL数据库信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName = com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url = jdbc:mysql://localhost:3306/d_server</span><br><span class=\"line\">jdbc.username = root</span><br><span class=\"line\">jdbc.password = root</span><br></pre></td></tr></table></figure>\n<p>至此，所有的配置工作终于完成了，接下来进入最重要的编码阶段。</p>\n<p>由于控制层需要依赖模型层的代码，因此，我们按照从下往上的原则进行编码。<br>a）先完成数据库的访问部分（DAO）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDAO &#123;</span><br><span class=\"line\">    @Select(&quot;select * from t_user where username = #&#123;username&#125;&quot;)</span><br><span class=\"line\">    User findByUsername(@Param(&quot;username&quot;) String username);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Select(&quot;select * from t_user where username = #&#123;username&#125; and pwd = #&#123;pwd&#125;&quot;)</span><br><span class=\"line\">    User findUser(@Param(&quot;username&quot;) String username, @Param(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Insert(&quot;insert into t_user(username, pwd) values(#&#123;username&#125;, #&#123;pwd&#125;)&quot;)</span><br><span class=\"line\">    void insert(@Param(&quot;username&quot;) String username, @Param(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结合MyBatis，这个部分的工作很简单，甚至DAO的实现都不需要手动编码。</p>\n<p>为了实现DAO的依赖注入，我们在app-context.xml配置文件中添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userDAO&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class=\"line\">     &lt;property name=&quot;mapperInterface&quot; value=&quot;com.youngfeng.server.dao.UserDAO&quot;/&gt;</span><br><span class=\"line\">     &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>b）Service层编码（也叫Domain层）<br>Service部分是控制层直接调用的接口，从抽象思维来说，也应该使用面向接口的方式编码。这里为了简化，Service部分我们直接使用一个类来实现了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;userService&quot;)</span><br><span class=\"line\">public class UserService &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserDAO userDAO;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isExist(String username) &#123;</span><br><span class=\"line\">        return null != userDAO.findByUsername(username);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isExist(String username, String pwd) &#123;</span><br><span class=\"line\">        return null != userDAO.findUser(username, pwd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveUser(String username, String pwd) &#123;</span><br><span class=\"line\">        this.userDAO.insert(username, pwd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c）控制层编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@RequestMapping(&quot;/user&quot;)</span><br><span class=\"line\">public class UserController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @GetMapping(&quot;/login&quot;)</span><br><span class=\"line\">    public Response login(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;pwd&quot;) String pwd) &#123;</span><br><span class=\"line\">        Response response = new Response();</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 先判断用户名是否存在，给定不同Code用于区分不同错误</span><br><span class=\"line\">        boolean isExist = userService.isExist(username);</span><br><span class=\"line\">        if(!isExist) &#123;</span><br><span class=\"line\">            response.setCode(Response.CODE_USER_NOT_EXIST);</span><br><span class=\"line\">            response.setMsg(&quot;用户不存在或密码错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        // 判断用户名和密码是否匹配</span><br><span class=\"line\">        isExist = userService.isExist(username, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">        if(!isExist) &#123;</span><br><span class=\"line\">            response.setCode(Response.CODE_USER_PWD_ERR);</span><br><span class=\"line\">            response.setMsg(&quot;用户不存在或密码错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @GetMapping(&quot;/register&quot;)</span><br><span class=\"line\">    public Response register(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;pwd&quot;) String pwd) &#123;</span><br><span class=\"line\">        Response response = new Response();</span><br><span class=\"line\">       </span><br><span class=\"line\">        // 注册之前，判断用户名是否已存在</span><br><span class=\"line\">        boolean isExist = userService.isExist(username);</span><br><span class=\"line\">        if(isExist) &#123;</span><br><span class=\"line\">           response.setCode(Response.CODE_USER_HAS_EXIST);</span><br><span class=\"line\">           response.setMsg(&quot;用户名已存在&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            userService.saveUser(username, pwd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想必大家应该已经注意到了，控制层部分请求类型我使用了GET，这是为了方便在浏览器上面测试。测试通过后，要修改为POST请求类型。</p>\n<p>以上代码，我已经在浏览器上测试通过。接下来，我们马上进入iOS客户端编程。</p>\n<h2 id=\"iOS客户端编程\"><a href=\"#iOS客户端编程\" class=\"headerlink\" title=\"iOS客户端编程\"></a>iOS客户端编程</h2><p>iOS部分开发工具我们使用Xcode 9.2，其实你也可以使用AppCode，这是基于IntelliJ IDE开发的一款IDE，使用习惯完全接近IntelliJ IDE。</p>\n<p>为了防止部分同学对Swift语言不熟悉，我们使用最常见的编程语言OC。</p>\n<p>完整配置请参考如下表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">网络框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Xcode 9.2</td>\n<td style=\"text-align:center\">Objective C</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></td>\n</tr>\n</tbody>\n</table>\n<p>打开Xcode，依次选择Create new Xcode Project-&gt;Single View App</p>\n<p>下一步填入如下信息，语言选择OC<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-f6a1ff84a9e9cf73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"第一步：完成UI部分\"><a href=\"#第一步：完成UI部分\" class=\"headerlink\" title=\"第一步：完成UI部分\"></a>第一步：完成UI部分</h4><p>这一部分参考苹果官方文档，按照苹果官方推荐，我们使用Storyboard进行布局。由于我们只是完成一个简单的Demo，所有的页面将在同一个Storyboard中完成。实际开发过程中，要根据功能划分Storyboard，方便进行小组开发。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/703764-8056508c93505be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>使用约束布局我们很快完成了UI的构建，接下来进入最重要的编码阶段。约束布局的意思就是为一个控件添加N个约束，使其固定在某个位置。这个部分只要稍加尝试，就能掌握。具体的使用方法，请参考官方文档。</p>\n<h4 id=\"第二步：创建控制器，并关联UI\"><a href=\"#第二步：创建控制器，并关联UI\" class=\"headerlink\" title=\"第二步：创建控制器，并关联UI\"></a>第二步：创建控制器，并关联UI</h4><p>从服务器编程类推，iOS编程模型中应该也有一个叫Controller的东西。果不其然，在iOS新创建的工程中就有一个叫做ViewController的类，其父类是UIViewController。没错，这就是传说中的控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit/UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController : UIViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>完成登录、注册功能，我们至少需要三个控制器：LoginViewController、RegisterViewController、MainViewController，分别代表登录、注册、首页三个页面。</p>\n<p>接下来，将控制器与UI进行关联。</p>\n<p>UI关联控制器部分，如果你不知道，请先参考苹果官方文档。</p>\n<p>事实上，Xcode的Interface Builder非常好用。按照下图操作即可：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-f2291caac92d81d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后，关联按钮点击事件以及输入框。</p>\n<p>选中控件并按住鼠标右键拖拽到控制器源码中，松开，并选择相应类型即可：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-56c073cdf8d97c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>以登录控制器为例，拖拽完成后的源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface LoginViewController ()</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITextField *mUsernameTextField;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITextField *mPwdTextField;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation LoginViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)login:(id)sender &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)goToRegister:(id)sender &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进入网络部分编程。</p>\n<p>为了简化网络部分编程，我们引入AFNetworking框架。还记得服务端编程是怎么引入依赖的吗？没错，是Gradle。iOS端也有类似的依赖管理工具<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"noopener\">Cocoapods</a>，这个部分如果不会依然请你参考官方文档。</p>\n<p>使用如下步骤安装依赖（这里假设你已经正确安装了Cocoapod）：<br>a）在根目录下面创建Podfile文件，并添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;8.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;IOSClient&apos; do</span><br><span class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>b）安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>PS：可能有人会问，为什么服务端编程没有安装依赖的步骤。其实，很简单，intelliJ IDE非常智能，它自动检测了build.gradle文件的修改。一旦发现修改，自动安装依赖。因此，看起来就像没有依赖安装这个步骤一样。事实上，Cocoapod并非苹果官方的产品，如果产品来自苹果官方，恐怕Xcode也会支持自动安装依赖。</p>\n<p>依赖安装完成后，为了更好地服务我们的业务。我们对网络请求做一点简单封装，增加HttpClient类，仅提供一个POST请求接口即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  HttpClient.m</span><br><span class=\"line\">//  IOSClient</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by 欧阳锋 on 17/03/2018.</span><br><span class=\"line\">//  Copyright © 2018 xbdx. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;HttpClient.h&quot;</span><br><span class=\"line\">#import &lt;AFNetworking.h&gt;</span><br><span class=\"line\">#import &quot;Response.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation HttpClient</span><br><span class=\"line\"></span><br><span class=\"line\">static const NSString *BASE_URL = @&quot;http://192.168.31.146:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)init &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.baseUrl = BASE_URL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (HttpClient *)initWithBaseUrl:(NSString *)baseUrl &#123;</span><br><span class=\"line\">    HttpClient *client = [[HttpClient alloc] init];</span><br><span class=\"line\">    client.baseUrl = baseUrl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return client;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (HttpClient *)sharedInstance &#123;</span><br><span class=\"line\">    static HttpClient *client = nil;</span><br><span class=\"line\">    static dispatch_once_t once;</span><br><span class=\"line\">    dispatch_once(&amp;once, ^&#123;</span><br><span class=\"line\">        client = [[self alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return client;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)POST:(NSString *)url params:(NSDictionary *)params success:(void (^)(NSString *, id))success error:(void (^)(NSString *, NSInteger, NSInteger, NSString *))error &#123;</span><br><span class=\"line\">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class=\"line\">    manager.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class=\"line\">    [[AFHTTPSessionManager manager] POST: [_baseUrl stringByAppendingString:url]</span><br><span class=\"line\">                              parameters: params</span><br><span class=\"line\">                                progress: nil</span><br><span class=\"line\">                                 success: ^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</span><br><span class=\"line\">                                     if(nil != success) &#123;</span><br><span class=\"line\">                                         if(nil != responseObject) &#123;</span><br><span class=\"line\">                                             if([responseObject isKindOfClass: [NSDictionary class]]) &#123;</span><br><span class=\"line\">                                                 NSInteger code = ((NSDictionary *)responseObject)[@&quot;code&quot;];</span><br><span class=\"line\">                                                 </span><br><span class=\"line\">                                                 if(SUCCESS == code) &#123;</span><br><span class=\"line\">                                                     success(url, responseObject);</span><br><span class=\"line\">                                                 &#125; else &#123;</span><br><span class=\"line\">                                                     if(nil != error) &#123;</span><br><span class=\"line\">                                                         NSString *msg = ((NSDictionary *)responseObject)[@&quot;msg&quot;];</span><br><span class=\"line\">                                                         error(url, SC_OK, code, msg);</span><br><span class=\"line\">                                                     &#125;</span><br><span class=\"line\">                                                 &#125;</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                                         &#125;</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;</span><br><span class=\"line\">                                 failure: ^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull nsError) &#123;</span><br><span class=\"line\">                                     if(nil != nsError) &#123;</span><br><span class=\"line\">                                         error(url, nsError.code, nil, nsError.description);</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>为了简化JSON解析，我们增加一个最常见的Json解析库 <a href=\"https://github.com/jsonmodel/jsonmodel\" target=\"_blank\" rel=\"noopener\">jsonmodel</a> 库。等待对话框也使用最常见的第三方库 <a href=\"https://github.com/SVProgressHUD/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;JSONModel&apos;</span><br><span class=\"line\">pod &apos;SVProgressHUD&apos;</span><br></pre></td></tr></table></figure>\n<p>安装依赖使用同样的命令pod install即可。</p>\n<p>接下来，我们添加登录注册逻辑，完成最后部分编码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 登录部分逻辑</span><br><span class=\"line\">- (IBAction)login:(id)sender &#123;</span><br><span class=\"line\">    [SVProgressHUD show];</span><br><span class=\"line\">    HttpClient *client = [HttpClient sharedInstance];</span><br><span class=\"line\">    [client POST: @&quot;/user/login&quot;</span><br><span class=\"line\">          params: @&#123;@&quot;username&quot; : _mUsernameTextField.text, @&quot;pwd&quot; : _mPwdTextField.text&#125;</span><br><span class=\"line\">         success:^(NSString *url, id data) &#123;</span><br><span class=\"line\">             [SVProgressHUD dismiss];</span><br><span class=\"line\">             </span><br><span class=\"line\">             if([data isKindOfClass: [NSDictionary class]]) &#123;</span><br><span class=\"line\">                 // 例子代码，这里不做严格判断了</span><br><span class=\"line\">                 User *user = [[User alloc] initWithDictionary: data[@&quot;data&quot;] error: nil];</span><br><span class=\"line\">                 [self pushToMainViewController: user];</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) &#123;</span><br><span class=\"line\">             [SVProgressHUD dismiss];</span><br><span class=\"line\">             </span><br><span class=\"line\">             [self promptError: error];</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)pushToMainViewController: (User *) user &#123;</span><br><span class=\"line\">    UIStoryboard *storyboard = [UIStoryboard storyboardWithName: @&quot;Main&quot; bundle: [NSBundle mainBundle]];</span><br><span class=\"line\">    MainViewController *mainViewController = [storyboard instantiateViewControllerWithIdentifier: @&quot;mainViewController&quot;];</span><br><span class=\"line\">    mainViewController.user = user;</span><br><span class=\"line\">    [self.navigationController presentViewController: mainViewController animated: YES completion: nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注册部分逻辑</span><br><span class=\"line\">- (IBAction)register:(id)sender &#123;</span><br><span class=\"line\">    NSString *username = _mUsernameTextField.text;</span><br><span class=\"line\">    NSString *pwd = _mPwdTextField.text;</span><br><span class=\"line\">    NSString *confrimPwd = _mConfirmTextField.text;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: username]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入用户名&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: pwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入用户密码&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([StringUtil isBlankString: confrimPwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;请输入确认密码&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(![pwd isEqualToString: confrimPwd]) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;两次密码输入不一致，请重新输入&quot;];</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    HttpClient *client = [HttpClient sharedInstance];</span><br><span class=\"line\">    [client POST: @&quot;/user/register&quot; params: @&#123;@&quot;username&quot; : username, @&quot;pwd&quot; : pwd&#125; success:^(NSString *url, id data) &#123;</span><br><span class=\"line\">        [self promptError: @&quot;注册成功&quot; handler:^(UIAlertAction *action) &#123;</span><br><span class=\"line\">            [self.navigationController popViewControllerAnimated: YES];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; error:^(NSString *url, NSInteger httpCode, NSInteger bizCode, NSString *error) &#123;</span><br><span class=\"line\">        [self promptError: error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的步骤，我们已经完成了iOS客户端的开发。苹果官方默认支持的就是经典的MVC模式。因此，我们完全参考服务端开发模式完成了iOS客户端的开发。你唯一需要克服的是对新语言的恐惧，以及适应UI开发的节奏。事实上，大部分服务端程序员都害怕UI编程。</p>\n<p>最后，我们进入Android客户端编程。</p>\n<h2 id=\"Android客户端编程\"><a href=\"#Android客户端编程\" class=\"headerlink\" title=\"Android客户端编程\"></a>Android客户端编程</h2><p>Android部分开发工具，我们使用Android Studio，网络框架使用<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a>，完整配置参考下方表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IDE</th>\n<th style=\"text-align:center\">编程语言</th>\n<th style=\"text-align:center\">网络框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Android Studio</td>\n<td style=\"text-align:center\">Java 1.8</td>\n<td style=\"text-align:center\">Retrofit</td>\n</tr>\n</tbody>\n</table>\n<p>打开Android Studio，选择Start a new Android Studio Project，在打开的页面中填入以下信息：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-b77a95d69f27f1ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>剩下步骤全部选择默认。</p>\n<p>按照iOS编码部分类推，Android端应该也有一个类似UIViewController的控制器。果不其然，在模板工程中就有一个MainActivity，其父类是AppCompatActivity，这就是Android的控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PS：事实上Android早期版本的控制器就叫Activity，由于系统设计不断变更，最终诞生了兼容性子类AppCompatActivity。这都是早期设计不够严谨，导致的问题。相对而言，iOS端的设计就靠谱了许多。</p>\n<p>同样地，在开始编码之前，我们加入所需的第三方依赖。那么，问题来了。Android端如何添加依赖呢？</p>\n<p>碰巧，Android端主要的开发语言就是Java。因此，我们依然可以使用Gradle进行依赖管理。碰巧，Android Studio默认支持的就是使用Gradle进行依赖管理。</p>\n<p>首先，在app模块目录的build.gradle添加 <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a> 依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &apos;com.squareup.retrofit2:retrofit:2.4.0&apos;</span><br></pre></td></tr></table></figure>\n<p>添加完成后，点击文件右上方Sync now下载依赖：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-07a786274c95d9c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>相对于AFNetworking，Retrofit设计的更加精妙。参考Retrofit官方文档，我们开始加入登录注册逻辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @FormUrlEncoded</span><br><span class=\"line\">    @POST(&quot;user/login&quot;)</span><br><span class=\"line\">    Call&lt;User&gt; login(@Field(&quot;username&quot;) String username, @Field(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    @FormUrlEncoded</span><br><span class=\"line\">    @POST(&quot;user/register&quot;)</span><br><span class=\"line\">    Call&lt;User&gt; register(@Field(&quot;username&quot;) String username, @Field(&quot;pwd&quot;) String pwd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Retrofit设计的其中一个巧妙之处在于：你只需要定义好接口，具体的实现交给Retrofit。你可以看到，上面的代码中我们仅仅定义了请求的类型，以及请求所需要的参数就已经完成了网络部分的所有工作。</p>\n<p>不过，操作这个接口实现，需要使用Retrofit实例。接下来，我们参考官方文档生成一个我们需要的Retrofit实例。</p>\n<p>在生成Retrofit实例之前，还需要注意一个事情。还记得iOS端我们是怎么完成JSON解析的吗？是的，我们使用了第三方库jsonmodel。</p>\n<p>在Json解析的设计上，Retrofit也相当巧妙。Retrofit提供了一个转换适配器用于实现Json数据的自动转换。使用它，你可以自定义自己的Json转换适配器；也可以使用官方已经实现好的适配器。一旦添加了这个适配器，所有的Json解析工作Retrofit就会自动帮忙完成。不再需要像AFNetworking一样在回调里面反复进行Json解析操作。</p>\n<p>因此，我们增加一个官方版本的Json转换适配器依赖 converter-json：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &apos;com.squareup.retrofit2:converter-gson:2.4.0&apos;</span><br></pre></td></tr></table></figure>\n<p>加入Json适配器之后，我们使用一个新的Retrofit管理类RetrofitManager用于生成项目所需要的Retrofit实例。完整代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RetrofitManager &#123;</span><br><span class=\"line\">    private static final String BASE_URL = &quot;http://192.168.31.146:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Retrofit create(String baseUrl) &#123;</span><br><span class=\"line\">        return new Retrofit.Builder()</span><br><span class=\"line\">                          .baseUrl(baseUrl)</span><br><span class=\"line\">                          .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                          .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static Retrofit createDefault() &#123;</span><br><span class=\"line\">        return create(BASE_URL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们尝试在MainActivity中测试登录接口，确定是否编写正确。我们在MainActivity的onCreate方法中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = RetrofitManager.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">UserService userService = retrofit.create(UserService.class);</span><br><span class=\"line\">Call &lt; User &gt; call = userService.login(&quot;1&quot;, &quot;1&quot;);</span><br><span class=\"line\">call.enqueue(new Callback &lt; User &gt; () &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    @Override </span><br><span class=\"line\">    public void onResponse(Call &lt; User &gt; call, Response &lt; User &gt; response) &#123;</span><br><span class=\"line\">        Log.e(&quot;MainActivity&quot;, call + &quot;&quot; + response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override </span><br><span class=\"line\">    public void onFailure(Call &lt; User &gt; call, Throwable t) &#123;</span><br><span class=\"line\">        Log.e(&quot;MainActivity&quot;, call + &quot;&quot; + t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>打开模拟器，运行，你将看到以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-18 04:03:24.546 7277-7277/com.youngfeng.androidclient D/NetworkSecurityConfig: No Network Security Config specified, using platform default</span><br><span class=\"line\">03-18 04:03:24.574 7277-7277/com.youngfeng.androidclient W/System.err: java.net.SocketException: Permission denied</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.createImpl(Socket.java:454)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.getImpl(Socket.java:517)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at java.net.Socket.setSoTimeout(Socket.java:1108)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:238)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:160)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">03-18 04:03:24.578 7277-7277/com.youngfeng.androidclient W/System.err:     at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br></pre></td></tr></table></figure>\n<p>提示我们权限被拒绝，这是和iOS平台不一样的地方。如果你的应用需要使用网络，你需要在清单文件中手动指定使用网络权限。为此，我们在AndroidManifest.xml文件中添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>再次运行，一切正常。</p>\n<p>注意：这里的service部分和服务端的service不一样，它只是Retrofit用于将网络接口分模块处理的一种手段，不要混淆。</p>\n<p>上面说到，Android里面的AppCompatActivity就是MVC中的控制器，接下来我们就完成最重要的控制器以及UI部分编码。</p>\n<p>a）创建LoginActivity以及布局文件activity_login.xml，在其onCreate方法中使用setContentView接口进行关联。</p>\n<p>b）UI编程<br>你相信吗？一旦你学会了一门新的技术，你的技能就会Double。</p>\n<p>iOS UI部分我们使用了约束布局的方式完成了整体布局，Android是否也可以使用约束布局呢？答案是：当然可以。</p>\n<p>事实上，Android官方也推荐使用这种布局方式进行页面布局。</p>\n<p>切换到可视化布局模式，我们依然使用拖拽UI的方式完成整个布局，完整代码请参考文章最后的附录部分：<br><img src=\"https://upload-images.jianshu.io/upload_images/703764-583b7db343adee31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>PS：目前，Android端的约束布局相对iOS逊色不少，希望后面官方能够提供更多功能支持。</p>\n<p>按照同样的方式完成注册页面和首页布局，UI部分开发完成后，尝试跳转到指定控制器。你会发现，出错了。这也是和iOS不一样的地方，Android端四大组件必须在清单文件中注册。具体是什么原因，请自行思考，这不是本文研究的重点。</p>\n<p>因此，我们首先在清单文件中对所有控制器进行注册：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.login.LoginActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;&gt;</span><br><span class=\"line\">        &lt;intent-filter&gt;</span><br><span class=\"line\">            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class=\"line\">        &lt;/intent-filter&gt;</span><br><span class=\"line\">    &lt;/activity&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;activity android:name=&quot;.MainActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;activity android:name=&quot;.register.RegisterActivity&quot;</span><br><span class=\"line\">        android:screenOrientation=&quot;portrait&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，以登录为例，我们在控制器中完善登录逻辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LoginActivity extends BaseActivity &#123;</span><br><span class=\"line\">    private EditText mUsernameEdit;</span><br><span class=\"line\">    private EditText mPwdEdit;</span><br><span class=\"line\">    private Button mLoginBtn;</span><br><span class=\"line\">    private Button mRegisterBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_login);</span><br><span class=\"line\"></span><br><span class=\"line\">        mUsernameEdit = findViewById(R.id.edit_username);</span><br><span class=\"line\">        mPwdEdit = findViewById(R.id.edit_pwd);</span><br><span class=\"line\">        mLoginBtn = findViewById(R.id.btn_login);</span><br><span class=\"line\">        mRegisterBtn = findViewById(R.id.btn_register);</span><br><span class=\"line\"></span><br><span class=\"line\">        mLoginBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                login(mUsernameEdit.getText().toString(), mPwdEdit.getText().toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        mRegisterBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void login(String username, String pwd) &#123;</span><br><span class=\"line\">        Retrofit retrofit = RetrofitManager.createDefault();</span><br><span class=\"line\">        UserService userService = retrofit.create(UserService.class);</span><br><span class=\"line\">        Call&lt;HttpResponse&lt;User&gt;&gt; call = userService.login(username, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">        showLoading(true);</span><br><span class=\"line\">        call.enqueue(new Callback&lt;HttpResponse&lt;User&gt;&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onResponse(Call&lt;HttpResponse&lt;User&gt;&gt; call, Response&lt;HttpResponse&lt;User&gt;&gt; response) &#123;</span><br><span class=\"line\">                showLoading(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例子代码，暂时忽略空值判断</span><br><span class=\"line\">                if(HttpResponse.CODE_SUCCESS != response.body().getCode()) &#123;</span><br><span class=\"line\">                    promptError(response.body().getMsg() + &quot;&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);</span><br><span class=\"line\">                    intent.putExtra(MainActivity.KEY_USER, response.body().getData());</span><br><span class=\"line\">                    startActivity(intent);</span><br><span class=\"line\">                    finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onFailure(Call&lt;HttpResponse&lt;User&gt;&gt; call, Throwable t) &#123;</span><br><span class=\"line\">                showLoading(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                promptError(t.getMessage() + &quot;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，按照iOS的开发模式，我们完成了Android客户端的开发。与iOS不同的地方是，Android端控制器必须在清单文件中注册。程序员不能主动创建Activity，只能间接使用intent进行通信。而对于布局，两者都可以使用约束管理的方式完成。从这个角度来说，Android端和iOS端开发切换的难度还是比较低的。</p>\n<h2 id=\"距离全栈还差最后一步\"><a href=\"#距离全栈还差最后一步\" class=\"headerlink\" title=\"距离全栈还差最后一步\"></a>距离全栈还差最后一步</h2><p>至此，我们已经完成了文章开头定下的目标。以MVC架构为基础，完成了服务端、iOS客户端、Android客户端编码。</p>\n<p>然而，很多同学希望成为一个全栈工程师。按照现在的主流开发分支来说，成为一个全栈工程师，你还需要掌握Web前端开发。那么，问题来了，Web前端开发是否也是使用MVC架构呢？</p>\n<p>事实上，如果你使用 <a href=\"https://github.com/angular/angular\" target=\"_blank\" rel=\"noopener\">Angular</a>，你应该早就习惯了MVC。而如果你偏爱React，你恐怕会搭配Redux，使用这种响应式的数据流框架编码。如果你使用Vue，你恐怕也会选择MVC或者MVVM架构。</p>\n<p>如果你选择使用MVC，你依然可以按照类推的方式来学习。由于文章篇幅的原因，这部分就不予展示了。</p>\n<h2 id=\"编后说\"><a href=\"#编后说\" class=\"headerlink\" title=\"编后说\"></a>编后说</h2><p>这篇文章我们以MVC为架构，从服务端编程开始，使用类推的方式依次完成了iOS客户端、Android客户端的开发。</p>\n<p>有人可能会说，文章中的例子太简单，没有实际意义。事实上，在学习一门新技术的时候，就要从最基础的部分出发，建立对这门技术的最初印象。很多同学容易一开始就陷入细节当中无法自拔，产生的最直观的结果就是对新技术产生恐惧。因此，你常常可以看到一个程序员面对新东西骂娘，无怪乎。</p>\n<p>其实，如果你慢慢进入到细节编程中，你会发现技术之间越来越多的相似性。这个时候你的积极性就会越来越高，编码也会更加得心应手。</p>\n<p>我在学习一门新技术的时候，都是先从相似性开始。然后，再去攻克不同的部分。从不同的部分中去提炼相同的思想，这样在面对不同问题的时候，我始终可以使用同样的思想去解决。</p>\n<p>当然，我想，你应该会说。虽然克服了框架问题，可是不同的编程语言千差万别。我们无法从一门语言快速过渡到另外一门语言，这在学习新技术的时候才是最大的拦路虎。</p>\n<p>你说的很对，这恰好是下一个我想和你分享的问题。</p>\n<p><strong>扫描下方二维码，关注欧阳锋工作室，回复“相对论”抢先阅读相对论系列下一篇文章《技术相对论之编程语言》。</strong></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>本篇例子完整代码：<a href=\"https://github.com/yuanhoujun/it-theory-of-relativity\" target=\"_blank\" rel=\"noopener\">https://github.com/yuanhoujun/it-theory-of-relativity</a><br>IntelliJ IDEA下载地址：<a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/idea/</a><br>Tomcat下载地址：<a href=\"http://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">http://tomcat.apache.org/</a><br>iOS开发者官网：<a href=\"https://developer.apple.com/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/</a><br>Android开发者官网：<a href=\"https://developer.android.com/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/index.html</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/写在十分简历发布前夕/10fenjl.jpg","slug":"10fenjl.jpg","post":"cjv0x7uh30039bkb4dwzmqzgo","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjv0x7uh30039bkb4dwzmqzgo","category_id":"cjv0ihr8p0005leb49i9bd3z0","_id":"cjv0x7uh5003cbkb4302ig3xf"},{"post_id":"cjv0x7uho003fbkb4lara5c34","category_id":"cjv0ihr99000fleb4le5airdh","_id":"cjv0x7uhw003lbkb4a13lcmau"},{"post_id":"cjv0x7uhp003gbkb42mqjq7x6","category_id":"cjv0ihr99000fleb4le5airdh","_id":"cjv0x7uhy003obkb4dbsv3cze"},{"post_id":"cjv0x7uhr003ibkb4gq1njmjg","category_id":"cjv0ihr9j000oleb4w8btpvvs","_id":"cjv0x7uhz003rbkb47femqqr6"},{"post_id":"cjv0x7uht003kbkb41qdlp9m0","category_id":"cjv0ihr9m000wleb4txiov3kn","_id":"cjv0x7ui2003ubkb4h1c9jxca"},{"post_id":"cjv0x7uhx003nbkb4vv0835ib","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7ui4003xbkb498csbuol"},{"post_id":"cjv0x7uhx003nbkb4vv0835ib","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7ui60040bkb4cesjfsl4"},{"post_id":"cjv0x7uhz003qbkb4b3262o0p","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uia0043bkb4fxl9f079"},{"post_id":"cjv0x7uhz003qbkb4b3262o0p","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uib0045bkb4cx185ir7"},{"post_id":"cjv0x7ui0003tbkb4o9luy7hm","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uic0047bkb4bh3aoxi7"},{"post_id":"cjv0x7ui0003tbkb4o9luy7hm","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uic0049bkb497caf1wx"},{"post_id":"cjv0x7ui2003wbkb4ylpq2hsi","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uid004bbkb446qe7ga9"},{"post_id":"cjv0x7ui2003wbkb4ylpq2hsi","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uid004dbkb4jssvny7v"},{"post_id":"cjv0x7ui4003zbkb4irm1nnmy","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uid004fbkb463gaqkez"},{"post_id":"cjv0x7ui4003zbkb4irm1nnmy","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uid004hbkb4ruj4lhv0"},{"post_id":"cjv0x7ui80042bkb49gc1byly","category_id":"cjv0ihr9s001hleb4w35y921q","_id":"cjv0x7uid004jbkb4nqj20j02"},{"post_id":"cjv0x7uiy004sbkb4fgkdqfih","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uj8004ybkb4qwhckfl1"},{"post_id":"cjv0x7uiy004sbkb4fgkdqfih","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uj90050bkb48scljw9z"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uja0052bkb4n1a5i7ih"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7uja0054bkb474dikthb"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7uja0056bkb4653gdk46"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","category_id":"cjv0ihram002zleb4arviigsd","_id":"cjv0x7ujb0058bkb409zyzqqp"},{"post_id":"cjv0x7uj6004xbkb423rgj9ud","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7ujb005abkb43c3govnl"},{"post_id":"cjv0x7uj6004xbkb423rgj9ud","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7ujb005cbkb4crpp3gae"},{"post_id":"cjv0x7ujd005hbkb4me64p4lc","category_id":"cjv0ihraz003sleb4tnugjr7m","_id":"cjv0x7ujk005lbkb4gv7j08cp"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","category_id":"cjv0ihr9o0010leb45fhbscta","_id":"cjv0x7ujk005nbkb4gpqq95ks"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","category_id":"cjv0ihr9s001jleb4e54wau6b","_id":"cjv0x7ujk005pbkb4q6crhjfu"},{"post_id":"cjv0x7ujm005ubkb4la8x1tmm","category_id":"cjv0ihrb8004bleb4svcvh37v","_id":"cjv0x7ujq005ybkb4drmd89hf"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","category_id":"cjv0ihrb9004dleb4vwppliim","_id":"cjv0x7ujq0060bkb4rhu5h3v1"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","category_id":"cjv0ihrb9004hleb4eurykdz2","_id":"cjv0x7ujq0062bkb43tq11byl"},{"post_id":"cjv0x7ujs0066bkb4l2wrz53k","category_id":"cjv0ihr9j000oleb4w8btpvvs","_id":"cjv0x7uju0069bkb4hi5anwd4"}],"PostTag":[{"post_id":"cjv0x7uh30039bkb4dwzmqzgo","tag_id":"cjv0ihr8r0006leb4z8o5y92a","_id":"cjv0x7uh5003abkb4j7s5zodn"},{"post_id":"cjv0x7uh30039bkb4dwzmqzgo","tag_id":"cjv0ihr8t0007leb4891yunjo","_id":"cjv0x7uh5003bbkb4zht8ndh5"},{"post_id":"cjv0x7uh30039bkb4dwzmqzgo","tag_id":"cjv0ihr8u0009leb4w6ktntbi","_id":"cjv0x7uh6003dbkb46icu3jy1"},{"post_id":"cjv0x7uho003fbkb4lara5c34","tag_id":"cjv0ihr99000gleb4afmp8a9a","_id":"cjv0x7uhr003hbkb4iij66faw"},{"post_id":"cjv0x7uho003fbkb4lara5c34","tag_id":"cjv0ihr9f000lleb48i2rs8fc","_id":"cjv0x7uht003jbkb4r4ddvhd3"},{"post_id":"cjv0x7uhp003gbkb42mqjq7x6","tag_id":"cjv0ihr9k000qleb4qnp70g58","_id":"cjv0x7uhw003mbkb4uhuky3j4"},{"post_id":"cjv0x7uhp003gbkb42mqjq7x6","tag_id":"cjv0ihr9m000xleb4t1ffx9wu","_id":"cjv0x7uhy003pbkb47xiedsos"},{"post_id":"cjv0x7uhp003gbkb42mqjq7x6","tag_id":"cjv0ihr9o0011leb459yf0jb1","_id":"cjv0x7ui0003sbkb4d4j8mzal"},{"post_id":"cjv0x7uhr003ibkb4gq1njmjg","tag_id":"cjv0ihr99000gleb4afmp8a9a","_id":"cjv0x7ui2003vbkb4n5x3yzdq"},{"post_id":"cjv0x7uhr003ibkb4gq1njmjg","tag_id":"cjv0ihr9f000lleb48i2rs8fc","_id":"cjv0x7ui4003ybkb4mrtzcwsp"},{"post_id":"cjv0x7uht003kbkb41qdlp9m0","tag_id":"cjv0ihr9q001bleb4sa6a3g4p","_id":"cjv0x7ui80041bkb4fv5w5hpp"},{"post_id":"cjv0x7uhx003nbkb4vv0835ib","tag_id":"cjv0ihr9r001fleb4hkitm7f5","_id":"cjv0x7uib0044bkb4ou4qtjzq"},{"post_id":"cjv0x7uhx003nbkb4vv0835ib","tag_id":"cjv0ihr9s001ileb4fsfzzfck","_id":"cjv0x7uic0046bkb4e2e6t4aa"},{"post_id":"cjv0x7uhx003nbkb4vv0835ib","tag_id":"cjv0ihr9t001kleb4zfb8k0zk","_id":"cjv0x7uic0048bkb4uqk7sokr"},{"post_id":"cjv0x7uhz003qbkb4b3262o0p","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uid004abkb4nqozj0q7"},{"post_id":"cjv0x7uhz003qbkb4b3262o0p","tag_id":"cjv0ihr9u001tleb4dmf9u1ze","_id":"cjv0x7uid004cbkb44654w34b"},{"post_id":"cjv0x7uhz003qbkb4b3262o0p","tag_id":"cjv0ihr9v001yleb4611zoc29","_id":"cjv0x7uid004ebkb4d1hqrq1o"},{"post_id":"cjv0x7ui0003tbkb4o9luy7hm","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uid004gbkb486h5au9f"},{"post_id":"cjv0x7ui0003tbkb4o9luy7hm","tag_id":"cjv0ihr9y0027leb4j1ysl4gp","_id":"cjv0x7uid004ibkb4vrilcvna"},{"post_id":"cjv0x7ui0003tbkb4o9luy7hm","tag_id":"cjv0ihr9y002bleb4vqdl0bny","_id":"cjv0x7uie004kbkb45wsvoghh"},{"post_id":"cjv0x7ui2003wbkb4ylpq2hsi","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uie004lbkb4180y8en8"},{"post_id":"cjv0x7ui2003wbkb4ylpq2hsi","tag_id":"cjv0ihr9y002bleb4vqdl0bny","_id":"cjv0x7uie004mbkb4y06s69si"},{"post_id":"cjv0x7ui4003zbkb4irm1nnmy","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uie004nbkb42x7rtgok"},{"post_id":"cjv0x7ui4003zbkb4irm1nnmy","tag_id":"cjv0ihr9y002bleb4vqdl0bny","_id":"cjv0x7uie004obkb432qxjtpr"},{"post_id":"cjv0x7ui80042bkb49gc1byly","tag_id":"cjv0ihr9r001fleb4hkitm7f5","_id":"cjv0x7uie004pbkb49r7sb27r"},{"post_id":"cjv0x7ui80042bkb49gc1byly","tag_id":"cjv0ihra1002oleb4tis0s663","_id":"cjv0x7uie004qbkb46zv4f4si"},{"post_id":"cjv0x7ui80042bkb49gc1byly","tag_id":"cjv0ihra1002pleb4c2etcna4","_id":"cjv0x7uif004rbkb45ig94okb"},{"post_id":"cjv0x7uiy004sbkb4fgkdqfih","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uj3004ubkb4cyjxxtj8"},{"post_id":"cjv0x7uiy004sbkb4fgkdqfih","tag_id":"cjv0ihrai002vleb4rntuhvsn","_id":"cjv0x7uj6004wbkb4x21c5s3l"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","tag_id":"cjv0ihr9r001fleb4hkitm7f5","_id":"cjv0x7uj8004zbkb475mmr3gg"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7uja0051bkb491se53u5"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","tag_id":"cjv0ihram0030leb40f1bh96e","_id":"cjv0x7uja0053bkb406ndfkrl"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","tag_id":"cjv0ihrao0036leb42zfjad3c","_id":"cjv0x7uja0055bkb428txvp9u"},{"post_id":"cjv0x7uj0004tbkb4kvlhp0oa","tag_id":"cjv0ihrap003bleb4ugprqla7","_id":"cjv0x7ujb0057bkb46xsr2suu"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7ujb0059bkb4jp69iihe"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","tag_id":"cjv0ihrap003eleb4s4gyk1oy","_id":"cjv0x7ujb005bbkb4zu9f38vg"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","tag_id":"cjv0ihraq003hleb461w7a7lu","_id":"cjv0x7ujb005dbkb4aqdkkfho"},{"post_id":"cjv0x7uj4004vbkb4yaonq9h3","tag_id":"cjv0ihraq003kleb4q6ntzc44","_id":"cjv0x7ujb005ebkb4b1dt59tx"},{"post_id":"cjv0x7uj6004xbkb423rgj9ud","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7ujb005fbkb4emdra0jn"},{"post_id":"cjv0x7uj6004xbkb423rgj9ud","tag_id":"cjv0ihr9y002bleb4vqdl0bny","_id":"cjv0x7ujb005gbkb4qz4oz7t3"},{"post_id":"cjv0x7ujd005hbkb4me64p4lc","tag_id":"cjv0ihr9r001fleb4hkitm7f5","_id":"cjv0x7ujj005jbkb4nagk5n91"},{"post_id":"cjv0x7ujd005hbkb4me64p4lc","tag_id":"cjv0ihraz003tleb4hjw596m6","_id":"cjv0x7ujj005kbkb4uvv0xccn"},{"post_id":"cjv0x7ujd005hbkb4me64p4lc","tag_id":"cjv0ihrb0003uleb4g9ss51mp","_id":"cjv0x7ujk005mbkb4x2a9u7i3"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","tag_id":"cjv0ihr9t001nleb4ii3m2pa4","_id":"cjv0x7ujk005obkb4if2qkdot"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","tag_id":"cjv0ihr9r001fleb4hkitm7f5","_id":"cjv0x7ujk005qbkb4gptufl3j"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","tag_id":"cjv0ihrb0003yleb41d9vb6gf","_id":"cjv0x7ujk005rbkb44lskqd5o"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","tag_id":"cjv0ihrb10041leb4wz9whaqc","_id":"cjv0x7ujk005sbkb4jodmrzaj"},{"post_id":"cjv0x7uji005ibkb4mrfxo26c","tag_id":"cjv0ihrb10043leb4p13rcy8k","_id":"cjv0x7ujk005tbkb4sjy158ff"},{"post_id":"cjv0x7ujm005ubkb4la8x1tmm","tag_id":"cjv0ihrb8004cleb4lct1nfpt","_id":"cjv0x7ujp005wbkb4zoe3fw1m"},{"post_id":"cjv0x7ujm005ubkb4la8x1tmm","tag_id":"cjv0ihrb9004eleb4uyqtjekp","_id":"cjv0x7ujq005xbkb441bclnpq"},{"post_id":"cjv0x7ujm005ubkb4la8x1tmm","tag_id":"cjv0ihrb9004gleb47xt370ya","_id":"cjv0x7ujq005zbkb4tpakt1sn"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","tag_id":"cjv0ihrba004ileb4zzm0edxm","_id":"cjv0x7ujq0061bkb4wknbbg94"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","tag_id":"cjv0ihrbb004lleb4v4ifab45","_id":"cjv0x7ujq0063bkb41pstr1yg"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","tag_id":"cjv0ihrbb004pleb4nfoyltqt","_id":"cjv0x7ujq0064bkb4tj0a0g65"},{"post_id":"cjv0x7ujn005vbkb4mkvno0qs","tag_id":"cjv0ihrbc004qleb4b3vivsmj","_id":"cjv0x7ujq0065bkb40rlunjs5"},{"post_id":"cjv0x7ujs0066bkb4l2wrz53k","tag_id":"cjv0ihrbf004wleb4tlzp8eij","_id":"cjv0x7ujt0067bkb4iqpbwnyn"},{"post_id":"cjv0x7ujs0066bkb4l2wrz53k","tag_id":"cjv0ihrbg004yleb426wqqu44","_id":"cjv0x7uju0068bkb4kxx5h0sc"}],"Tag":[{"name":"创业","_id":"cjv0ihr8r0006leb4z8o5y92a"},{"name":"深圳一行代码科技有限公司","_id":"cjv0ihr8t0007leb4891yunjo"},{"name":"十分简历","_id":"cjv0ihr8u0009leb4w6ktntbi"},{"name":"2017","_id":"cjv0ihr99000gleb4afmp8a9a"},{"name":"总结","_id":"cjv0ihr9f000lleb48i2rs8fc"},{"name":"欧阳锋","_id":"cjv0ihr9k000qleb4qnp70g58"},{"name":"关注","_id":"cjv0ihr9m000xleb4t1ffx9wu"},{"name":"工作室","_id":"cjv0ihr9o0011leb459yf0jb1"},{"name":"Markdown","_id":"cjv0ihr9q001bleb4sa6a3g4p"},{"name":"Android","_id":"cjv0ihr9r001fleb4hkitm7f5"},{"name":"Kotlin基础","_id":"cjv0ihr9s001ileb4fsfzzfck"},{"name":"视频教程","_id":"cjv0ihr9t001kleb4zfb8k0zk"},{"name":"Kotlin","_id":"cjv0ihr9t001nleb4ii3m2pa4"},{"name":"扩展","_id":"cjv0ihr9u001tleb4dmf9u1ze"},{"name":"this","_id":"cjv0ihr9v001yleb4611zoc29"},{"name":"object","_id":"cjv0ihr9y0027leb4j1ysl4gp"},{"name":"编程语言","_id":"cjv0ihr9y002bleb4vqdl0bny"},{"name":"滑动返回","_id":"cjv0ihra1002oleb4tis0s663"},{"name":"开源","_id":"cjv0ihra1002pleb4c2etcna4"},{"name":"泛型","_id":"cjv0ihrai002vleb4rntuhvsn"},{"name":"代理模式","_id":"cjv0ihram0030leb40f1bh96e"},{"name":"代理属性","_id":"cjv0ihrao0036leb42zfjad3c"},{"name":"延迟加载","_id":"cjv0ihrap003bleb4ugprqla7"},{"name":"Groovy","_id":"cjv0ihrap003eleb4s4gyk1oy"},{"name":"Gradle","_id":"cjv0ihraq003hleb461w7a7lu"},{"name":"脚本","_id":"cjv0ihraq003kleb4q6ntzc44"},{"name":"Bug","_id":"cjv0ihraz003tleb4hjw596m6"},{"name":"前端","_id":"cjv0ihrb0003uleb4g9ss51mp"},{"name":"操作符","_id":"cjv0ihrb0003yleb41d9vb6gf"},{"name":"重载","_id":"cjv0ihrb10041leb4wz9whaqc"},{"name":"infix","_id":"cjv0ihrb10043leb4p13rcy8k"},{"name":"Java","_id":"cjv0ihrb8004cleb4lct1nfpt"},{"name":"设计模式","_id":"cjv0ihrb9004eleb4uyqtjekp"},{"name":"动态代理","_id":"cjv0ihrb9004gleb47xt370ya"},{"name":"Git","_id":"cjv0ihrba004ileb4zzm0edxm"},{"name":"版本控制工具","_id":"cjv0ihrbb004lleb4v4ifab45"},{"name":"开发工具","_id":"cjv0ihrbb004pleb4nfoyltqt"},{"name":"命令行","_id":"cjv0ihrbc004qleb4b3vivsmj"},{"name":"相对论","_id":"cjv0ihrbf004wleb4tlzp8eij"},{"name":"编程","_id":"cjv0ihrbg004yleb426wqqu44"}]}}